
SD Card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008638  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010c0  08008744  08008744  00009744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009804  08009804  0000b080  2**0
                  CONTENTS
  4 .ARM          00000008  08009804  08009804  0000a804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800980c  0800980c  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800980c  0800980c  0000a80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009810  08009810  0000a810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009814  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000080  08009894  0000b080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08009894  0000b4cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0ad  00000000  00000000  0000b0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a8  00000000  00000000  00018156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0001a700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d7  00000000  00000000  0001b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192a5  00000000  00000000  0001bdaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f9e  00000000  00000000  00035054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000873cb  00000000  00000000  00045ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd3bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d3c  00000000  00000000  000cd400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000d113c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	0800872c 	.word	0x0800872c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	0800872c 	.word	0x0800872c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <set_sd_cs_pin>:
 * Global CS pin control
 **************************************/

/* Set active CS pin for SD card operations */
void set_sd_cs_pin(uint16_t pin)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	80fb      	strh	r3, [r7, #6]
  current_sd_cs_pin = pin;
 8000166:	4a08      	ldr	r2, [pc, #32]	@ (8000188 <set_sd_cs_pin+0x2c>)
 8000168:	88fb      	ldrh	r3, [r7, #6]
 800016a:	8013      	strh	r3, [r2, #0]
  
  // Reset SD card state when CS pin changes
  Stat = STA_NOINIT;  // Force re-initialization
 800016c:	4b07      	ldr	r3, [pc, #28]	@ (800018c <set_sd_cs_pin+0x30>)
 800016e:	2201      	movs	r2, #1
 8000170:	701a      	strb	r2, [r3, #0]
  CardType = 0;       // Reset card type
 8000172:	4b07      	ldr	r3, [pc, #28]	@ (8000190 <set_sd_cs_pin+0x34>)
 8000174:	2200      	movs	r2, #0
 8000176:	701a      	strb	r2, [r3, #0]
  PowerFlag = 0;      // Reset power flag
 8000178:	4b06      	ldr	r3, [pc, #24]	@ (8000194 <set_sd_cs_pin+0x38>)
 800017a:	2200      	movs	r2, #0
 800017c:	701a      	strb	r2, [r3, #0]
}
 800017e:	bf00      	nop
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000000 	.word	0x20000000
 800018c:	20000002 	.word	0x20000002
 8000190:	200000a0 	.word	0x200000a0
 8000194:	200000a1 	.word	0x200000a1

08000198 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, current_sd_cs_pin, GPIO_PIN_RESET);
 800019c:	4b05      	ldr	r3, [pc, #20]	@ (80001b4 <SELECT+0x1c>)
 800019e:	881b      	ldrh	r3, [r3, #0]
 80001a0:	2200      	movs	r2, #0
 80001a2:	4619      	mov	r1, r3
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <SELECT+0x20>)
 80001a6:	f001 ffaf 	bl	8002108 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80001aa:	2001      	movs	r0, #1
 80001ac:	f001 fd20 	bl	8001bf0 <HAL_Delay>
}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000000 	.word	0x20000000
 80001b8:	40010c00 	.word	0x40010c00

080001bc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, current_sd_cs_pin, GPIO_PIN_SET);
 80001c0:	4b05      	ldr	r3, [pc, #20]	@ (80001d8 <DESELECT+0x1c>)
 80001c2:	881b      	ldrh	r3, [r3, #0]
 80001c4:	2201      	movs	r2, #1
 80001c6:	4619      	mov	r1, r3
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <DESELECT+0x20>)
 80001ca:	f001 ff9d 	bl	8002108 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80001ce:	2001      	movs	r0, #1
 80001d0:	f001 fd0e 	bl	8001bf0 <HAL_Delay>
}
 80001d4:	bf00      	nop
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	20000000 	.word	0x20000000
 80001dc:	40010c00 	.word	0x40010c00

080001e0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80001ea:	bf00      	nop
 80001ec:	4b08      	ldr	r3, [pc, #32]	@ (8000210 <SPI_TxByte+0x30>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	689b      	ldr	r3, [r3, #8]
 80001f2:	f003 0302 	and.w	r3, r3, #2
 80001f6:	2b02      	cmp	r3, #2
 80001f8:	d1f8      	bne.n	80001ec <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80001fa:	1df9      	adds	r1, r7, #7
 80001fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000200:	2201      	movs	r2, #1
 8000202:	4803      	ldr	r0, [pc, #12]	@ (8000210 <SPI_TxByte+0x30>)
 8000204:	f002 fc2c 	bl	8002a60 <HAL_SPI_Transmit>
}
 8000208:	bf00      	nop
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	200000a4 	.word	0x200000a4

08000214 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000220:	bf00      	nop
 8000222:	4b09      	ldr	r3, [pc, #36]	@ (8000248 <SPI_TxBuffer+0x34>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	689b      	ldr	r3, [r3, #8]
 8000228:	f003 0302 	and.w	r3, r3, #2
 800022c:	2b02      	cmp	r3, #2
 800022e:	d1f8      	bne.n	8000222 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000230:	887a      	ldrh	r2, [r7, #2]
 8000232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	4803      	ldr	r0, [pc, #12]	@ (8000248 <SPI_TxBuffer+0x34>)
 800023a:	f002 fc11 	bl	8002a60 <HAL_SPI_Transmit>
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	200000a4 	.word	0x200000a4

0800024c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000252:	23ff      	movs	r3, #255	@ 0xff
 8000254:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000256:	bf00      	nop
 8000258:	4b0a      	ldr	r3, [pc, #40]	@ (8000284 <SPI_RxByte+0x38>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	f003 0302 	and.w	r3, r3, #2
 8000262:	2b02      	cmp	r3, #2
 8000264:	d1f8      	bne.n	8000258 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000266:	1dba      	adds	r2, r7, #6
 8000268:	1df9      	adds	r1, r7, #7
 800026a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	2301      	movs	r3, #1
 8000272:	4804      	ldr	r0, [pc, #16]	@ (8000284 <SPI_RxByte+0x38>)
 8000274:	f002 fd38 	bl	8002ce8 <HAL_SPI_TransmitReceive>

  return data;
 8000278:	79bb      	ldrb	r3, [r7, #6]
}
 800027a:	4618      	mov	r0, r3
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	200000a4 	.word	0x200000a4

08000288 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000290:	f7ff ffdc 	bl	800024c <SPI_RxByte>
 8000294:	4603      	mov	r3, r0
 8000296:	461a      	mov	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	701a      	strb	r2, [r3, #0]
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 80002aa:	4b0a      	ldr	r3, [pc, #40]	@ (80002d4 <SD_ReadyWait+0x30>)
 80002ac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80002b0:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80002b2:	f7ff ffcb 	bl	800024c <SPI_RxByte>
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	2bff      	cmp	r3, #255	@ 0xff
 80002be:	d003      	beq.n	80002c8 <SD_ReadyWait+0x24>
 80002c0:	4b04      	ldr	r3, [pc, #16]	@ (80002d4 <SD_ReadyWait+0x30>)
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d1f4      	bne.n	80002b2 <SD_ReadyWait+0xe>

  return res;
 80002c8:	79fb      	ldrb	r3, [r7, #7]
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	2000009e 	.word	0x2000009e

080002d8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80002de:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80002e2:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80002e4:	f7ff ff6a 	bl	80001bc <DESELECT>
  for(int i = 0; i < 10; i++)
 80002e8:	2300      	movs	r3, #0
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	e005      	b.n	80002fa <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80002ee:	20ff      	movs	r0, #255	@ 0xff
 80002f0:	f7ff ff76 	bl	80001e0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	3301      	adds	r3, #1
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	2b09      	cmp	r3, #9
 80002fe:	ddf6      	ble.n	80002ee <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8000300:	f7ff ff4a 	bl	8000198 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8000304:	2340      	movs	r3, #64	@ 0x40
 8000306:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8000308:	2300      	movs	r3, #0
 800030a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800030c:	2300      	movs	r3, #0
 800030e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000310:	2300      	movs	r3, #0
 8000312:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000314:	2300      	movs	r3, #0
 8000316:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8000318:	2395      	movs	r3, #149	@ 0x95
 800031a:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 800031c:	463b      	mov	r3, r7
 800031e:	2106      	movs	r1, #6
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff77 	bl	8000214 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8000326:	e002      	b.n	800032e <SD_PowerOn+0x56>
  {
    cnt--;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3b01      	subs	r3, #1
 800032c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800032e:	f7ff ff8d 	bl	800024c <SPI_RxByte>
 8000332:	4603      	mov	r3, r0
 8000334:	2b01      	cmp	r3, #1
 8000336:	d002      	beq.n	800033e <SD_PowerOn+0x66>
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d1f4      	bne.n	8000328 <SD_PowerOn+0x50>
  }

  DESELECT();
 800033e:	f7ff ff3d 	bl	80001bc <DESELECT>
  SPI_TxByte(0XFF);
 8000342:	20ff      	movs	r0, #255	@ 0xff
 8000344:	f7ff ff4c 	bl	80001e0 <SPI_TxByte>

  PowerFlag = 1;
 8000348:	4b03      	ldr	r3, [pc, #12]	@ (8000358 <SD_PowerOn+0x80>)
 800034a:	2201      	movs	r2, #1
 800034c:	701a      	strb	r2, [r3, #0]
}
 800034e:	bf00      	nop
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	200000a1 	.word	0x200000a1

0800035c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000360:	4b03      	ldr	r3, [pc, #12]	@ (8000370 <SD_PowerOff+0x14>)
 8000362:	2200      	movs	r2, #0
 8000364:	701a      	strb	r2, [r3, #0]
}
 8000366:	bf00      	nop
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	200000a1 	.word	0x200000a1

08000374 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000378:	4b02      	ldr	r3, [pc, #8]	@ (8000384 <SD_CheckPower+0x10>)
 800037a:	781b      	ldrb	r3, [r3, #0]
}
 800037c:	4618      	mov	r0, r3
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	200000a1 	.word	0x200000a1

08000388 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8000392:	4b13      	ldr	r3, [pc, #76]	@ (80003e0 <SD_RxDataBlock+0x58>)
 8000394:	22c8      	movs	r2, #200	@ 0xc8
 8000396:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000398:	f7ff ff58 	bl	800024c <SPI_RxByte>
 800039c:	4603      	mov	r3, r0
 800039e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80003a0:	7bfb      	ldrb	r3, [r7, #15]
 80003a2:	2bff      	cmp	r3, #255	@ 0xff
 80003a4:	d103      	bne.n	80003ae <SD_RxDataBlock+0x26>
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <SD_RxDataBlock+0x58>)
 80003a8:	881b      	ldrh	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d1f4      	bne.n	8000398 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 80003ae:	7bfb      	ldrb	r3, [r7, #15]
 80003b0:	2bfe      	cmp	r3, #254	@ 0xfe
 80003b2:	d001      	beq.n	80003b8 <SD_RxDataBlock+0x30>
 80003b4:	2300      	movs	r3, #0
 80003b6:	e00f      	b.n	80003d8 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	1c5a      	adds	r2, r3, #1
 80003bc:	607a      	str	r2, [r7, #4]
 80003be:	4618      	mov	r0, r3
 80003c0:	f7ff ff62 	bl	8000288 <SPI_RxBytePtr>
  } while(len--);
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	1e5a      	subs	r2, r3, #1
 80003c8:	603a      	str	r2, [r7, #0]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d1f4      	bne.n	80003b8 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80003ce:	f7ff ff3d 	bl	800024c <SPI_RxByte>
  SPI_RxByte();
 80003d2:	f7ff ff3b 	bl	800024c <SPI_RxByte>

  return TRUE;
 80003d6:	2301      	movs	r3, #1
}
 80003d8:	4618      	mov	r0, r3
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	2000009c 	.word	0x2000009c

080003e4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	460b      	mov	r3, r1
 80003ee:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80003f4:	f7ff ff56 	bl	80002a4 <SD_ReadyWait>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2bff      	cmp	r3, #255	@ 0xff
 80003fc:	d001      	beq.n	8000402 <SD_TxDataBlock+0x1e>
 80003fe:	2300      	movs	r3, #0
 8000400:	e02f      	b.n	8000462 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8000402:	78fb      	ldrb	r3, [r7, #3]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff feeb 	bl	80001e0 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800040a:	78fb      	ldrb	r3, [r7, #3]
 800040c:	2bfd      	cmp	r3, #253	@ 0xfd
 800040e:	d020      	beq.n	8000452 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000410:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000414:	6878      	ldr	r0, [r7, #4]
 8000416:	f7ff fefd 	bl	8000214 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 800041a:	f7ff ff17 	bl	800024c <SPI_RxByte>
    SPI_RxByte();
 800041e:	f7ff ff15 	bl	800024c <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8000422:	e00b      	b.n	800043c <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8000424:	f7ff ff12 	bl	800024c <SPI_RxByte>
 8000428:	4603      	mov	r3, r0
 800042a:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	f003 031f 	and.w	r3, r3, #31
 8000432:	2b05      	cmp	r3, #5
 8000434:	d006      	beq.n	8000444 <SD_TxDataBlock+0x60>
      i++;
 8000436:	7bbb      	ldrb	r3, [r7, #14]
 8000438:	3301      	adds	r3, #1
 800043a:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800043c:	7bbb      	ldrb	r3, [r7, #14]
 800043e:	2b40      	cmp	r3, #64	@ 0x40
 8000440:	d9f0      	bls.n	8000424 <SD_TxDataBlock+0x40>
 8000442:	e000      	b.n	8000446 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000444:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8000446:	bf00      	nop
 8000448:	f7ff ff00 	bl	800024c <SPI_RxByte>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0fa      	beq.n	8000448 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000452:	7bfb      	ldrb	r3, [r7, #15]
 8000454:	f003 031f 	and.w	r3, r3, #31
 8000458:	2b05      	cmp	r3, #5
 800045a:	d101      	bne.n	8000460 <SD_TxDataBlock+0x7c>
 800045c:	2301      	movs	r3, #1
 800045e:	e000      	b.n	8000462 <SD_TxDataBlock+0x7e>

  return FALSE;
 8000460:	2300      	movs	r3, #0
}
 8000462:	4618      	mov	r0, r3
 8000464:	3710      	adds	r7, #16
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	b084      	sub	sp, #16
 800046e:	af00      	add	r7, sp, #0
 8000470:	4603      	mov	r3, r0
 8000472:	6039      	str	r1, [r7, #0]
 8000474:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000476:	f7ff ff15 	bl	80002a4 <SD_ReadyWait>
 800047a:	4603      	mov	r3, r0
 800047c:	2bff      	cmp	r3, #255	@ 0xff
 800047e:	d001      	beq.n	8000484 <SD_SendCmd+0x1a>
 8000480:	23ff      	movs	r3, #255	@ 0xff
 8000482:	e042      	b.n	800050a <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff feaa 	bl	80001e0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	0e1b      	lsrs	r3, r3, #24
 8000490:	b2db      	uxtb	r3, r3
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff fea4 	bl	80001e0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	0c1b      	lsrs	r3, r3, #16
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff fe9e 	bl	80001e0 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	0a1b      	lsrs	r3, r3, #8
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff fe98 	bl	80001e0 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff fe93 	bl	80001e0 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	2b40      	cmp	r3, #64	@ 0x40
 80004be:	d102      	bne.n	80004c6 <SD_SendCmd+0x5c>
 80004c0:	2395      	movs	r3, #149	@ 0x95
 80004c2:	73fb      	strb	r3, [r7, #15]
 80004c4:	e007      	b.n	80004d6 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b48      	cmp	r3, #72	@ 0x48
 80004ca:	d102      	bne.n	80004d2 <SD_SendCmd+0x68>
 80004cc:	2387      	movs	r3, #135	@ 0x87
 80004ce:	73fb      	strb	r3, [r7, #15]
 80004d0:	e001      	b.n	80004d6 <SD_SendCmd+0x6c>
  else crc = 1;
 80004d2:	2301      	movs	r3, #1
 80004d4:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff fe81 	bl	80001e0 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	2b4c      	cmp	r3, #76	@ 0x4c
 80004e2:	d101      	bne.n	80004e8 <SD_SendCmd+0x7e>
 80004e4:	f7ff feb2 	bl	800024c <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80004e8:	230a      	movs	r3, #10
 80004ea:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80004ec:	f7ff feae 	bl	800024c <SPI_RxByte>
 80004f0:	4603      	mov	r3, r0
 80004f2:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80004f4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	da05      	bge.n	8000508 <SD_SendCmd+0x9e>
 80004fc:	7bbb      	ldrb	r3, [r7, #14]
 80004fe:	3b01      	subs	r3, #1
 8000500:	73bb      	strb	r3, [r7, #14]
 8000502:	7bbb      	ldrb	r3, [r7, #14]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d1f1      	bne.n	80004ec <SD_SendCmd+0x82>

  return res;
 8000508:	7b7b      	ldrb	r3, [r7, #13]
}
 800050a:	4618      	mov	r0, r3
 800050c:	3710      	adds	r7, #16
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <SD_disk_initialize+0x14>
 8000524:	2301      	movs	r3, #1
 8000526:	e0d1      	b.n	80006cc <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000528:	4b6a      	ldr	r3, [pc, #424]	@ (80006d4 <SD_disk_initialize+0x1c0>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	2b00      	cmp	r3, #0
 8000534:	d003      	beq.n	800053e <SD_disk_initialize+0x2a>
 8000536:	4b67      	ldr	r3, [pc, #412]	@ (80006d4 <SD_disk_initialize+0x1c0>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	b2db      	uxtb	r3, r3
 800053c:	e0c6      	b.n	80006cc <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 800053e:	f7ff fecb 	bl	80002d8 <SD_PowerOn>

  /* slave select */
  SELECT();
 8000542:	f7ff fe29 	bl	8000198 <SELECT>

  /* check disk type */
  type = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800054a:	2100      	movs	r1, #0
 800054c:	2040      	movs	r0, #64	@ 0x40
 800054e:	f7ff ff8c 	bl	800046a <SD_SendCmd>
 8000552:	4603      	mov	r3, r0
 8000554:	2b01      	cmp	r3, #1
 8000556:	f040 80a1 	bne.w	800069c <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800055a:	4b5f      	ldr	r3, [pc, #380]	@ (80006d8 <SD_disk_initialize+0x1c4>)
 800055c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000560:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000562:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000566:	2048      	movs	r0, #72	@ 0x48
 8000568:	f7ff ff7f 	bl	800046a <SD_SendCmd>
 800056c:	4603      	mov	r3, r0
 800056e:	2b01      	cmp	r3, #1
 8000570:	d155      	bne.n	800061e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000572:	2300      	movs	r3, #0
 8000574:	73fb      	strb	r3, [r7, #15]
 8000576:	e00c      	b.n	8000592 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000578:	7bfc      	ldrb	r4, [r7, #15]
 800057a:	f7ff fe67 	bl	800024c <SPI_RxByte>
 800057e:	4603      	mov	r3, r0
 8000580:	461a      	mov	r2, r3
 8000582:	f104 0310 	add.w	r3, r4, #16
 8000586:	443b      	add	r3, r7
 8000588:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	3301      	adds	r3, #1
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	2b03      	cmp	r3, #3
 8000596:	d9ef      	bls.n	8000578 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000598:	7abb      	ldrb	r3, [r7, #10]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d17e      	bne.n	800069c <SD_disk_initialize+0x188>
 800059e:	7afb      	ldrb	r3, [r7, #11]
 80005a0:	2baa      	cmp	r3, #170	@ 0xaa
 80005a2:	d17b      	bne.n	800069c <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80005a4:	2100      	movs	r1, #0
 80005a6:	2077      	movs	r0, #119	@ 0x77
 80005a8:	f7ff ff5f 	bl	800046a <SD_SendCmd>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d807      	bhi.n	80005c2 <SD_disk_initialize+0xae>
 80005b2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80005b6:	2069      	movs	r0, #105	@ 0x69
 80005b8:	f7ff ff57 	bl	800046a <SD_SendCmd>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d004      	beq.n	80005cc <SD_disk_initialize+0xb8>
        } while (Timer1);
 80005c2:	4b45      	ldr	r3, [pc, #276]	@ (80006d8 <SD_disk_initialize+0x1c4>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1ec      	bne.n	80005a4 <SD_disk_initialize+0x90>
 80005ca:	e000      	b.n	80005ce <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80005cc:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80005ce:	4b42      	ldr	r3, [pc, #264]	@ (80006d8 <SD_disk_initialize+0x1c4>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d062      	beq.n	800069c <SD_disk_initialize+0x188>
 80005d6:	2100      	movs	r1, #0
 80005d8:	207a      	movs	r0, #122	@ 0x7a
 80005da:	f7ff ff46 	bl	800046a <SD_SendCmd>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d15b      	bne.n	800069c <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80005e4:	2300      	movs	r3, #0
 80005e6:	73fb      	strb	r3, [r7, #15]
 80005e8:	e00c      	b.n	8000604 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80005ea:	7bfc      	ldrb	r4, [r7, #15]
 80005ec:	f7ff fe2e 	bl	800024c <SPI_RxByte>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	f104 0310 	add.w	r3, r4, #16
 80005f8:	443b      	add	r3, r7
 80005fa:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	3301      	adds	r3, #1
 8000602:	73fb      	strb	r3, [r7, #15]
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	2b03      	cmp	r3, #3
 8000608:	d9ef      	bls.n	80005ea <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800060a:	7a3b      	ldrb	r3, [r7, #8]
 800060c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SD_disk_initialize+0x104>
 8000614:	230c      	movs	r3, #12
 8000616:	e000      	b.n	800061a <SD_disk_initialize+0x106>
 8000618:	2304      	movs	r3, #4
 800061a:	73bb      	strb	r3, [r7, #14]
 800061c:	e03e      	b.n	800069c <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800061e:	2100      	movs	r1, #0
 8000620:	2077      	movs	r0, #119	@ 0x77
 8000622:	f7ff ff22 	bl	800046a <SD_SendCmd>
 8000626:	4603      	mov	r3, r0
 8000628:	2b01      	cmp	r3, #1
 800062a:	d808      	bhi.n	800063e <SD_disk_initialize+0x12a>
 800062c:	2100      	movs	r1, #0
 800062e:	2069      	movs	r0, #105	@ 0x69
 8000630:	f7ff ff1b 	bl	800046a <SD_SendCmd>
 8000634:	4603      	mov	r3, r0
 8000636:	2b01      	cmp	r3, #1
 8000638:	d801      	bhi.n	800063e <SD_disk_initialize+0x12a>
 800063a:	2302      	movs	r3, #2
 800063c:	e000      	b.n	8000640 <SD_disk_initialize+0x12c>
 800063e:	2301      	movs	r3, #1
 8000640:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8000642:	7bbb      	ldrb	r3, [r7, #14]
 8000644:	2b02      	cmp	r3, #2
 8000646:	d10e      	bne.n	8000666 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000648:	2100      	movs	r1, #0
 800064a:	2077      	movs	r0, #119	@ 0x77
 800064c:	f7ff ff0d 	bl	800046a <SD_SendCmd>
 8000650:	4603      	mov	r3, r0
 8000652:	2b01      	cmp	r3, #1
 8000654:	d80e      	bhi.n	8000674 <SD_disk_initialize+0x160>
 8000656:	2100      	movs	r1, #0
 8000658:	2069      	movs	r0, #105	@ 0x69
 800065a:	f7ff ff06 	bl	800046a <SD_SendCmd>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d107      	bne.n	8000674 <SD_disk_initialize+0x160>
 8000664:	e00c      	b.n	8000680 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000666:	2100      	movs	r1, #0
 8000668:	2041      	movs	r0, #65	@ 0x41
 800066a:	f7ff fefe 	bl	800046a <SD_SendCmd>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d004      	beq.n	800067e <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8000674:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <SD_disk_initialize+0x1c4>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1e2      	bne.n	8000642 <SD_disk_initialize+0x12e>
 800067c:	e000      	b.n	8000680 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800067e:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <SD_disk_initialize+0x1c4>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d007      	beq.n	8000698 <SD_disk_initialize+0x184>
 8000688:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800068c:	2050      	movs	r0, #80	@ 0x50
 800068e:	f7ff feec 	bl	800046a <SD_SendCmd>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SD_disk_initialize+0x188>
 8000698:	2300      	movs	r3, #0
 800069a:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 800069c:	4a0f      	ldr	r2, [pc, #60]	@ (80006dc <SD_disk_initialize+0x1c8>)
 800069e:	7bbb      	ldrb	r3, [r7, #14]
 80006a0:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80006a2:	f7ff fd8b 	bl	80001bc <DESELECT>
  SPI_RxByte();
 80006a6:	f7ff fdd1 	bl	800024c <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80006aa:	7bbb      	ldrb	r3, [r7, #14]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d008      	beq.n	80006c2 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80006b0:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <SD_disk_initialize+0x1c0>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	f023 0301 	bic.w	r3, r3, #1
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <SD_disk_initialize+0x1c0>)
 80006be:	701a      	strb	r2, [r3, #0]
 80006c0:	e001      	b.n	80006c6 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80006c2:	f7ff fe4b 	bl	800035c <SD_PowerOff>
  }

  return Stat;
 80006c6:	4b03      	ldr	r3, [pc, #12]	@ (80006d4 <SD_disk_initialize+0x1c0>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b2db      	uxtb	r3, r3
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd90      	pop	{r4, r7, pc}
 80006d4:	20000002 	.word	0x20000002
 80006d8:	2000009c 	.word	0x2000009c
 80006dc:	200000a0 	.word	0x200000a0

080006e0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SD_disk_status+0x14>
 80006f0:	2301      	movs	r3, #1
 80006f2:	e002      	b.n	80006fa <SD_disk_status+0x1a>
  return Stat;
 80006f4:	4b03      	ldr	r3, [pc, #12]	@ (8000704 <SD_disk_status+0x24>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b2db      	uxtb	r3, r3
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	20000002 	.word	0x20000002

08000708 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	60b9      	str	r1, [r7, #8]
 8000710:	607a      	str	r2, [r7, #4]
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	4603      	mov	r3, r0
 8000716:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d102      	bne.n	8000724 <SD_disk_read+0x1c>
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d101      	bne.n	8000728 <SD_disk_read+0x20>
 8000724:	2304      	movs	r3, #4
 8000726:	e051      	b.n	80007cc <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000728:	4b2a      	ldr	r3, [pc, #168]	@ (80007d4 <SD_disk_read+0xcc>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SD_disk_read+0x32>
 8000736:	2303      	movs	r3, #3
 8000738:	e048      	b.n	80007cc <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800073a:	4b27      	ldr	r3, [pc, #156]	@ (80007d8 <SD_disk_read+0xd0>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	2b00      	cmp	r3, #0
 8000744:	d102      	bne.n	800074c <SD_disk_read+0x44>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	025b      	lsls	r3, r3, #9
 800074a:	607b      	str	r3, [r7, #4]

  SELECT();
 800074c:	f7ff fd24 	bl	8000198 <SELECT>

  if (count == 1)
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d111      	bne.n	800077a <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	2051      	movs	r0, #81	@ 0x51
 800075a:	f7ff fe86 	bl	800046a <SD_SendCmd>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d129      	bne.n	80007b8 <SD_disk_read+0xb0>
 8000764:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000768:	68b8      	ldr	r0, [r7, #8]
 800076a:	f7ff fe0d 	bl	8000388 <SD_RxDataBlock>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d021      	beq.n	80007b8 <SD_disk_read+0xb0>
 8000774:	2300      	movs	r3, #0
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	e01e      	b.n	80007b8 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	2052      	movs	r0, #82	@ 0x52
 800077e:	f7ff fe74 	bl	800046a <SD_SendCmd>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d117      	bne.n	80007b8 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000788:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800078c:	68b8      	ldr	r0, [r7, #8]
 800078e:	f7ff fdfb 	bl	8000388 <SD_RxDataBlock>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00a      	beq.n	80007ae <SD_disk_read+0xa6>
        buff += 512;
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800079e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d1ed      	bne.n	8000788 <SD_disk_read+0x80>
 80007ac:	e000      	b.n	80007b0 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80007ae:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80007b0:	2100      	movs	r1, #0
 80007b2:	204c      	movs	r0, #76	@ 0x4c
 80007b4:	f7ff fe59 	bl	800046a <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80007b8:	f7ff fd00 	bl	80001bc <DESELECT>
  SPI_RxByte();
 80007bc:	f7ff fd46 	bl	800024c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	bf14      	ite	ne
 80007c6:	2301      	movne	r3, #1
 80007c8:	2300      	moveq	r3, #0
 80007ca:	b2db      	uxtb	r3, r3
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000002 	.word	0x20000002
 80007d8:	200000a0 	.word	0x200000a0

080007dc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	4603      	mov	r3, r0
 80007ea:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d102      	bne.n	80007f8 <SD_disk_write+0x1c>
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d101      	bne.n	80007fc <SD_disk_write+0x20>
 80007f8:	2304      	movs	r3, #4
 80007fa:	e06b      	b.n	80008d4 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80007fc:	4b37      	ldr	r3, [pc, #220]	@ (80008dc <SD_disk_write+0x100>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SD_disk_write+0x32>
 800080a:	2303      	movs	r3, #3
 800080c:	e062      	b.n	80008d4 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800080e:	4b33      	ldr	r3, [pc, #204]	@ (80008dc <SD_disk_write+0x100>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SD_disk_write+0x44>
 800081c:	2302      	movs	r3, #2
 800081e:	e059      	b.n	80008d4 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000820:	4b2f      	ldr	r3, [pc, #188]	@ (80008e0 <SD_disk_write+0x104>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <SD_disk_write+0x56>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	025b      	lsls	r3, r3, #9
 8000830:	607b      	str	r3, [r7, #4]

  SELECT();
 8000832:	f7ff fcb1 	bl	8000198 <SELECT>

  if (count == 1)
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d110      	bne.n	800085e <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800083c:	6879      	ldr	r1, [r7, #4]
 800083e:	2058      	movs	r0, #88	@ 0x58
 8000840:	f7ff fe13 	bl	800046a <SD_SendCmd>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d13a      	bne.n	80008c0 <SD_disk_write+0xe4>
 800084a:	21fe      	movs	r1, #254	@ 0xfe
 800084c:	68b8      	ldr	r0, [r7, #8]
 800084e:	f7ff fdc9 	bl	80003e4 <SD_TxDataBlock>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d033      	beq.n	80008c0 <SD_disk_write+0xe4>
      count = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	e030      	b.n	80008c0 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800085e:	4b20      	ldr	r3, [pc, #128]	@ (80008e0 <SD_disk_write+0x104>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d007      	beq.n	800087a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800086a:	2100      	movs	r1, #0
 800086c:	2077      	movs	r0, #119	@ 0x77
 800086e:	f7ff fdfc 	bl	800046a <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000872:	6839      	ldr	r1, [r7, #0]
 8000874:	2057      	movs	r0, #87	@ 0x57
 8000876:	f7ff fdf8 	bl	800046a <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	2059      	movs	r0, #89	@ 0x59
 800087e:	f7ff fdf4 	bl	800046a <SD_SendCmd>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d11b      	bne.n	80008c0 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000888:	21fc      	movs	r1, #252	@ 0xfc
 800088a:	68b8      	ldr	r0, [r7, #8]
 800088c:	f7ff fdaa 	bl	80003e4 <SD_TxDataBlock>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d00a      	beq.n	80008ac <SD_disk_write+0xd0>
        buff += 512;
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800089c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1ee      	bne.n	8000888 <SD_disk_write+0xac>
 80008aa:	e000      	b.n	80008ae <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80008ac:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80008ae:	21fd      	movs	r1, #253	@ 0xfd
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff fd97 	bl	80003e4 <SD_TxDataBlock>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <SD_disk_write+0xe4>
      {
        count = 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80008c0:	f7ff fc7c 	bl	80001bc <DESELECT>
  SPI_RxByte();
 80008c4:	f7ff fcc2 	bl	800024c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	bf14      	ite	ne
 80008ce:	2301      	movne	r3, #1
 80008d0:	2300      	moveq	r3, #0
 80008d2:	b2db      	uxtb	r3, r3
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000002 	.word	0x20000002
 80008e0:	200000a0 	.word	0x200000a0

080008e4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b08b      	sub	sp, #44	@ 0x2c
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	603a      	str	r2, [r7, #0]
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	460b      	mov	r3, r1
 80008f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SD_disk_ioctl+0x1e>
 80008fe:	2304      	movs	r3, #4
 8000900:	e113      	b.n	8000b2a <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8000908:	79bb      	ldrb	r3, [r7, #6]
 800090a:	2b05      	cmp	r3, #5
 800090c:	d124      	bne.n	8000958 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800090e:	6a3b      	ldr	r3, [r7, #32]
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b02      	cmp	r3, #2
 8000914:	d012      	beq.n	800093c <SD_disk_ioctl+0x58>
 8000916:	2b02      	cmp	r3, #2
 8000918:	dc1a      	bgt.n	8000950 <SD_disk_ioctl+0x6c>
 800091a:	2b00      	cmp	r3, #0
 800091c:	d002      	beq.n	8000924 <SD_disk_ioctl+0x40>
 800091e:	2b01      	cmp	r3, #1
 8000920:	d006      	beq.n	8000930 <SD_disk_ioctl+0x4c>
 8000922:	e015      	b.n	8000950 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8000924:	f7ff fd1a 	bl	800035c <SD_PowerOff>
      res = RES_OK;
 8000928:	2300      	movs	r3, #0
 800092a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800092e:	e0fa      	b.n	8000b26 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8000930:	f7ff fcd2 	bl	80002d8 <SD_PowerOn>
      res = RES_OK;
 8000934:	2300      	movs	r3, #0
 8000936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800093a:	e0f4      	b.n	8000b26 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800093c:	6a3b      	ldr	r3, [r7, #32]
 800093e:	1c5c      	adds	r4, r3, #1
 8000940:	f7ff fd18 	bl	8000374 <SD_CheckPower>
 8000944:	4603      	mov	r3, r0
 8000946:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8000948:	2300      	movs	r3, #0
 800094a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800094e:	e0ea      	b.n	8000b26 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8000950:	2304      	movs	r3, #4
 8000952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000956:	e0e6      	b.n	8000b26 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000958:	4b76      	ldr	r3, [pc, #472]	@ (8000b34 <SD_disk_ioctl+0x250>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SD_disk_ioctl+0x86>
 8000966:	2303      	movs	r3, #3
 8000968:	e0df      	b.n	8000b2a <SD_disk_ioctl+0x246>

    SELECT();
 800096a:	f7ff fc15 	bl	8000198 <SELECT>

    switch (ctrl)
 800096e:	79bb      	ldrb	r3, [r7, #6]
 8000970:	2b0d      	cmp	r3, #13
 8000972:	f200 80c9 	bhi.w	8000b08 <SD_disk_ioctl+0x224>
 8000976:	a201      	add	r2, pc, #4	@ (adr r2, 800097c <SD_disk_ioctl+0x98>)
 8000978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097c:	08000a73 	.word	0x08000a73
 8000980:	080009b5 	.word	0x080009b5
 8000984:	08000a63 	.word	0x08000a63
 8000988:	08000b09 	.word	0x08000b09
 800098c:	08000b09 	.word	0x08000b09
 8000990:	08000b09 	.word	0x08000b09
 8000994:	08000b09 	.word	0x08000b09
 8000998:	08000b09 	.word	0x08000b09
 800099c:	08000b09 	.word	0x08000b09
 80009a0:	08000b09 	.word	0x08000b09
 80009a4:	08000b09 	.word	0x08000b09
 80009a8:	08000a85 	.word	0x08000a85
 80009ac:	08000aa9 	.word	0x08000aa9
 80009b0:	08000acd 	.word	0x08000acd
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80009b4:	2100      	movs	r1, #0
 80009b6:	2049      	movs	r0, #73	@ 0x49
 80009b8:	f7ff fd57 	bl	800046a <SD_SendCmd>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f040 80a6 	bne.w	8000b10 <SD_disk_ioctl+0x22c>
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	2110      	movs	r1, #16
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fcdc 	bl	8000388 <SD_RxDataBlock>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 809c 	beq.w	8000b10 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 80009d8:	7b3b      	ldrb	r3, [r7, #12]
 80009da:	099b      	lsrs	r3, r3, #6
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d10d      	bne.n	80009fe <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80009e2:	7d7b      	ldrb	r3, [r7, #21]
 80009e4:	461a      	mov	r2, r3
 80009e6:	7d3b      	ldrb	r3, [r7, #20]
 80009e8:	021b      	lsls	r3, r3, #8
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	4413      	add	r3, r2
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	3301      	adds	r3, #1
 80009f2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80009f4:	8bfb      	ldrh	r3, [r7, #30]
 80009f6:	029a      	lsls	r2, r3, #10
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	e02d      	b.n	8000a5a <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80009fe:	7c7b      	ldrb	r3, [r7, #17]
 8000a00:	f003 030f 	and.w	r3, r3, #15
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	7dbb      	ldrb	r3, [r7, #22]
 8000a08:	09db      	lsrs	r3, r3, #7
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	7d7b      	ldrb	r3, [r7, #21]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	f003 0306 	and.w	r3, r3, #6
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	4413      	add	r3, r2
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	3302      	adds	r3, #2
 8000a22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000a26:	7d3b      	ldrb	r3, [r7, #20]
 8000a28:	099b      	lsrs	r3, r3, #6
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	7cfb      	ldrb	r3, [r7, #19]
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	4413      	add	r3, r2
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	7cbb      	ldrb	r3, [r7, #18]
 8000a3a:	029b      	lsls	r3, r3, #10
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	4413      	add	r3, r2
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	3301      	adds	r3, #1
 8000a4a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000a4c:	8bfa      	ldrh	r2, [r7, #30]
 8000a4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000a52:	3b09      	subs	r3, #9
 8000a54:	409a      	lsls	r2, r3
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8000a60:	e056      	b.n	8000b10 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a68:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000a70:	e055      	b.n	8000b1e <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000a72:	f7ff fc17 	bl	80002a4 <SD_ReadyWait>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2bff      	cmp	r3, #255	@ 0xff
 8000a7a:	d14b      	bne.n	8000b14 <SD_disk_ioctl+0x230>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000a82:	e047      	b.n	8000b14 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000a84:	2100      	movs	r1, #0
 8000a86:	2049      	movs	r0, #73	@ 0x49
 8000a88:	f7ff fcef 	bl	800046a <SD_SendCmd>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d142      	bne.n	8000b18 <SD_disk_ioctl+0x234>
 8000a92:	2110      	movs	r1, #16
 8000a94:	6a38      	ldr	r0, [r7, #32]
 8000a96:	f7ff fc77 	bl	8000388 <SD_RxDataBlock>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d03b      	beq.n	8000b18 <SD_disk_ioctl+0x234>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000aa6:	e037      	b.n	8000b18 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	204a      	movs	r0, #74	@ 0x4a
 8000aac:	f7ff fcdd 	bl	800046a <SD_SendCmd>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d132      	bne.n	8000b1c <SD_disk_ioctl+0x238>
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	6a38      	ldr	r0, [r7, #32]
 8000aba:	f7ff fc65 	bl	8000388 <SD_RxDataBlock>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d02b      	beq.n	8000b1c <SD_disk_ioctl+0x238>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000aca:	e027      	b.n	8000b1c <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000acc:	2100      	movs	r1, #0
 8000ace:	207a      	movs	r0, #122	@ 0x7a
 8000ad0:	f7ff fccb 	bl	800046a <SD_SendCmd>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d116      	bne.n	8000b08 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000ae0:	e00b      	b.n	8000afa <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8000ae2:	6a3c      	ldr	r4, [r7, #32]
 8000ae4:	1c63      	adds	r3, r4, #1
 8000ae6:	623b      	str	r3, [r7, #32]
 8000ae8:	f7ff fbb0 	bl	800024c <SPI_RxByte>
 8000aec:	4603      	mov	r3, r0
 8000aee:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000af0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000af4:	3301      	adds	r3, #1
 8000af6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000afa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d9ef      	bls.n	8000ae2 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000b0e:	e006      	b.n	8000b1e <SD_disk_ioctl+0x23a>
      break;
 8000b10:	bf00      	nop
 8000b12:	e004      	b.n	8000b1e <SD_disk_ioctl+0x23a>
      break;
 8000b14:	bf00      	nop
 8000b16:	e002      	b.n	8000b1e <SD_disk_ioctl+0x23a>
      break;
 8000b18:	bf00      	nop
 8000b1a:	e000      	b.n	8000b1e <SD_disk_ioctl+0x23a>
      break;
 8000b1c:	bf00      	nop
    }

    DESELECT();
 8000b1e:	f7ff fb4d 	bl	80001bc <DESELECT>
    SPI_RxByte();
 8000b22:	f7ff fb93 	bl	800024c <SPI_RxByte>
  }

  return res;
 8000b26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	372c      	adds	r7, #44	@ 0x2c
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd90      	pop	{r4, r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000002 	.word	0x20000002

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b0cc      	sub	sp, #304	@ 0x130
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3e:	f000 fff5 	bl	8001b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b42:	f000 f8b9 	bl	8000cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b46:	f000 f953 	bl	8000df0 <MX_GPIO_Init>
  MX_FATFS_Init();
 8000b4a:	f002 fd55 	bl	80035f8 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000b4e:	f000 f925 	bl	8000d9c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000b52:	f000 f8ed 	bl	8000d30 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  printf("=== Dual SD Card Utility Functions Test ===\r\n");
 8000b56:	483d      	ldr	r0, [pc, #244]	@ (8000c4c <main+0x114>)
 8000b58:	f006 fda4 	bl	80076a4 <puts>
  printf("SD Card 1: CS Pin B12\r\n");
 8000b5c:	483c      	ldr	r0, [pc, #240]	@ (8000c50 <main+0x118>)
 8000b5e:	f006 fda1 	bl	80076a4 <puts>
  printf("SD Card 2: CS Pin B1\r\n\n");
 8000b62:	483c      	ldr	r0, [pc, #240]	@ (8000c54 <main+0x11c>)
 8000b64:	f006 fd9e 	bl	80076a4 <puts>
  
  // First, test both SD card connections
  printf("=== Initial SD Card Connection Tests ===\r\n");
 8000b68:	483b      	ldr	r0, [pc, #236]	@ (8000c58 <main+0x120>)
 8000b6a:	f006 fd9b 	bl	80076a4 <puts>
  test_sd_card_connection(GPIO_PIN_12);  // Test SD Card 1
 8000b6e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000b72:	f000 fc8d 	bl	8001490 <test_sd_card_connection>
  test_sd_card_connection(GPIO_PIN_1);   // Test SD Card 2
 8000b76:	2002      	movs	r0, #2
 8000b78:	f000 fc8a 	bl	8001490 <test_sd_card_connection>
  
  // Test 1: Write configuration to both SD cards
  printf("Test 1: Writing configuration files...\r\n");
 8000b7c:	4837      	ldr	r0, [pc, #220]	@ (8000c5c <main+0x124>)
 8000b7e:	f006 fd91 	bl	80076a4 <puts>
  write_to_both_sd_cards("config.txt", "wifi_ssid=MyNetwork\nwifi_pass=123456\ndevice_id=STM32_001\n");
 8000b82:	4937      	ldr	r1, [pc, #220]	@ (8000c60 <main+0x128>)
 8000b84:	4837      	ldr	r0, [pc, #220]	@ (8000c64 <main+0x12c>)
 8000b86:	f000 fc03 	bl	8001390 <write_to_both_sd_cards>
  
  // Test 2: Write sensor data to both SD cards
  printf("Test 2: Writing sensor data...\r\n");
 8000b8a:	4837      	ldr	r0, [pc, #220]	@ (8000c68 <main+0x130>)
 8000b8c:	f006 fd8a 	bl	80076a4 <puts>
  char sensor_data[100];
  sprintf(sensor_data, "timestamp=%ld,temp=25.6,humidity=60.2\n", HAL_GetTick());
 8000b90:	f001 f824 	bl	8001bdc <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000b9a:	4934      	ldr	r1, [pc, #208]	@ (8000c6c <main+0x134>)
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f006 fd89 	bl	80076b4 <siprintf>
  write_to_both_sd_cards("sensor.log", sensor_data);
 8000ba2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4831      	ldr	r0, [pc, #196]	@ (8000c70 <main+0x138>)
 8000baa:	f000 fbf1 	bl	8001390 <write_to_both_sd_cards>
  
  // Test 3: Read back the files from both SD cards
  printf("Test 3: Reading back files...\r\n");
 8000bae:	4831      	ldr	r0, [pc, #196]	@ (8000c74 <main+0x13c>)
 8000bb0:	f006 fd78 	bl	80076a4 <puts>
  read_from_both_sd_cards("config.txt");
 8000bb4:	482b      	ldr	r0, [pc, #172]	@ (8000c64 <main+0x12c>)
 8000bb6:	f000 fc17 	bl	80013e8 <read_from_both_sd_cards>
  read_from_both_sd_cards("sensor.log");
 8000bba:	482d      	ldr	r0, [pc, #180]	@ (8000c70 <main+0x138>)
 8000bbc:	f000 fc14 	bl	80013e8 <read_from_both_sd_cards>
  
  // Test 4: Multiple writes to both cards (append simulation)
  printf("Test 4: Multiple log entries...\r\n");
 8000bc0:	482d      	ldr	r0, [pc, #180]	@ (8000c78 <main+0x140>)
 8000bc2:	f006 fd6f 	bl	80076a4 <puts>
  write_to_both_sd_cards("test_log.txt", "Log Entry 1: System Started\n");
 8000bc6:	492d      	ldr	r1, [pc, #180]	@ (8000c7c <main+0x144>)
 8000bc8:	482d      	ldr	r0, [pc, #180]	@ (8000c80 <main+0x148>)
 8000bca:	f000 fbe1 	bl	8001390 <write_to_both_sd_cards>
  HAL_Delay(1000);
 8000bce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bd2:	f001 f80d 	bl	8001bf0 <HAL_Delay>
  write_to_both_sd_cards("test_log.txt", "Log Entry 2: All systems operational\n");
 8000bd6:	492b      	ldr	r1, [pc, #172]	@ (8000c84 <main+0x14c>)
 8000bd8:	4829      	ldr	r0, [pc, #164]	@ (8000c80 <main+0x148>)
 8000bda:	f000 fbd9 	bl	8001390 <write_to_both_sd_cards>
  
  read_from_both_sd_cards("test_log.txt");
 8000bde:	4828      	ldr	r0, [pc, #160]	@ (8000c80 <main+0x148>)
 8000be0:	f000 fc02 	bl	80013e8 <read_from_both_sd_cards>
  
  // Test 5: System settings to both cards
  printf("Test 5: Writing system settings...\r\n");
 8000be4:	4828      	ldr	r0, [pc, #160]	@ (8000c88 <main+0x150>)
 8000be6:	f006 fd5d 	bl	80076a4 <puts>
  write_to_both_sd_cards("settings.ini", "baudrate=115200\ntimeout=5000\nversion=1.0\n");
 8000bea:	4928      	ldr	r1, [pc, #160]	@ (8000c8c <main+0x154>)
 8000bec:	4828      	ldr	r0, [pc, #160]	@ (8000c90 <main+0x158>)
 8000bee:	f000 fbcf 	bl	8001390 <write_to_both_sd_cards>
  
  read_from_both_sd_cards("settings.ini");
 8000bf2:	4827      	ldr	r0, [pc, #156]	@ (8000c90 <main+0x158>)
 8000bf4:	f000 fbf8 	bl	80013e8 <read_from_both_sd_cards>
  
  // Test 6: Individual card operations
  printf("Test 6: Individual card operations...\r\n");
 8000bf8:	4826      	ldr	r0, [pc, #152]	@ (8000c94 <main+0x15c>)
 8000bfa:	f006 fd53 	bl	80076a4 <puts>
  
  printf("Writing specific data to SD Card 1 only...\r\n");
 8000bfe:	4826      	ldr	r0, [pc, #152]	@ (8000c98 <main+0x160>)
 8000c00:	f006 fd50 	bl	80076a4 <puts>
  write_to_sd_card("card1_specific.txt", "This file is only on SD Card 1 (CS: B12)\n", GPIO_PIN_12);
 8000c04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c08:	4924      	ldr	r1, [pc, #144]	@ (8000c9c <main+0x164>)
 8000c0a:	4825      	ldr	r0, [pc, #148]	@ (8000ca0 <main+0x168>)
 8000c0c:	f000 f96a 	bl	8000ee4 <write_to_sd_card>
  
  printf("Writing specific data to SD Card 2 only...\r\n");
 8000c10:	4824      	ldr	r0, [pc, #144]	@ (8000ca4 <main+0x16c>)
 8000c12:	f006 fd47 	bl	80076a4 <puts>
  write_to_sd_card("card2_specific.txt", "This file is only on SD Card 2 (CS: B1)\n", GPIO_PIN_1);
 8000c16:	2202      	movs	r2, #2
 8000c18:	4923      	ldr	r1, [pc, #140]	@ (8000ca8 <main+0x170>)
 8000c1a:	4824      	ldr	r0, [pc, #144]	@ (8000cac <main+0x174>)
 8000c1c:	f000 f962 	bl	8000ee4 <write_to_sd_card>
  
  printf("Reading specific files...\r\n");
 8000c20:	4823      	ldr	r0, [pc, #140]	@ (8000cb0 <main+0x178>)
 8000c22:	f006 fd3f 	bl	80076a4 <puts>
  char buffer[200];
  read_from_sd_card("card1_specific.txt", buffer, sizeof(buffer), GPIO_PIN_12);
 8000c26:	1d39      	adds	r1, r7, #4
 8000c28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c2c:	22c8      	movs	r2, #200	@ 0xc8
 8000c2e:	481c      	ldr	r0, [pc, #112]	@ (8000ca0 <main+0x168>)
 8000c30:	f000 fa92 	bl	8001158 <read_from_sd_card>
  read_from_sd_card("card2_specific.txt", buffer, sizeof(buffer), GPIO_PIN_1);
 8000c34:	1d39      	adds	r1, r7, #4
 8000c36:	2302      	movs	r3, #2
 8000c38:	22c8      	movs	r2, #200	@ 0xc8
 8000c3a:	481c      	ldr	r0, [pc, #112]	@ (8000cac <main+0x174>)
 8000c3c:	f000 fa8c 	bl	8001158 <read_from_sd_card>
  
  printf("\n=== All Dual SD Card Tests Completed Successfully! ===\r\n");
 8000c40:	481c      	ldr	r0, [pc, #112]	@ (8000cb4 <main+0x17c>)
 8000c42:	f006 fd2f 	bl	80076a4 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c46:	bf00      	nop
 8000c48:	e7fd      	b.n	8000c46 <main+0x10e>
 8000c4a:	bf00      	nop
 8000c4c:	08008744 	.word	0x08008744
 8000c50:	08008774 	.word	0x08008774
 8000c54:	0800878c 	.word	0x0800878c
 8000c58:	080087a4 	.word	0x080087a4
 8000c5c:	080087d0 	.word	0x080087d0
 8000c60:	080087f8 	.word	0x080087f8
 8000c64:	08008834 	.word	0x08008834
 8000c68:	08008840 	.word	0x08008840
 8000c6c:	08008860 	.word	0x08008860
 8000c70:	08008888 	.word	0x08008888
 8000c74:	08008894 	.word	0x08008894
 8000c78:	080088b4 	.word	0x080088b4
 8000c7c:	080088d8 	.word	0x080088d8
 8000c80:	080088f8 	.word	0x080088f8
 8000c84:	08008908 	.word	0x08008908
 8000c88:	08008930 	.word	0x08008930
 8000c8c:	08008954 	.word	0x08008954
 8000c90:	08008980 	.word	0x08008980
 8000c94:	08008990 	.word	0x08008990
 8000c98:	080089b8 	.word	0x080089b8
 8000c9c:	080089e4 	.word	0x080089e4
 8000ca0:	08008a10 	.word	0x08008a10
 8000ca4:	08008a24 	.word	0x08008a24
 8000ca8:	08008a50 	.word	0x08008a50
 8000cac:	08008a7c 	.word	0x08008a7c
 8000cb0:	08008a90 	.word	0x08008a90
 8000cb4:	08008aac 	.word	0x08008aac

08000cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b090      	sub	sp, #64	@ 0x40
 8000cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cbe:	f107 0318 	add.w	r3, r7, #24
 8000cc2:	2228      	movs	r2, #40	@ 0x28
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f006 fdee 	bl	80078a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
 8000cd8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cea:	f107 0318 	add.w	r3, r7, #24
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fa22 	bl	8002138 <HAL_RCC_OscConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cfa:	f000 fbc3 	bl	8001484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfe:	230f      	movs	r3, #15
 8000d00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 fc90 	bl	800263c <HAL_RCC_ClockConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d22:	f000 fbaf 	bl	8001484 <Error_Handler>
  }
}
 8000d26:	bf00      	nop
 8000d28:	3740      	adds	r7, #64	@ 0x40
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d34:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d36:	4a18      	ldr	r2, [pc, #96]	@ (8000d98 <MX_SPI2_Init+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d42:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d62:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d64:	2220      	movs	r2, #32
 8000d66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d68:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d74:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d7a:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d7c:	220a      	movs	r2, #10
 8000d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d80:	4804      	ldr	r0, [pc, #16]	@ (8000d94 <MX_SPI2_Init+0x64>)
 8000d82:	f001 fde9 	bl	8002958 <HAL_SPI_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d8c:	f000 fb7a 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200000a4 	.word	0x200000a4
 8000d98:	40003800 	.word	0x40003800

08000d9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000da0:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <MX_USART1_UART_Init+0x4c>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	@ (8000dec <MX_USART1_UART_Init+0x50>)
 8000da4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000da6:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <MX_USART1_UART_Init+0x4c>)
 8000da8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <MX_USART1_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <MX_USART1_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <MX_USART1_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <MX_USART1_UART_Init+0x4c>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <MX_USART1_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <MX_USART1_UART_Init+0x4c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dd2:	4805      	ldr	r0, [pc, #20]	@ (8000de8 <MX_USART1_UART_Init+0x4c>)
 8000dd4:	f002 f9eb 	bl	80031ae <HAL_UART_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dde:	f000 fb51 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000fc 	.word	0x200000fc
 8000dec:	40013800 	.word	0x40013800

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e04:	4b35      	ldr	r3, [pc, #212]	@ (8000edc <MX_GPIO_Init+0xec>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a34      	ldr	r2, [pc, #208]	@ (8000edc <MX_GPIO_Init+0xec>)
 8000e0a:	f043 0310 	orr.w	r3, r3, #16
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b32      	ldr	r3, [pc, #200]	@ (8000edc <MX_GPIO_Init+0xec>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0310 	and.w	r3, r3, #16
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000edc <MX_GPIO_Init+0xec>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a2e      	ldr	r2, [pc, #184]	@ (8000edc <MX_GPIO_Init+0xec>)
 8000e22:	f043 0320 	orr.w	r3, r3, #32
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b2c      	ldr	r3, [pc, #176]	@ (8000edc <MX_GPIO_Init+0xec>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f003 0320 	and.w	r3, r3, #32
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e34:	4b29      	ldr	r3, [pc, #164]	@ (8000edc <MX_GPIO_Init+0xec>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a28      	ldr	r2, [pc, #160]	@ (8000edc <MX_GPIO_Init+0xec>)
 8000e3a:	f043 0308 	orr.w	r3, r3, #8
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b26      	ldr	r3, [pc, #152]	@ (8000edc <MX_GPIO_Init+0xec>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0308 	and.w	r3, r3, #8
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b23      	ldr	r3, [pc, #140]	@ (8000edc <MX_GPIO_Init+0xec>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a22      	ldr	r2, [pc, #136]	@ (8000edc <MX_GPIO_Init+0xec>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b20      	ldr	r3, [pc, #128]	@ (8000edc <MX_GPIO_Init+0xec>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);  // Start with CS HIGH (deselected)
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e6a:	481d      	ldr	r0, [pc, #116]	@ (8000ee0 <MX_GPIO_Init+0xf0>)
 8000e6c:	f001 f94c 	bl	8002108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // Start with CS HIGH (deselected)
 8000e70:	2201      	movs	r2, #1
 8000e72:	2102      	movs	r1, #2
 8000e74:	481a      	ldr	r0, [pc, #104]	@ (8000ee0 <MX_GPIO_Init+0xf0>)
 8000e76:	f001 f947 	bl	8002108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;  // Changed to HIGH speed
 8000e88:	2303      	movs	r3, #3
 8000e8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	4813      	ldr	r0, [pc, #76]	@ (8000ee0 <MX_GPIO_Init+0xf0>)
 8000e94:	f000 ffb4 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 (second SD card CS) */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;  // Changed to HIGH speed
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4619      	mov	r1, r3
 8000eae:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <MX_GPIO_Init+0xf0>)
 8000eb0:	f000 ffa6 	bl	8001e00 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* Configure PB14 (MISO) with pull-up for better SD card communication */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000eb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <MX_GPIO_Init+0xf0>)
 8000ece:	f000 ff97 	bl	8001e00 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ed2:	bf00      	nop
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010c00 	.word	0x40010c00

08000ee4 <write_to_sd_card>:
  * @param  data: Data string to write
  * @param  cs_pin: CS pin for SD card selection (GPIO_PIN_12 or GPIO_PIN_1)
  * @retval None
  */
void write_to_sd_card(const char* filename, const char* data, uint16_t cs_pin) 
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	f5ad 5d01 	sub.w	sp, sp, #8256	@ 0x2040
 8000eea:	b08e      	sub	sp, #56	@ 0x38
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000ef2:	f843 0c6c 	str.w	r0, [r3, #-108]
 8000ef6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000efa:	f843 1c70 	str.w	r1, [r3, #-112]
 8000efe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000f02:	f823 2c72 	strh.w	r2, [r3, #-114]
    FIL fil;
    UINT bw;
    FRESULT fres;
    
    // Ensure both CS pins are high (deselected) first
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f0c:	4889      	ldr	r0, [pc, #548]	@ (8001134 <write_to_sd_card+0x250>)
 8000f0e:	f001 f8fb 	bl	8002108 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	2102      	movs	r1, #2
 8000f16:	4887      	ldr	r0, [pc, #540]	@ (8001134 <write_to_sd_card+0x250>)
 8000f18:	f001 f8f6 	bl	8002108 <HAL_GPIO_WritePin>
    HAL_Delay(500);  // Longer delay for complete stabilization
 8000f1c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f20:	f000 fe66 	bl	8001bf0 <HAL_Delay>
    
    // Set the CS pin for this operation
    set_sd_cs_pin(cs_pin);
 8000f24:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000f28:	f833 3c72 	ldrh.w	r3, [r3, #-114]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff f915 	bl	800015c <set_sd_cs_pin>
    
    // Additional delay after CS pin change
    HAL_Delay(300);
 8000f32:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f36:	f000 fe5b 	bl	8001bf0 <HAL_Delay>
    
    // Force SD disk re-initialization
    SD_disk_initialize(0);
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f7ff faea 	bl	8000514 <SD_disk_initialize>
    HAL_Delay(200);
 8000f40:	20c8      	movs	r0, #200	@ 0xc8
 8000f42:	f000 fe55 	bl	8001bf0 <HAL_Delay>
    
    // Mount SD card
    FATFS FatFs;
    fres = f_mount(&FatFs, "", 1);
 8000f46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f4a:	3b24      	subs	r3, #36	@ 0x24
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	497a      	ldr	r1, [pc, #488]	@ (8001138 <write_to_sd_card+0x254>)
 8000f50:	4618      	mov	r0, r3
 8000f52:	f005 f829 	bl	8005fa8 <f_mount>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8000f5c:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8000f60:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK) {
 8000f62:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8000f66:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d045      	beq.n	8000ffc <write_to_sd_card+0x118>
        printf("SD Card %s Mount Error: %d\r\n", (cs_pin == GPIO_PIN_12) ? "1 (B12)" : "2 (B1)", fres);
 8000f70:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000f74:	f833 3c72 	ldrh.w	r3, [r3, #-114]
 8000f78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f7c:	d101      	bne.n	8000f82 <write_to_sd_card+0x9e>
 8000f7e:	4b6f      	ldr	r3, [pc, #444]	@ (800113c <write_to_sd_card+0x258>)
 8000f80:	e000      	b.n	8000f84 <write_to_sd_card+0xa0>
 8000f82:	4b6f      	ldr	r3, [pc, #444]	@ (8001140 <write_to_sd_card+0x25c>)
 8000f84:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8000f88:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8000f8c:	7812      	ldrb	r2, [r2, #0]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	486c      	ldr	r0, [pc, #432]	@ (8001144 <write_to_sd_card+0x260>)
 8000f92:	f006 fb1f 	bl	80075d4 <iprintf>
        
        // Try one more time with re-initialization
        HAL_Delay(500);
 8000f96:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f9a:	f000 fe29 	bl	8001bf0 <HAL_Delay>
        SD_disk_initialize(0);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff fab8 	bl	8000514 <SD_disk_initialize>
        HAL_Delay(200);
 8000fa4:	20c8      	movs	r0, #200	@ 0xc8
 8000fa6:	f000 fe23 	bl	8001bf0 <HAL_Delay>
        fres = f_mount(&FatFs, "", 1);
 8000faa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fae:	3b24      	subs	r3, #36	@ 0x24
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4961      	ldr	r1, [pc, #388]	@ (8001138 <write_to_sd_card+0x254>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 fff7 	bl	8005fa8 <f_mount>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8000fc0:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8000fc4:	7013      	strb	r3, [r2, #0]
        if (fres != FR_OK) {
 8000fc6:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8000fca:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d013      	beq.n	8000ffc <write_to_sd_card+0x118>
            printf("SD Card %s Mount Error (retry): %d\r\n", (cs_pin == GPIO_PIN_12) ? "1 (B12)" : "2 (B1)", fres);
 8000fd4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000fd8:	f833 3c72 	ldrh.w	r3, [r3, #-114]
 8000fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fe0:	d101      	bne.n	8000fe6 <write_to_sd_card+0x102>
 8000fe2:	4b56      	ldr	r3, [pc, #344]	@ (800113c <write_to_sd_card+0x258>)
 8000fe4:	e000      	b.n	8000fe8 <write_to_sd_card+0x104>
 8000fe6:	4b56      	ldr	r3, [pc, #344]	@ (8001140 <write_to_sd_card+0x25c>)
 8000fe8:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8000fec:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8000ff0:	7812      	ldrb	r2, [r2, #0]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4854      	ldr	r0, [pc, #336]	@ (8001148 <write_to_sd_card+0x264>)
 8000ff6:	f006 faed 	bl	80075d4 <iprintf>
 8000ffa:	e095      	b.n	8001128 <write_to_sd_card+0x244>
            return;
        }
    }
    
    // Open/Create file for writing
    fres = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_WRITE);
 8000ffc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001000:	4619      	mov	r1, r3
 8001002:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001006:	f103 0318 	add.w	r3, r3, #24
 800100a:	3b10      	subs	r3, #16
 800100c:	220a      	movs	r2, #10
 800100e:	f851 1c6c 	ldr.w	r1, [r1, #-108]
 8001012:	4618      	mov	r0, r3
 8001014:	f005 f812 	bl	800603c <f_open>
 8001018:	4603      	mov	r3, r0
 800101a:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 800101e:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8001022:	7013      	strb	r3, [r2, #0]
    if (fres == FR_OK) {
 8001024:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001028:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d15f      	bne.n	80010f2 <write_to_sd_card+0x20e>
        fres = f_write(&fil, data, strlen(data), &bw);
 8001032:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001036:	f853 0c70 	ldr.w	r0, [r3, #-112]
 800103a:	f7ff f887 	bl	800014c <strlen>
 800103e:	4602      	mov	r2, r0
 8001040:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001044:	f103 0318 	add.w	r3, r3, #24
 8001048:	3b14      	subs	r3, #20
 800104a:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800104e:	f507 5082 	add.w	r0, r7, #4160	@ 0x1040
 8001052:	f100 0018 	add.w	r0, r0, #24
 8001056:	3810      	subs	r0, #16
 8001058:	f851 1c70 	ldr.w	r1, [r1, #-112]
 800105c:	f005 fcea 	bl	8006a34 <f_write>
 8001060:	4603      	mov	r3, r0
 8001062:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8001066:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 800106a:	7013      	strb	r3, [r2, #0]
        if (fres == FR_OK) {
 800106c:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001070:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d11f      	bne.n	80010ba <write_to_sd_card+0x1d6>
            f_sync(&fil);  // Ensure data is written
 800107a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800107e:	f103 0318 	add.w	r3, r3, #24
 8001082:	3b10      	subs	r3, #16
 8001084:	4618      	mov	r0, r3
 8001086:	f005 ff0e 	bl	8006ea6 <f_sync>
            printf("SD Card %s - File written: %s (%u bytes)\r\n", 
 800108a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800108e:	f833 3c72 	ldrh.w	r3, [r3, #-114]
 8001092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001096:	d101      	bne.n	800109c <write_to_sd_card+0x1b8>
 8001098:	4928      	ldr	r1, [pc, #160]	@ (800113c <write_to_sd_card+0x258>)
 800109a:	e000      	b.n	800109e <write_to_sd_card+0x1ba>
 800109c:	4928      	ldr	r1, [pc, #160]	@ (8001140 <write_to_sd_card+0x25c>)
 800109e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80010a2:	f103 0318 	add.w	r3, r3, #24
 80010a6:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80010aa:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80010ae:	f852 2c6c 	ldr.w	r2, [r2, #-108]
 80010b2:	4826      	ldr	r0, [pc, #152]	@ (800114c <write_to_sd_card+0x268>)
 80010b4:	f006 fa8e 	bl	80075d4 <iprintf>
 80010b8:	e012      	b.n	80010e0 <write_to_sd_card+0x1fc>
                   (cs_pin == GPIO_PIN_12) ? "1 (B12)" : "2 (B1)", filename, bw);
        } else {
            printf("SD Card %s - Write error: %d\r\n", 
 80010ba:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80010be:	f833 3c72 	ldrh.w	r3, [r3, #-114]
 80010c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010c6:	d101      	bne.n	80010cc <write_to_sd_card+0x1e8>
 80010c8:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <write_to_sd_card+0x258>)
 80010ca:	e000      	b.n	80010ce <write_to_sd_card+0x1ea>
 80010cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001140 <write_to_sd_card+0x25c>)
 80010ce:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 80010d2:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 80010d6:	7812      	ldrb	r2, [r2, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	481d      	ldr	r0, [pc, #116]	@ (8001150 <write_to_sd_card+0x26c>)
 80010dc:	f006 fa7a 	bl	80075d4 <iprintf>
                   (cs_pin == GPIO_PIN_12) ? "1 (B12)" : "2 (B1)", fres);
        }
        f_close(&fil);
 80010e0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80010e4:	f103 0318 	add.w	r3, r3, #24
 80010e8:	3b10      	subs	r3, #16
 80010ea:	4618      	mov	r0, r3
 80010ec:	f005 ffa9 	bl	8007042 <f_close>
 80010f0:	e012      	b.n	8001118 <write_to_sd_card+0x234>
    } else {
        printf("SD Card %s - File create error: %d\r\n", 
 80010f2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80010f6:	f833 3c72 	ldrh.w	r3, [r3, #-114]
 80010fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010fe:	d101      	bne.n	8001104 <write_to_sd_card+0x220>
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <write_to_sd_card+0x258>)
 8001102:	e000      	b.n	8001106 <write_to_sd_card+0x222>
 8001104:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <write_to_sd_card+0x25c>)
 8001106:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 800110a:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 800110e:	7812      	ldrb	r2, [r2, #0]
 8001110:	4619      	mov	r1, r3
 8001112:	4810      	ldr	r0, [pc, #64]	@ (8001154 <write_to_sd_card+0x270>)
 8001114:	f006 fa5e 	bl	80075d4 <iprintf>
               (cs_pin == GPIO_PIN_12) ? "1 (B12)" : "2 (B1)", fres);
    }
    
    // Unmount SD card
    f_mount(NULL, "", 0);
 8001118:	2200      	movs	r2, #0
 800111a:	4907      	ldr	r1, [pc, #28]	@ (8001138 <write_to_sd_card+0x254>)
 800111c:	2000      	movs	r0, #0
 800111e:	f004 ff43 	bl	8005fa8 <f_mount>
    
    // Final delay before next operation
    HAL_Delay(200);
 8001122:	20c8      	movs	r0, #200	@ 0xc8
 8001124:	f000 fd64 	bl	8001bf0 <HAL_Delay>
}
 8001128:	f507 5701 	add.w	r7, r7, #8256	@ 0x2040
 800112c:	3738      	adds	r7, #56	@ 0x38
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40010c00 	.word	0x40010c00
 8001138:	08008ae8 	.word	0x08008ae8
 800113c:	08008aec 	.word	0x08008aec
 8001140:	08008af4 	.word	0x08008af4
 8001144:	08008afc 	.word	0x08008afc
 8001148:	08008b1c 	.word	0x08008b1c
 800114c:	08008b44 	.word	0x08008b44
 8001150:	08008b70 	.word	0x08008b70
 8001154:	08008b90 	.word	0x08008b90

08001158 <read_from_sd_card>:
  * @param  size: Buffer size
  * @param  cs_pin: CS pin for SD card selection (GPIO_PIN_12 or GPIO_PIN_1)
  * @retval None
  */
void read_from_sd_card(const char* filename, char* buffer, int size, uint16_t cs_pin) 
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	f5ad 5d01 	sub.w	sp, sp, #8256	@ 0x2040
 800115e:	b08d      	sub	sp, #52	@ 0x34
 8001160:	af00      	add	r7, sp, #0
 8001162:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001166:	f844 0c64 	str.w	r0, [r4, #-100]
 800116a:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 800116e:	f840 1c68 	str.w	r1, [r0, #-104]
 8001172:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8001176:	f841 2c6c 	str.w	r2, [r1, #-108]
 800117a:	461a      	mov	r2, r3
 800117c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001180:	f823 2c6e 	strh.w	r2, [r3, #-110]
    FIL fil;
    FRESULT fres;
    
    // Ensure both CS pins are high (deselected) first
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800118a:	4879      	ldr	r0, [pc, #484]	@ (8001370 <read_from_sd_card+0x218>)
 800118c:	f000 ffbc 	bl	8002108 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	2102      	movs	r1, #2
 8001194:	4876      	ldr	r0, [pc, #472]	@ (8001370 <read_from_sd_card+0x218>)
 8001196:	f000 ffb7 	bl	8002108 <HAL_GPIO_WritePin>
    HAL_Delay(500);  // Longer delay for complete stabilization
 800119a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800119e:	f000 fd27 	bl	8001bf0 <HAL_Delay>
    
    // Set the CS pin for this operation
    set_sd_cs_pin(cs_pin);
 80011a2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80011a6:	f833 3c6e 	ldrh.w	r3, [r3, #-110]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7fe ffd6 	bl	800015c <set_sd_cs_pin>
    
    // Additional delay after CS pin change
    HAL_Delay(300);
 80011b0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011b4:	f000 fd1c 	bl	8001bf0 <HAL_Delay>
    
    // Force SD disk re-initialization
    SD_disk_initialize(0);
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff f9ab 	bl	8000514 <SD_disk_initialize>
    HAL_Delay(200);
 80011be:	20c8      	movs	r0, #200	@ 0xc8
 80011c0:	f000 fd16 	bl	8001bf0 <HAL_Delay>
    
    // Mount SD card
    FATFS FatFs;
    fres = f_mount(&FatFs, "", 1);
 80011c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011c8:	3b20      	subs	r3, #32
 80011ca:	2201      	movs	r2, #1
 80011cc:	4969      	ldr	r1, [pc, #420]	@ (8001374 <read_from_sd_card+0x21c>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 feea 	bl	8005fa8 <f_mount>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 80011da:	f102 022f 	add.w	r2, r2, #47	@ 0x2f
 80011de:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK) {
 80011e0:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 80011e4:	f103 032f 	add.w	r3, r3, #47	@ 0x2f
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d04b      	beq.n	8001286 <read_from_sd_card+0x12e>
        printf("SD Card %s Mount Error: %d\r\n", (cs_pin == GPIO_PIN_12) ? "1 (B12)" : "2 (B1)", fres);
 80011ee:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80011f2:	f833 3c6e 	ldrh.w	r3, [r3, #-110]
 80011f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011fa:	d101      	bne.n	8001200 <read_from_sd_card+0xa8>
 80011fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001378 <read_from_sd_card+0x220>)
 80011fe:	e000      	b.n	8001202 <read_from_sd_card+0xaa>
 8001200:	4b5e      	ldr	r3, [pc, #376]	@ (800137c <read_from_sd_card+0x224>)
 8001202:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 8001206:	f102 022f 	add.w	r2, r2, #47	@ 0x2f
 800120a:	7812      	ldrb	r2, [r2, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	485c      	ldr	r0, [pc, #368]	@ (8001380 <read_from_sd_card+0x228>)
 8001210:	f006 f9e0 	bl	80075d4 <iprintf>
        
        // Try one more time with re-initialization
        HAL_Delay(500);
 8001214:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001218:	f000 fcea 	bl	8001bf0 <HAL_Delay>
        SD_disk_initialize(0);
 800121c:	2000      	movs	r0, #0
 800121e:	f7ff f979 	bl	8000514 <SD_disk_initialize>
        HAL_Delay(200);
 8001222:	20c8      	movs	r0, #200	@ 0xc8
 8001224:	f000 fce4 	bl	8001bf0 <HAL_Delay>
        fres = f_mount(&FatFs, "", 1);
 8001228:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800122c:	3b20      	subs	r3, #32
 800122e:	2201      	movs	r2, #1
 8001230:	4950      	ldr	r1, [pc, #320]	@ (8001374 <read_from_sd_card+0x21c>)
 8001232:	4618      	mov	r0, r3
 8001234:	f004 feb8 	bl	8005fa8 <f_mount>
 8001238:	4603      	mov	r3, r0
 800123a:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 800123e:	f102 022f 	add.w	r2, r2, #47	@ 0x2f
 8001242:	7013      	strb	r3, [r2, #0]
        if (fres != FR_OK) {
 8001244:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 8001248:	f103 032f 	add.w	r3, r3, #47	@ 0x2f
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d019      	beq.n	8001286 <read_from_sd_card+0x12e>
            printf("SD Card %s Mount Error (retry): %d\r\n", (cs_pin == GPIO_PIN_12) ? "1 (B12)" : "2 (B1)", fres);
 8001252:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001256:	f833 3c6e 	ldrh.w	r3, [r3, #-110]
 800125a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800125e:	d101      	bne.n	8001264 <read_from_sd_card+0x10c>
 8001260:	4b45      	ldr	r3, [pc, #276]	@ (8001378 <read_from_sd_card+0x220>)
 8001262:	e000      	b.n	8001266 <read_from_sd_card+0x10e>
 8001264:	4b45      	ldr	r3, [pc, #276]	@ (800137c <read_from_sd_card+0x224>)
 8001266:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 800126a:	f102 022f 	add.w	r2, r2, #47	@ 0x2f
 800126e:	7812      	ldrb	r2, [r2, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	4844      	ldr	r0, [pc, #272]	@ (8001384 <read_from_sd_card+0x22c>)
 8001274:	f006 f9ae 	bl	80075d4 <iprintf>
            buffer[0] = '\0';  // Empty string if error
 8001278:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800127c:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
 8001284:	e06e      	b.n	8001364 <read_from_sd_card+0x20c>
            return;
        }
    }
    
    // Small delay for SD card stability
    HAL_Delay(100);
 8001286:	2064      	movs	r0, #100	@ 0x64
 8001288:	f000 fcb2 	bl	8001bf0 <HAL_Delay>
    
    // Open file for reading
    fres = f_open(&fil, filename, FA_READ);
 800128c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001290:	4619      	mov	r1, r3
 8001292:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001296:	f103 0310 	add.w	r3, r3, #16
 800129a:	3b10      	subs	r3, #16
 800129c:	2201      	movs	r2, #1
 800129e:	f851 1c64 	ldr.w	r1, [r1, #-100]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f004 feca 	bl	800603c <f_open>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 80012ae:	f102 022f 	add.w	r2, r2, #47	@ 0x2f
 80012b2:	7013      	strb	r3, [r2, #0]
    if (fres == FR_OK) {
 80012b4:	f507 5301 	add.w	r3, r7, #8256	@ 0x2040
 80012b8:	f103 032f 	add.w	r3, r3, #47	@ 0x2f
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d12f      	bne.n	8001322 <read_from_sd_card+0x1ca>
        f_gets(buffer, size, &fil);
 80012c2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80012c6:	f103 0310 	add.w	r3, r3, #16
 80012ca:	3b10      	subs	r3, #16
 80012cc:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80012d0:	4611      	mov	r1, r2
 80012d2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80012d6:	4610      	mov	r0, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	f851 1c6c 	ldr.w	r1, [r1, #-108]
 80012de:	f850 0c68 	ldr.w	r0, [r0, #-104]
 80012e2:	f005 ffb4 	bl	800724e <f_gets>
        printf("SD Card %s - File read: %s - Content: %s\r\n", 
 80012e6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80012ea:	f833 3c6e 	ldrh.w	r3, [r3, #-110]
 80012ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012f2:	d101      	bne.n	80012f8 <read_from_sd_card+0x1a0>
 80012f4:	4920      	ldr	r1, [pc, #128]	@ (8001378 <read_from_sd_card+0x220>)
 80012f6:	e000      	b.n	80012fa <read_from_sd_card+0x1a2>
 80012f8:	4920      	ldr	r1, [pc, #128]	@ (800137c <read_from_sd_card+0x224>)
 80012fa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80012fe:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001302:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8001306:	f852 2c64 	ldr.w	r2, [r2, #-100]
 800130a:	481f      	ldr	r0, [pc, #124]	@ (8001388 <read_from_sd_card+0x230>)
 800130c:	f006 f962 	bl	80075d4 <iprintf>
               (cs_pin == GPIO_PIN_12) ? "1 (B12)" : "2 (B1)", filename, buffer);
        f_close(&fil);
 8001310:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001314:	f103 0310 	add.w	r3, r3, #16
 8001318:	3b10      	subs	r3, #16
 800131a:	4618      	mov	r0, r3
 800131c:	f005 fe91 	bl	8007042 <f_close>
 8001320:	e018      	b.n	8001354 <read_from_sd_card+0x1fc>
    } else {
        printf("SD Card %s - File read error: %d\r\n", 
 8001322:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001326:	f833 3c6e 	ldrh.w	r3, [r3, #-110]
 800132a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800132e:	d101      	bne.n	8001334 <read_from_sd_card+0x1dc>
 8001330:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <read_from_sd_card+0x220>)
 8001332:	e000      	b.n	8001336 <read_from_sd_card+0x1de>
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <read_from_sd_card+0x224>)
 8001336:	f507 5201 	add.w	r2, r7, #8256	@ 0x2040
 800133a:	f102 022f 	add.w	r2, r2, #47	@ 0x2f
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	4812      	ldr	r0, [pc, #72]	@ (800138c <read_from_sd_card+0x234>)
 8001344:	f006 f946 	bl	80075d4 <iprintf>
               (cs_pin == GPIO_PIN_12) ? "1 (B12)" : "2 (B1)", fres);
        buffer[0] = '\0';  // Empty string if error
 8001348:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800134c:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
    }
    
    // Unmount SD card
    f_mount(NULL, "", 0);
 8001354:	2200      	movs	r2, #0
 8001356:	4907      	ldr	r1, [pc, #28]	@ (8001374 <read_from_sd_card+0x21c>)
 8001358:	2000      	movs	r0, #0
 800135a:	f004 fe25 	bl	8005fa8 <f_mount>
    
    // Final delay before next operation
    HAL_Delay(200);
 800135e:	20c8      	movs	r0, #200	@ 0xc8
 8001360:	f000 fc46 	bl	8001bf0 <HAL_Delay>
}
 8001364:	f507 5701 	add.w	r7, r7, #8256	@ 0x2040
 8001368:	3734      	adds	r7, #52	@ 0x34
 800136a:	46bd      	mov	sp, r7
 800136c:	bd90      	pop	{r4, r7, pc}
 800136e:	bf00      	nop
 8001370:	40010c00 	.word	0x40010c00
 8001374:	08008ae8 	.word	0x08008ae8
 8001378:	08008aec 	.word	0x08008aec
 800137c:	08008af4 	.word	0x08008af4
 8001380:	08008afc 	.word	0x08008afc
 8001384:	08008b1c 	.word	0x08008b1c
 8001388:	08008bb8 	.word	0x08008bb8
 800138c:	08008be4 	.word	0x08008be4

08001390 <write_to_both_sd_cards>:
  * @param  filename: Name of the file to write
  * @param  data: Data string to write
  * @retval None
  */
void write_to_both_sd_cards(const char* filename, const char* data)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
    printf("\n=== Writing to both SD cards ===\r\n");
 800139a:	480f      	ldr	r0, [pc, #60]	@ (80013d8 <write_to_both_sd_cards+0x48>)
 800139c:	f006 f982 	bl	80076a4 <puts>
    
    // Write to first SD card (CS pin B12)
    printf("Writing to SD Card 1 (CS: B12)...\r\n");
 80013a0:	480e      	ldr	r0, [pc, #56]	@ (80013dc <write_to_both_sd_cards+0x4c>)
 80013a2:	f006 f97f 	bl	80076a4 <puts>
    write_to_sd_card(filename, data, GPIO_PIN_12);
 80013a6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013aa:	6839      	ldr	r1, [r7, #0]
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff fd99 	bl	8000ee4 <write_to_sd_card>
    
    // Small delay between operations
    HAL_Delay(500);
 80013b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013b6:	f000 fc1b 	bl	8001bf0 <HAL_Delay>
    
    // Write to second SD card (CS pin B1)
    printf("Writing to SD Card 2 (CS: B1)...\r\n");
 80013ba:	4809      	ldr	r0, [pc, #36]	@ (80013e0 <write_to_both_sd_cards+0x50>)
 80013bc:	f006 f972 	bl	80076a4 <puts>
    write_to_sd_card(filename, data, GPIO_PIN_1);
 80013c0:	2202      	movs	r2, #2
 80013c2:	6839      	ldr	r1, [r7, #0]
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fd8d 	bl	8000ee4 <write_to_sd_card>
    
    printf("=== Both SD cards written ===\r\n\n");
 80013ca:	4806      	ldr	r0, [pc, #24]	@ (80013e4 <write_to_both_sd_cards+0x54>)
 80013cc:	f006 f96a 	bl	80076a4 <puts>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	08008c08 	.word	0x08008c08
 80013dc:	08008c2c 	.word	0x08008c2c
 80013e0:	08008c50 	.word	0x08008c50
 80013e4:	08008c74 	.word	0x08008c74

080013e8 <read_from_both_sd_cards>:
  * @brief  Read data from both SD cards
  * @param  filename: Name of the file to read
  * @retval None
  */
void read_from_both_sd_cards(const char* filename)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0e6      	sub	sp, #408	@ 0x198
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80013f2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80013f6:	6018      	str	r0, [r3, #0]
    char buffer1[200], buffer2[200];
    
    printf("\n=== Reading from both SD cards ===\r\n");
 80013f8:	4815      	ldr	r0, [pc, #84]	@ (8001450 <read_from_both_sd_cards+0x68>)
 80013fa:	f006 f953 	bl	80076a4 <puts>
    
    // Read from first SD card (CS pin B12)
    printf("Reading from SD Card 1 (CS: B12)...\r\n");
 80013fe:	4815      	ldr	r0, [pc, #84]	@ (8001454 <read_from_both_sd_cards+0x6c>)
 8001400:	f006 f950 	bl	80076a4 <puts>
    read_from_sd_card(filename, buffer1, sizeof(buffer1), GPIO_PIN_12);
 8001404:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8001408:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800140c:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 8001410:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001414:	22c8      	movs	r2, #200	@ 0xc8
 8001416:	6800      	ldr	r0, [r0, #0]
 8001418:	f7ff fe9e 	bl	8001158 <read_from_sd_card>
    
    // Small delay between operations
    HAL_Delay(500);
 800141c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001420:	f000 fbe6 	bl	8001bf0 <HAL_Delay>
    
    // Read from second SD card (CS pin B1)
    printf("Reading from SD Card 2 (CS: B1)...\r\n");
 8001424:	480c      	ldr	r0, [pc, #48]	@ (8001458 <read_from_both_sd_cards+0x70>)
 8001426:	f006 f93d 	bl	80076a4 <puts>
    read_from_sd_card(filename, buffer2, sizeof(buffer2), GPIO_PIN_1);
 800142a:	f107 0108 	add.w	r1, r7, #8
 800142e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001432:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 8001436:	2302      	movs	r3, #2
 8001438:	22c8      	movs	r2, #200	@ 0xc8
 800143a:	6800      	ldr	r0, [r0, #0]
 800143c:	f7ff fe8c 	bl	8001158 <read_from_sd_card>
    
    printf("=== Both SD cards read ===\r\n\n");
 8001440:	4806      	ldr	r0, [pc, #24]	@ (800145c <read_from_both_sd_cards+0x74>)
 8001442:	f006 f92f 	bl	80076a4 <puts>
}
 8001446:	bf00      	nop
 8001448:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	08008c94 	.word	0x08008c94
 8001454:	08008cbc 	.word	0x08008cbc
 8001458:	08008ce4 	.word	0x08008ce4
 800145c:	08008d08 	.word	0x08008d08

08001460 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001468:	1d39      	adds	r1, r7, #4
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	2201      	movs	r2, #1
 8001470:	4803      	ldr	r0, [pc, #12]	@ (8001480 <__io_putchar+0x20>)
 8001472:	f001 feec 	bl	800324e <HAL_UART_Transmit>

  return ch;
 8001476:	687b      	ldr	r3, [r7, #4]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200000fc 	.word	0x200000fc

08001484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001488:	b672      	cpsid	i
}
 800148a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <Error_Handler+0x8>

08001490 <test_sd_card_connection>:
  * @brief  Test SD card connection and basic functionality with full reset
  * @param  cs_pin: CS pin for SD card selection
  * @retval None
  */
void test_sd_card_connection(uint16_t cs_pin)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	4602      	mov	r2, r0
 800149c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80014a0:	f823 2c4a 	strh.w	r2, [r3, #-74]
    printf("\n=== Testing SD Card %s Connection ===\r\n", 
 80014a4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80014a8:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
 80014ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014b0:	d101      	bne.n	80014b6 <test_sd_card_connection+0x26>
 80014b2:	4b96      	ldr	r3, [pc, #600]	@ (800170c <test_sd_card_connection+0x27c>)
 80014b4:	e000      	b.n	80014b8 <test_sd_card_connection+0x28>
 80014b6:	4b96      	ldr	r3, [pc, #600]	@ (8001710 <test_sd_card_connection+0x280>)
 80014b8:	4619      	mov	r1, r3
 80014ba:	4896      	ldr	r0, [pc, #600]	@ (8001714 <test_sd_card_connection+0x284>)
 80014bc:	f006 f88a 	bl	80075d4 <iprintf>
           (cs_pin == GPIO_PIN_12) ? "1 (B12)" : "2 (B1)");
    
    // Ensure both CS pins are high first
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014c6:	4894      	ldr	r0, [pc, #592]	@ (8001718 <test_sd_card_connection+0x288>)
 80014c8:	f000 fe1e 	bl	8002108 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	2102      	movs	r1, #2
 80014d0:	4891      	ldr	r0, [pc, #580]	@ (8001718 <test_sd_card_connection+0x288>)
 80014d2:	f000 fe19 	bl	8002108 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80014d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014da:	f000 fb89 	bl	8001bf0 <HAL_Delay>
    
    // Set the CS pin for this operation
    set_sd_cs_pin(cs_pin);
 80014de:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80014e2:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7fe fe38 	bl	800015c <set_sd_cs_pin>
    HAL_Delay(300);
 80014ec:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80014f0:	f000 fb7e 	bl	8001bf0 <HAL_Delay>
    
    // Force SD disk re-initialization
    printf("Initializing SD disk...\r\n");
 80014f4:	4889      	ldr	r0, [pc, #548]	@ (800171c <test_sd_card_connection+0x28c>)
 80014f6:	f006 f8d5 	bl	80076a4 <puts>
    DSTATUS disk_status = SD_disk_initialize(0);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f7ff f80a 	bl	8000514 <SD_disk_initialize>
 8001500:	4603      	mov	r3, r0
 8001502:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001506:	f102 020f 	add.w	r2, r2, #15
 800150a:	7013      	strb	r3, [r2, #0]
    printf("Disk init result: %d\r\n", disk_status);
 800150c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001510:	f103 030f 	add.w	r3, r3, #15
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	4619      	mov	r1, r3
 8001518:	4881      	ldr	r0, [pc, #516]	@ (8001720 <test_sd_card_connection+0x290>)
 800151a:	f006 f85b 	bl	80075d4 <iprintf>
    HAL_Delay(200);
 800151e:	20c8      	movs	r0, #200	@ 0xc8
 8001520:	f000 fb66 	bl	8001bf0 <HAL_Delay>
    
    // Try to mount
    FATFS FatFs;
    FRESULT fres = f_mount(&FatFs, "", 1);
 8001524:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001528:	3b1c      	subs	r3, #28
 800152a:	2201      	movs	r2, #1
 800152c:	497d      	ldr	r1, [pc, #500]	@ (8001724 <test_sd_card_connection+0x294>)
 800152e:	4618      	mov	r0, r3
 8001530:	f004 fd3a 	bl	8005fa8 <f_mount>
 8001534:	4603      	mov	r3, r0
 8001536:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800153a:	f102 020e 	add.w	r2, r2, #14
 800153e:	7013      	strb	r3, [r2, #0]
    printf("Mount result: %d ", fres);
 8001540:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001544:	f103 030e 	add.w	r3, r3, #14
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4619      	mov	r1, r3
 800154c:	4876      	ldr	r0, [pc, #472]	@ (8001728 <test_sd_card_connection+0x298>)
 800154e:	f006 f841 	bl	80075d4 <iprintf>
    
    if (fres == FR_OK) {
 8001552:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001556:	f103 030e 	add.w	r3, r3, #14
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d160      	bne.n	8001622 <test_sd_card_connection+0x192>
        printf("(SUCCESS)\r\n");
 8001560:	4872      	ldr	r0, [pc, #456]	@ (800172c <test_sd_card_connection+0x29c>)
 8001562:	f006 f89f 	bl	80076a4 <puts>
        // Check disk space
        FATFS *pfs;
        DWORD fre_clust;
        DWORD total_space, free_space;
        
        FRESULT space_res = f_getfree("", &fre_clust, &pfs);
 8001566:	f107 0210 	add.w	r2, r7, #16
 800156a:	f107 0310 	add.w	r3, r7, #16
 800156e:	3b04      	subs	r3, #4
 8001570:	4619      	mov	r1, r3
 8001572:	486c      	ldr	r0, [pc, #432]	@ (8001724 <test_sd_card_connection+0x294>)
 8001574:	f005 fd90 	bl	8007098 <f_getfree>
 8001578:	4603      	mov	r3, r0
 800157a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800157e:	f102 020d 	add.w	r2, r2, #13
 8001582:	7013      	strb	r3, [r2, #0]
        if (space_res == FR_OK) {
 8001584:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001588:	f103 030d 	add.w	r3, r3, #13
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d138      	bne.n	8001604 <test_sd_card_connection+0x174>
            total_space = (pfs->n_fatent - 2) * pfs->csize * 512;
 8001592:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001596:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800159a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	3b02      	subs	r3, #2
 80015a2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80015a6:	f852 2c40 	ldr.w	r2, [r2, #-64]
 80015aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015ae:	7892      	ldrb	r2, [r2, #2]
 80015b0:	fb02 f303 	mul.w	r3, r2, r3
 80015b4:	025b      	lsls	r3, r3, #9
 80015b6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80015ba:	f102 0208 	add.w	r2, r2, #8
 80015be:	6013      	str	r3, [r2, #0]
            free_space = fre_clust * pfs->csize * 512;
 80015c0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80015c4:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80015c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015cc:	789b      	ldrb	r3, [r3, #2]
 80015ce:	461a      	mov	r2, r3
 80015d0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80015d4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80015d8:	fb02 f303 	mul.w	r3, r2, r3
 80015dc:	025b      	lsls	r3, r3, #9
 80015de:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80015e2:	f102 0204 	add.w	r2, r2, #4
 80015e6:	6013      	str	r3, [r2, #0]
            printf("Total Space: %lu bytes, Free Space: %lu bytes\r\n", total_space, free_space);
 80015e8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80015ec:	f103 0304 	add.w	r3, r3, #4
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80015f6:	f103 0308 	add.w	r3, r3, #8
 80015fa:	6819      	ldr	r1, [r3, #0]
 80015fc:	484c      	ldr	r0, [pc, #304]	@ (8001730 <test_sd_card_connection+0x2a0>)
 80015fe:	f005 ffe9 	bl	80075d4 <iprintf>
 8001602:	e008      	b.n	8001616 <test_sd_card_connection+0x186>
        } else {
            printf("Could not get disk space info: %d\r\n", space_res);
 8001604:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001608:	f103 030d 	add.w	r3, r3, #13
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	4848      	ldr	r0, [pc, #288]	@ (8001734 <test_sd_card_connection+0x2a4>)
 8001612:	f005 ffdf 	bl	80075d4 <iprintf>
        }
        
        f_mount(NULL, "", 0);
 8001616:	2200      	movs	r2, #0
 8001618:	4942      	ldr	r1, [pc, #264]	@ (8001724 <test_sd_card_connection+0x294>)
 800161a:	2000      	movs	r0, #0
 800161c:	f004 fcc4 	bl	8005fa8 <f_mount>
 8001620:	e060      	b.n	80016e4 <test_sd_card_connection+0x254>
    } else {
        printf("(FAILED)\r\n");
 8001622:	4845      	ldr	r0, [pc, #276]	@ (8001738 <test_sd_card_connection+0x2a8>)
 8001624:	f006 f83e 	bl	80076a4 <puts>
        switch(fres) {
 8001628:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800162c:	f103 030e 	add.w	r3, r3, #14
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	3b01      	subs	r3, #1
 8001634:	2b0c      	cmp	r3, #12
 8001636:	d851      	bhi.n	80016dc <test_sd_card_connection+0x24c>
 8001638:	a201      	add	r2, pc, #4	@ (adr r2, 8001640 <test_sd_card_connection+0x1b0>)
 800163a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163e:	bf00      	nop
 8001640:	08001675 	.word	0x08001675
 8001644:	0800167d 	.word	0x0800167d
 8001648:	08001685 	.word	0x08001685
 800164c:	0800168d 	.word	0x0800168d
 8001650:	08001695 	.word	0x08001695
 8001654:	0800169d 	.word	0x0800169d
 8001658:	080016a5 	.word	0x080016a5
 800165c:	080016ad 	.word	0x080016ad
 8001660:	080016b5 	.word	0x080016b5
 8001664:	080016bd 	.word	0x080016bd
 8001668:	080016c5 	.word	0x080016c5
 800166c:	080016cd 	.word	0x080016cd
 8001670:	080016d5 	.word	0x080016d5
            case FR_DISK_ERR: printf("Disk error - check connections\r\n"); break;
 8001674:	4831      	ldr	r0, [pc, #196]	@ (800173c <test_sd_card_connection+0x2ac>)
 8001676:	f006 f815 	bl	80076a4 <puts>
 800167a:	e033      	b.n	80016e4 <test_sd_card_connection+0x254>
            case FR_INT_ERR: printf("Internal error\r\n"); break;
 800167c:	4830      	ldr	r0, [pc, #192]	@ (8001740 <test_sd_card_connection+0x2b0>)
 800167e:	f006 f811 	bl	80076a4 <puts>
 8001682:	e02f      	b.n	80016e4 <test_sd_card_connection+0x254>
            case FR_NOT_READY: printf("Drive not ready\r\n"); break;
 8001684:	482f      	ldr	r0, [pc, #188]	@ (8001744 <test_sd_card_connection+0x2b4>)
 8001686:	f006 f80d 	bl	80076a4 <puts>
 800168a:	e02b      	b.n	80016e4 <test_sd_card_connection+0x254>
            case FR_NO_FILE: printf("No file\r\n"); break;
 800168c:	482e      	ldr	r0, [pc, #184]	@ (8001748 <test_sd_card_connection+0x2b8>)
 800168e:	f006 f809 	bl	80076a4 <puts>
 8001692:	e027      	b.n	80016e4 <test_sd_card_connection+0x254>
            case FR_NO_PATH: printf("No path\r\n"); break;
 8001694:	482d      	ldr	r0, [pc, #180]	@ (800174c <test_sd_card_connection+0x2bc>)
 8001696:	f006 f805 	bl	80076a4 <puts>
 800169a:	e023      	b.n	80016e4 <test_sd_card_connection+0x254>
            case FR_INVALID_NAME: printf("Invalid name\r\n"); break;
 800169c:	482c      	ldr	r0, [pc, #176]	@ (8001750 <test_sd_card_connection+0x2c0>)
 800169e:	f006 f801 	bl	80076a4 <puts>
 80016a2:	e01f      	b.n	80016e4 <test_sd_card_connection+0x254>
            case FR_DENIED: printf("Access denied\r\n"); break;
 80016a4:	482b      	ldr	r0, [pc, #172]	@ (8001754 <test_sd_card_connection+0x2c4>)
 80016a6:	f005 fffd 	bl	80076a4 <puts>
 80016aa:	e01b      	b.n	80016e4 <test_sd_card_connection+0x254>
            case FR_EXIST: printf("File exists\r\n"); break;
 80016ac:	482a      	ldr	r0, [pc, #168]	@ (8001758 <test_sd_card_connection+0x2c8>)
 80016ae:	f005 fff9 	bl	80076a4 <puts>
 80016b2:	e017      	b.n	80016e4 <test_sd_card_connection+0x254>
            case FR_INVALID_OBJECT: printf("Invalid object\r\n"); break;
 80016b4:	4829      	ldr	r0, [pc, #164]	@ (800175c <test_sd_card_connection+0x2cc>)
 80016b6:	f005 fff5 	bl	80076a4 <puts>
 80016ba:	e013      	b.n	80016e4 <test_sd_card_connection+0x254>
            case FR_WRITE_PROTECTED: printf("Write protected\r\n"); break;
 80016bc:	4828      	ldr	r0, [pc, #160]	@ (8001760 <test_sd_card_connection+0x2d0>)
 80016be:	f005 fff1 	bl	80076a4 <puts>
 80016c2:	e00f      	b.n	80016e4 <test_sd_card_connection+0x254>
            case FR_INVALID_DRIVE: printf("Invalid drive\r\n"); break;
 80016c4:	4827      	ldr	r0, [pc, #156]	@ (8001764 <test_sd_card_connection+0x2d4>)
 80016c6:	f005 ffed 	bl	80076a4 <puts>
 80016ca:	e00b      	b.n	80016e4 <test_sd_card_connection+0x254>
            case FR_NOT_ENABLED: printf("Not enabled\r\n"); break;
 80016cc:	4826      	ldr	r0, [pc, #152]	@ (8001768 <test_sd_card_connection+0x2d8>)
 80016ce:	f005 ffe9 	bl	80076a4 <puts>
 80016d2:	e007      	b.n	80016e4 <test_sd_card_connection+0x254>
            case FR_NO_FILESYSTEM: printf("No filesystem\r\n"); break;
 80016d4:	4825      	ldr	r0, [pc, #148]	@ (800176c <test_sd_card_connection+0x2dc>)
 80016d6:	f005 ffe5 	bl	80076a4 <puts>
 80016da:	e003      	b.n	80016e4 <test_sd_card_connection+0x254>
            default: printf("Unknown error\r\n"); break;
 80016dc:	4824      	ldr	r0, [pc, #144]	@ (8001770 <test_sd_card_connection+0x2e0>)
 80016de:	f005 ffe1 	bl	80076a4 <puts>
 80016e2:	bf00      	nop
        }
    }
    
    printf("=== SD Card %s Test Complete ===\r\n\n", 
 80016e4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80016e8:	f833 3c4a 	ldrh.w	r3, [r3, #-74]
 80016ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016f0:	d101      	bne.n	80016f6 <test_sd_card_connection+0x266>
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <test_sd_card_connection+0x27c>)
 80016f4:	e000      	b.n	80016f8 <test_sd_card_connection+0x268>
 80016f6:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <test_sd_card_connection+0x280>)
 80016f8:	4619      	mov	r1, r3
 80016fa:	481e      	ldr	r0, [pc, #120]	@ (8001774 <test_sd_card_connection+0x2e4>)
 80016fc:	f005 ff6a 	bl	80075d4 <iprintf>
           (cs_pin == GPIO_PIN_12) ? "1 (B12)" : "2 (B1)");
}
 8001700:	bf00      	nop
 8001702:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	08008aec 	.word	0x08008aec
 8001710:	08008af4 	.word	0x08008af4
 8001714:	08009018 	.word	0x08009018
 8001718:	40010c00 	.word	0x40010c00
 800171c:	08009044 	.word	0x08009044
 8001720:	08009060 	.word	0x08009060
 8001724:	08008ae8 	.word	0x08008ae8
 8001728:	08009078 	.word	0x08009078
 800172c:	0800908c 	.word	0x0800908c
 8001730:	08009098 	.word	0x08009098
 8001734:	080090c8 	.word	0x080090c8
 8001738:	080090ec 	.word	0x080090ec
 800173c:	080090f8 	.word	0x080090f8
 8001740:	08009118 	.word	0x08009118
 8001744:	08009128 	.word	0x08009128
 8001748:	0800913c 	.word	0x0800913c
 800174c:	08009148 	.word	0x08009148
 8001750:	08009154 	.word	0x08009154
 8001754:	08009164 	.word	0x08009164
 8001758:	08009174 	.word	0x08009174
 800175c:	08009184 	.word	0x08009184
 8001760:	08009194 	.word	0x08009194
 8001764:	080091a8 	.word	0x080091a8
 8001768:	080091b8 	.word	0x080091b8
 800176c:	080091c8 	.word	0x080091c8
 8001770:	080091d8 	.word	0x080091d8
 8001774:	080091e8 	.word	0x080091e8

08001778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800177e:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <HAL_MspInit+0x5c>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	4a14      	ldr	r2, [pc, #80]	@ (80017d4 <HAL_MspInit+0x5c>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6193      	str	r3, [r2, #24]
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_MspInit+0x5c>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <HAL_MspInit+0x5c>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	4a0e      	ldr	r2, [pc, #56]	@ (80017d4 <HAL_MspInit+0x5c>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	61d3      	str	r3, [r2, #28]
 80017a2:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <HAL_MspInit+0x5c>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_MspInit+0x60>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <HAL_MspInit+0x60>)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010000 	.word	0x40010000

080017dc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001868 <HAL_SPI_MspInit+0x8c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d131      	bne.n	8001860 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017fc:	4b1b      	ldr	r3, [pc, #108]	@ (800186c <HAL_SPI_MspInit+0x90>)
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	4a1a      	ldr	r2, [pc, #104]	@ (800186c <HAL_SPI_MspInit+0x90>)
 8001802:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001806:	61d3      	str	r3, [r2, #28]
 8001808:	4b18      	ldr	r3, [pc, #96]	@ (800186c <HAL_SPI_MspInit+0x90>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	4b15      	ldr	r3, [pc, #84]	@ (800186c <HAL_SPI_MspInit+0x90>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a14      	ldr	r2, [pc, #80]	@ (800186c <HAL_SPI_MspInit+0x90>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <HAL_SPI_MspInit+0x90>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800182c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001830:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 0310 	add.w	r3, r7, #16
 800183e:	4619      	mov	r1, r3
 8001840:	480b      	ldr	r0, [pc, #44]	@ (8001870 <HAL_SPI_MspInit+0x94>)
 8001842:	f000 fadd 	bl	8001e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001846:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800184a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	4619      	mov	r1, r3
 800185a:	4805      	ldr	r0, [pc, #20]	@ (8001870 <HAL_SPI_MspInit+0x94>)
 800185c:	f000 fad0 	bl	8001e00 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001860:	bf00      	nop
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40003800 	.word	0x40003800
 800186c:	40021000 	.word	0x40021000
 8001870:	40010c00 	.word	0x40010c00

08001874 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a1c      	ldr	r2, [pc, #112]	@ (8001900 <HAL_UART_MspInit+0x8c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d131      	bne.n	80018f8 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001894:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <HAL_UART_MspInit+0x90>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a1a      	ldr	r2, [pc, #104]	@ (8001904 <HAL_UART_MspInit+0x90>)
 800189a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800189e:	6193      	str	r3, [r2, #24]
 80018a0:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <HAL_UART_MspInit+0x90>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ac:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <HAL_UART_MspInit+0x90>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4a14      	ldr	r2, [pc, #80]	@ (8001904 <HAL_UART_MspInit+0x90>)
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	6193      	str	r3, [r2, #24]
 80018b8:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_UART_MspInit+0x90>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ce:	2303      	movs	r3, #3
 80018d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f107 0310 	add.w	r3, r7, #16
 80018d6:	4619      	mov	r1, r3
 80018d8:	480b      	ldr	r0, [pc, #44]	@ (8001908 <HAL_UART_MspInit+0x94>)
 80018da:	f000 fa91 	bl	8001e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	4619      	mov	r1, r3
 80018f2:	4805      	ldr	r0, [pc, #20]	@ (8001908 <HAL_UART_MspInit+0x94>)
 80018f4:	f000 fa84 	bl	8001e00 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80018f8:	bf00      	nop
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40013800 	.word	0x40013800
 8001904:	40021000 	.word	0x40021000
 8001908:	40010800 	.word	0x40010800

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <NMI_Handler+0x4>

08001914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <MemManage_Handler+0x4>

08001924 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <BusFault_Handler+0x4>

0800192c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <UsageFault_Handler+0x4>

08001934 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  if(Timer1 > 0)
 800195c:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <SysTick_Handler+0x34>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <SysTick_Handler+0x18>
    Timer1--;
 8001964:	4b09      	ldr	r3, [pc, #36]	@ (800198c <SysTick_Handler+0x34>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	4b07      	ldr	r3, [pc, #28]	@ (800198c <SysTick_Handler+0x34>)
 800196e:	801a      	strh	r2, [r3, #0]
  if(Timer2 > 0)
 8001970:	4b07      	ldr	r3, [pc, #28]	@ (8001990 <SysTick_Handler+0x38>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <SysTick_Handler+0x2c>
    Timer2--;
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <SysTick_Handler+0x38>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	3b01      	subs	r3, #1
 800197e:	b29a      	uxth	r2, r3
 8001980:	4b03      	ldr	r3, [pc, #12]	@ (8001990 <SysTick_Handler+0x38>)
 8001982:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001984:	f000 f918 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	2000009c 	.word	0x2000009c
 8001990:	2000009e 	.word	0x2000009e

08001994 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e00a      	b.n	80019bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019a6:	f3af 8000 	nop.w
 80019aa:	4601      	mov	r1, r0
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	60ba      	str	r2, [r7, #8]
 80019b2:	b2ca      	uxtb	r2, r1
 80019b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3301      	adds	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	dbf0      	blt.n	80019a6 <_read+0x12>
	}

return len;
 80019c4:	687b      	ldr	r3, [r7, #4]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e009      	b.n	80019f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	60ba      	str	r2, [r7, #8]
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fd39 	bl	8001460 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3301      	adds	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dbf1      	blt.n	80019e0 <_write+0x12>
	}
	return len;
 80019fc:	687b      	ldr	r3, [r7, #4]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_close>:

int _close(int file)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a2c:	605a      	str	r2, [r3, #4]
	return 0;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <_isatty>:

int _isatty(int file)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
	return 1;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b085      	sub	sp, #20
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	60f8      	str	r0, [r7, #12]
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
	return 0;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
	...

08001a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a70:	4a14      	ldr	r2, [pc, #80]	@ (8001ac4 <_sbrk+0x5c>)
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <_sbrk+0x60>)
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a7c:	4b13      	ldr	r3, [pc, #76]	@ (8001acc <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a84:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <_sbrk+0x64>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <_sbrk+0x68>)
 8001a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d207      	bcs.n	8001aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a98:	f005 ff54 	bl	8007944 <__errno>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	e009      	b.n	8001abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aae:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a05      	ldr	r2, [pc, #20]	@ (8001acc <_sbrk+0x64>)
 8001ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20005000 	.word	0x20005000
 8001ac8:	00000400 	.word	0x00000400
 8001acc:	20000144 	.word	0x20000144
 8001ad0:	200004d0 	.word	0x200004d0

08001ad4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae0:	480c      	ldr	r0, [pc, #48]	@ (8001b14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ae2:	490d      	ldr	r1, [pc, #52]	@ (8001b18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae8:	e002      	b.n	8001af0 <LoopCopyDataInit>

08001aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aee:	3304      	adds	r3, #4

08001af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af4:	d3f9      	bcc.n	8001aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001af8:	4c0a      	ldr	r4, [pc, #40]	@ (8001b24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001afc:	e001      	b.n	8001b02 <LoopFillZerobss>

08001afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b00:	3204      	adds	r2, #4

08001b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b04:	d3fb      	bcc.n	8001afe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b06:	f7ff ffe5 	bl	8001ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b0a:	f005 ff21 	bl	8007950 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b0e:	f7ff f813 	bl	8000b38 <main>
  bx lr
 8001b12:	4770      	bx	lr
  ldr r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b18:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001b1c:	08009814 	.word	0x08009814
  ldr r2, =_sbss
 8001b20:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001b24:	200004cc 	.word	0x200004cc

08001b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC1_2_IRQHandler>
	...

08001b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <HAL_Init+0x28>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	@ (8001b54 <HAL_Init+0x28>)
 8001b36:	f043 0310 	orr.w	r3, r3, #16
 8001b3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 f92b 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	200f      	movs	r0, #15
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff fe16 	bl	8001778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40022000 	.word	0x40022000

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f935 	bl	8001de6 <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 f90b 	bl	8001dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	@ (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	2000000c 	.word	0x2000000c
 8001bb4:	20000008 	.word	0x20000008

08001bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <HAL_IncTick+0x1c>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_IncTick+0x20>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a03      	ldr	r2, [pc, #12]	@ (8001bd8 <HAL_IncTick+0x20>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	2000000c 	.word	0x2000000c
 8001bd8:	20000148 	.word	0x20000148

08001bdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return uwTick;
 8001be0:	4b02      	ldr	r3, [pc, #8]	@ (8001bec <HAL_GetTick+0x10>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	20000148 	.word	0x20000148

08001bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff fff0 	bl	8001bdc <HAL_GetTick>
 8001bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c08:	d005      	beq.n	8001c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <HAL_Delay+0x44>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4413      	add	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c16:	bf00      	nop
 8001c18:	f7ff ffe0 	bl	8001bdc <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d8f7      	bhi.n	8001c18 <HAL_Delay+0x28>
  {
  }
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	2000000c 	.word	0x2000000c

08001c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c48:	4b0c      	ldr	r3, [pc, #48]	@ (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c54:	4013      	ands	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6a:	4a04      	ldr	r2, [pc, #16]	@ (8001c7c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	60d3      	str	r3, [r2, #12]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c84:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <__NVIC_GetPriorityGrouping+0x18>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	0a1b      	lsrs	r3, r3, #8
 8001c8a:	f003 0307 	and.w	r3, r3, #7
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	db0a      	blt.n	8001cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	490c      	ldr	r1, [pc, #48]	@ (8001ce8 <__NVIC_SetPriority+0x4c>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	0112      	lsls	r2, r2, #4
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc4:	e00a      	b.n	8001cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4908      	ldr	r1, [pc, #32]	@ (8001cec <__NVIC_SetPriority+0x50>)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	3b04      	subs	r3, #4
 8001cd4:	0112      	lsls	r2, r2, #4
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	440b      	add	r3, r1
 8001cda:	761a      	strb	r2, [r3, #24]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000e100 	.word	0xe000e100
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	@ 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f1c3 0307 	rsb	r3, r3, #7
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	bf28      	it	cs
 8001d0e:	2304      	movcs	r3, #4
 8001d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3304      	adds	r3, #4
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d902      	bls.n	8001d20 <NVIC_EncodePriority+0x30>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3b03      	subs	r3, #3
 8001d1e:	e000      	b.n	8001d22 <NVIC_EncodePriority+0x32>
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	401a      	ands	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d38:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	43d9      	mvns	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	4313      	orrs	r3, r2
         );
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3724      	adds	r7, #36	@ 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d64:	d301      	bcc.n	8001d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <SysTick_Config+0x40>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d72:	210f      	movs	r1, #15
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f7ff ff90 	bl	8001c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <SysTick_Config+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d82:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <SysTick_Config+0x40>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	e000e010 	.word	0xe000e010

08001d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff49 	bl	8001c38 <__NVIC_SetPriorityGrouping>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc0:	f7ff ff5e 	bl	8001c80 <__NVIC_GetPriorityGrouping>
 8001dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff90 	bl	8001cf0 <NVIC_EncodePriority>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff5f 	bl	8001c9c <__NVIC_SetPriority>
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ffb0 	bl	8001d54 <SysTick_Config>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b08b      	sub	sp, #44	@ 0x2c
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e12:	e169      	b.n	80020e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e14:	2201      	movs	r2, #1
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	f040 8158 	bne.w	80020e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	4a9a      	ldr	r2, [pc, #616]	@ (80020a0 <HAL_GPIO_Init+0x2a0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d05e      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e3c:	4a98      	ldr	r2, [pc, #608]	@ (80020a0 <HAL_GPIO_Init+0x2a0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d875      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e42:	4a98      	ldr	r2, [pc, #608]	@ (80020a4 <HAL_GPIO_Init+0x2a4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d058      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e48:	4a96      	ldr	r2, [pc, #600]	@ (80020a4 <HAL_GPIO_Init+0x2a4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d86f      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e4e:	4a96      	ldr	r2, [pc, #600]	@ (80020a8 <HAL_GPIO_Init+0x2a8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d052      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e54:	4a94      	ldr	r2, [pc, #592]	@ (80020a8 <HAL_GPIO_Init+0x2a8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d869      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e5a:	4a94      	ldr	r2, [pc, #592]	@ (80020ac <HAL_GPIO_Init+0x2ac>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d04c      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e60:	4a92      	ldr	r2, [pc, #584]	@ (80020ac <HAL_GPIO_Init+0x2ac>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d863      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e66:	4a92      	ldr	r2, [pc, #584]	@ (80020b0 <HAL_GPIO_Init+0x2b0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d046      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e6c:	4a90      	ldr	r2, [pc, #576]	@ (80020b0 <HAL_GPIO_Init+0x2b0>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d85d      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e72:	2b12      	cmp	r3, #18
 8001e74:	d82a      	bhi.n	8001ecc <HAL_GPIO_Init+0xcc>
 8001e76:	2b12      	cmp	r3, #18
 8001e78:	d859      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e80 <HAL_GPIO_Init+0x80>)
 8001e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e80:	08001efb 	.word	0x08001efb
 8001e84:	08001ed5 	.word	0x08001ed5
 8001e88:	08001ee7 	.word	0x08001ee7
 8001e8c:	08001f29 	.word	0x08001f29
 8001e90:	08001f2f 	.word	0x08001f2f
 8001e94:	08001f2f 	.word	0x08001f2f
 8001e98:	08001f2f 	.word	0x08001f2f
 8001e9c:	08001f2f 	.word	0x08001f2f
 8001ea0:	08001f2f 	.word	0x08001f2f
 8001ea4:	08001f2f 	.word	0x08001f2f
 8001ea8:	08001f2f 	.word	0x08001f2f
 8001eac:	08001f2f 	.word	0x08001f2f
 8001eb0:	08001f2f 	.word	0x08001f2f
 8001eb4:	08001f2f 	.word	0x08001f2f
 8001eb8:	08001f2f 	.word	0x08001f2f
 8001ebc:	08001f2f 	.word	0x08001f2f
 8001ec0:	08001f2f 	.word	0x08001f2f
 8001ec4:	08001edd 	.word	0x08001edd
 8001ec8:	08001ef1 	.word	0x08001ef1
 8001ecc:	4a79      	ldr	r2, [pc, #484]	@ (80020b4 <HAL_GPIO_Init+0x2b4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ed2:	e02c      	b.n	8001f2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	623b      	str	r3, [r7, #32]
          break;
 8001eda:	e029      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	623b      	str	r3, [r7, #32]
          break;
 8001ee4:	e024      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	3308      	adds	r3, #8
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e01f      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	330c      	adds	r3, #12
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e01a      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f02:	2304      	movs	r3, #4
 8001f04:	623b      	str	r3, [r7, #32]
          break;
 8001f06:	e013      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d105      	bne.n	8001f1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f10:	2308      	movs	r3, #8
 8001f12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	611a      	str	r2, [r3, #16]
          break;
 8001f1a:	e009      	b.n	8001f30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	615a      	str	r2, [r3, #20]
          break;
 8001f26:	e003      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
          break;
 8001f2c:	e000      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          break;
 8001f2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2bff      	cmp	r3, #255	@ 0xff
 8001f34:	d801      	bhi.n	8001f3a <HAL_GPIO_Init+0x13a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	e001      	b.n	8001f3e <HAL_GPIO_Init+0x13e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2bff      	cmp	r3, #255	@ 0xff
 8001f44:	d802      	bhi.n	8001f4c <HAL_GPIO_Init+0x14c>
 8001f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	e002      	b.n	8001f52 <HAL_GPIO_Init+0x152>
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4e:	3b08      	subs	r3, #8
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	210f      	movs	r1, #15
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	401a      	ands	r2, r3
 8001f64:	6a39      	ldr	r1, [r7, #32]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80b1 	beq.w	80020e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f80:	4b4d      	ldr	r3, [pc, #308]	@ (80020b8 <HAL_GPIO_Init+0x2b8>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	4a4c      	ldr	r2, [pc, #304]	@ (80020b8 <HAL_GPIO_Init+0x2b8>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6193      	str	r3, [r2, #24]
 8001f8c:	4b4a      	ldr	r3, [pc, #296]	@ (80020b8 <HAL_GPIO_Init+0x2b8>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f98:	4a48      	ldr	r2, [pc, #288]	@ (80020bc <HAL_GPIO_Init+0x2bc>)
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	220f      	movs	r2, #15
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a40      	ldr	r2, [pc, #256]	@ (80020c0 <HAL_GPIO_Init+0x2c0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d013      	beq.n	8001fec <HAL_GPIO_Init+0x1ec>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80020c4 <HAL_GPIO_Init+0x2c4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00d      	beq.n	8001fe8 <HAL_GPIO_Init+0x1e8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a3e      	ldr	r2, [pc, #248]	@ (80020c8 <HAL_GPIO_Init+0x2c8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d007      	beq.n	8001fe4 <HAL_GPIO_Init+0x1e4>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a3d      	ldr	r2, [pc, #244]	@ (80020cc <HAL_GPIO_Init+0x2cc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d101      	bne.n	8001fe0 <HAL_GPIO_Init+0x1e0>
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e006      	b.n	8001fee <HAL_GPIO_Init+0x1ee>
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	e004      	b.n	8001fee <HAL_GPIO_Init+0x1ee>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e002      	b.n	8001fee <HAL_GPIO_Init+0x1ee>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_GPIO_Init+0x1ee>
 8001fec:	2300      	movs	r3, #0
 8001fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff0:	f002 0203 	and.w	r2, r2, #3
 8001ff4:	0092      	lsls	r2, r2, #2
 8001ff6:	4093      	lsls	r3, r2
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ffe:	492f      	ldr	r1, [pc, #188]	@ (80020bc <HAL_GPIO_Init+0x2bc>)
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3302      	adds	r3, #2
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002018:	4b2d      	ldr	r3, [pc, #180]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	492c      	ldr	r1, [pc, #176]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002026:	4b2a      	ldr	r3, [pc, #168]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	43db      	mvns	r3, r3
 800202e:	4928      	ldr	r1, [pc, #160]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002030:	4013      	ands	r3, r2
 8002032:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d006      	beq.n	800204e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002040:	4b23      	ldr	r3, [pc, #140]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	4922      	ldr	r1, [pc, #136]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800204e:	4b20      	ldr	r3, [pc, #128]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	43db      	mvns	r3, r3
 8002056:	491e      	ldr	r1, [pc, #120]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002058:	4013      	ands	r3, r2
 800205a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d006      	beq.n	8002076 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002068:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	4918      	ldr	r1, [pc, #96]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
 8002074:	e006      	b.n	8002084 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002076:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	43db      	mvns	r3, r3
 800207e:	4914      	ldr	r1, [pc, #80]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002080:	4013      	ands	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d021      	beq.n	80020d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002090:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	490e      	ldr	r1, [pc, #56]	@ (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]
 800209c:	e021      	b.n	80020e2 <HAL_GPIO_Init+0x2e2>
 800209e:	bf00      	nop
 80020a0:	10320000 	.word	0x10320000
 80020a4:	10310000 	.word	0x10310000
 80020a8:	10220000 	.word	0x10220000
 80020ac:	10210000 	.word	0x10210000
 80020b0:	10120000 	.word	0x10120000
 80020b4:	10110000 	.word	0x10110000
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40010000 	.word	0x40010000
 80020c0:	40010800 	.word	0x40010800
 80020c4:	40010c00 	.word	0x40010c00
 80020c8:	40011000 	.word	0x40011000
 80020cc:	40011400 	.word	0x40011400
 80020d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002104 <HAL_GPIO_Init+0x304>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	43db      	mvns	r3, r3
 80020dc:	4909      	ldr	r1, [pc, #36]	@ (8002104 <HAL_GPIO_Init+0x304>)
 80020de:	4013      	ands	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	3301      	adds	r3, #1
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	fa22 f303 	lsr.w	r3, r2, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f47f ae8e 	bne.w	8001e14 <HAL_GPIO_Init+0x14>
  }
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	372c      	adds	r7, #44	@ 0x2c
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	40010400 	.word	0x40010400

08002108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	807b      	strh	r3, [r7, #2]
 8002114:	4613      	mov	r3, r2
 8002116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002118:	787b      	ldrb	r3, [r7, #1]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800211e:	887a      	ldrh	r2, [r7, #2]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002124:	e003      	b.n	800212e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002126:	887b      	ldrh	r3, [r7, #2]
 8002128:	041a      	lsls	r2, r3, #16
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	611a      	str	r2, [r3, #16]
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e272      	b.n	8002630 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 8087 	beq.w	8002266 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002158:	4b92      	ldr	r3, [pc, #584]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b04      	cmp	r3, #4
 8002162:	d00c      	beq.n	800217e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002164:	4b8f      	ldr	r3, [pc, #572]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b08      	cmp	r3, #8
 800216e:	d112      	bne.n	8002196 <HAL_RCC_OscConfig+0x5e>
 8002170:	4b8c      	ldr	r3, [pc, #560]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800217c:	d10b      	bne.n	8002196 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217e:	4b89      	ldr	r3, [pc, #548]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d06c      	beq.n	8002264 <HAL_RCC_OscConfig+0x12c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d168      	bne.n	8002264 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e24c      	b.n	8002630 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800219e:	d106      	bne.n	80021ae <HAL_RCC_OscConfig+0x76>
 80021a0:	4b80      	ldr	r3, [pc, #512]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a7f      	ldr	r2, [pc, #508]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	e02e      	b.n	800220c <HAL_RCC_OscConfig+0xd4>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x98>
 80021b6:	4b7b      	ldr	r3, [pc, #492]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a7a      	ldr	r2, [pc, #488]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b78      	ldr	r3, [pc, #480]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a77      	ldr	r2, [pc, #476]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	e01d      	b.n	800220c <HAL_RCC_OscConfig+0xd4>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021d8:	d10c      	bne.n	80021f4 <HAL_RCC_OscConfig+0xbc>
 80021da:	4b72      	ldr	r3, [pc, #456]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a71      	ldr	r2, [pc, #452]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	4b6f      	ldr	r3, [pc, #444]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a6e      	ldr	r2, [pc, #440]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e00b      	b.n	800220c <HAL_RCC_OscConfig+0xd4>
 80021f4:	4b6b      	ldr	r3, [pc, #428]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a6a      	ldr	r2, [pc, #424]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b68      	ldr	r3, [pc, #416]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a67      	ldr	r2, [pc, #412]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800220a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d013      	beq.n	800223c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7ff fce2 	bl	8001bdc <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800221c:	f7ff fcde 	bl	8001bdc <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b64      	cmp	r3, #100	@ 0x64
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e200      	b.n	8002630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	4b5d      	ldr	r3, [pc, #372]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0xe4>
 800223a:	e014      	b.n	8002266 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7ff fcce 	bl	8001bdc <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002244:	f7ff fcca 	bl	8001bdc <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	@ 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e1ec      	b.n	8002630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002256:	4b53      	ldr	r3, [pc, #332]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x10c>
 8002262:	e000      	b.n	8002266 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d063      	beq.n	800233a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002272:	4b4c      	ldr	r3, [pc, #304]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800227e:	4b49      	ldr	r3, [pc, #292]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b08      	cmp	r3, #8
 8002288:	d11c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x18c>
 800228a:	4b46      	ldr	r3, [pc, #280]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d116      	bne.n	80022c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002296:	4b43      	ldr	r3, [pc, #268]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d005      	beq.n	80022ae <HAL_RCC_OscConfig+0x176>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e1c0      	b.n	8002630 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ae:	4b3d      	ldr	r3, [pc, #244]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4939      	ldr	r1, [pc, #228]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c2:	e03a      	b.n	800233a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d020      	beq.n	800230e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022cc:	4b36      	ldr	r3, [pc, #216]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d2:	f7ff fc83 	bl	8001bdc <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022da:	f7ff fc7f 	bl	8001bdc <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e1a1      	b.n	8002630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ec:	4b2d      	ldr	r3, [pc, #180]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f8:	4b2a      	ldr	r3, [pc, #168]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4927      	ldr	r1, [pc, #156]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002308:	4313      	orrs	r3, r2
 800230a:	600b      	str	r3, [r1, #0]
 800230c:	e015      	b.n	800233a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230e:	4b26      	ldr	r3, [pc, #152]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7ff fc62 	bl	8001bdc <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231c:	f7ff fc5e 	bl	8001bdc <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e180      	b.n	8002630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232e:	4b1d      	ldr	r3, [pc, #116]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d03a      	beq.n	80023bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d019      	beq.n	8002382 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800234e:	4b17      	ldr	r3, [pc, #92]	@ (80023ac <HAL_RCC_OscConfig+0x274>)
 8002350:	2201      	movs	r2, #1
 8002352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002354:	f7ff fc42 	bl	8001bdc <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235c:	f7ff fc3e 	bl	8001bdc <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e160      	b.n	8002630 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236e:	4b0d      	ldr	r3, [pc, #52]	@ (80023a4 <HAL_RCC_OscConfig+0x26c>)
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800237a:	2001      	movs	r0, #1
 800237c:	f000 face 	bl	800291c <RCC_Delay>
 8002380:	e01c      	b.n	80023bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002382:	4b0a      	ldr	r3, [pc, #40]	@ (80023ac <HAL_RCC_OscConfig+0x274>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002388:	f7ff fc28 	bl	8001bdc <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238e:	e00f      	b.n	80023b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002390:	f7ff fc24 	bl	8001bdc <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d908      	bls.n	80023b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e146      	b.n	8002630 <HAL_RCC_OscConfig+0x4f8>
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000
 80023a8:	42420000 	.word	0x42420000
 80023ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b0:	4b92      	ldr	r3, [pc, #584]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1e9      	bne.n	8002390 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80a6 	beq.w	8002516 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ce:	4b8b      	ldr	r3, [pc, #556]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10d      	bne.n	80023f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	4b88      	ldr	r3, [pc, #544]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4a87      	ldr	r2, [pc, #540]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e4:	61d3      	str	r3, [r2, #28]
 80023e6:	4b85      	ldr	r3, [pc, #532]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f2:	2301      	movs	r3, #1
 80023f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f6:	4b82      	ldr	r3, [pc, #520]	@ (8002600 <HAL_RCC_OscConfig+0x4c8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d118      	bne.n	8002434 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002402:	4b7f      	ldr	r3, [pc, #508]	@ (8002600 <HAL_RCC_OscConfig+0x4c8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a7e      	ldr	r2, [pc, #504]	@ (8002600 <HAL_RCC_OscConfig+0x4c8>)
 8002408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800240c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240e:	f7ff fbe5 	bl	8001bdc <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002416:	f7ff fbe1 	bl	8001bdc <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b64      	cmp	r3, #100	@ 0x64
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e103      	b.n	8002630 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	4b75      	ldr	r3, [pc, #468]	@ (8002600 <HAL_RCC_OscConfig+0x4c8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x312>
 800243c:	4b6f      	ldr	r3, [pc, #444]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4a6e      	ldr	r2, [pc, #440]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6213      	str	r3, [r2, #32]
 8002448:	e02d      	b.n	80024a6 <HAL_RCC_OscConfig+0x36e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x334>
 8002452:	4b6a      	ldr	r3, [pc, #424]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4a69      	ldr	r2, [pc, #420]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	6213      	str	r3, [r2, #32]
 800245e:	4b67      	ldr	r3, [pc, #412]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	4a66      	ldr	r2, [pc, #408]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 8002464:	f023 0304 	bic.w	r3, r3, #4
 8002468:	6213      	str	r3, [r2, #32]
 800246a:	e01c      	b.n	80024a6 <HAL_RCC_OscConfig+0x36e>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b05      	cmp	r3, #5
 8002472:	d10c      	bne.n	800248e <HAL_RCC_OscConfig+0x356>
 8002474:	4b61      	ldr	r3, [pc, #388]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4a60      	ldr	r2, [pc, #384]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	6213      	str	r3, [r2, #32]
 8002480:	4b5e      	ldr	r3, [pc, #376]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	4a5d      	ldr	r2, [pc, #372]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6213      	str	r3, [r2, #32]
 800248c:	e00b      	b.n	80024a6 <HAL_RCC_OscConfig+0x36e>
 800248e:	4b5b      	ldr	r3, [pc, #364]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4a5a      	ldr	r2, [pc, #360]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	6213      	str	r3, [r2, #32]
 800249a:	4b58      	ldr	r3, [pc, #352]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	4a57      	ldr	r2, [pc, #348]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	f023 0304 	bic.w	r3, r3, #4
 80024a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d015      	beq.n	80024da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ae:	f7ff fb95 	bl	8001bdc <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7ff fb91 	bl	8001bdc <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e0b1      	b.n	8002630 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	4b4b      	ldr	r3, [pc, #300]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ee      	beq.n	80024b6 <HAL_RCC_OscConfig+0x37e>
 80024d8:	e014      	b.n	8002504 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024da:	f7ff fb7f 	bl	8001bdc <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7ff fb7b 	bl	8001bdc <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e09b      	b.n	8002630 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f8:	4b40      	ldr	r3, [pc, #256]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ee      	bne.n	80024e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002504:	7dfb      	ldrb	r3, [r7, #23]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d105      	bne.n	8002516 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250a:	4b3c      	ldr	r3, [pc, #240]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	4a3b      	ldr	r2, [pc, #236]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 8002510:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002514:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 8087 	beq.w	800262e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002520:	4b36      	ldr	r3, [pc, #216]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d061      	beq.n	80025f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d146      	bne.n	80025c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002534:	4b33      	ldr	r3, [pc, #204]	@ (8002604 <HAL_RCC_OscConfig+0x4cc>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253a:	f7ff fb4f 	bl	8001bdc <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002542:	f7ff fb4b 	bl	8001bdc <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e06d      	b.n	8002630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002554:	4b29      	ldr	r3, [pc, #164]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f0      	bne.n	8002542 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002568:	d108      	bne.n	800257c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800256a:	4b24      	ldr	r3, [pc, #144]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	4921      	ldr	r1, [pc, #132]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800257c:	4b1f      	ldr	r3, [pc, #124]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a19      	ldr	r1, [r3, #32]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	430b      	orrs	r3, r1
 800258e:	491b      	ldr	r1, [pc, #108]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002594:	4b1b      	ldr	r3, [pc, #108]	@ (8002604 <HAL_RCC_OscConfig+0x4cc>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7ff fb1f 	bl	8001bdc <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a2:	f7ff fb1b 	bl	8001bdc <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e03d      	b.n	8002630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025b4:	4b11      	ldr	r3, [pc, #68]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x46a>
 80025c0:	e035      	b.n	800262e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c2:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <HAL_RCC_OscConfig+0x4cc>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7ff fb08 	bl	8001bdc <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d0:	f7ff fb04 	bl	8001bdc <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e026      	b.n	8002630 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e2:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x498>
 80025ee:	e01e      	b.n	800262e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e019      	b.n	8002630 <HAL_RCC_OscConfig+0x4f8>
 80025fc:	40021000 	.word	0x40021000
 8002600:	40007000 	.word	0x40007000
 8002604:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002608:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <HAL_RCC_OscConfig+0x500>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	429a      	cmp	r2, r3
 800261a:	d106      	bne.n	800262a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d001      	beq.n	800262e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40021000 	.word	0x40021000

0800263c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0d0      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002650:	4b6a      	ldr	r3, [pc, #424]	@ (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d910      	bls.n	8002680 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b67      	ldr	r3, [pc, #412]	@ (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 0207 	bic.w	r2, r3, #7
 8002666:	4965      	ldr	r1, [pc, #404]	@ (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b63      	ldr	r3, [pc, #396]	@ (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0b8      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d020      	beq.n	80026ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002698:	4b59      	ldr	r3, [pc, #356]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4a58      	ldr	r2, [pc, #352]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026b0:	4b53      	ldr	r3, [pc, #332]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a52      	ldr	r2, [pc, #328]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026bc:	4b50      	ldr	r3, [pc, #320]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	494d      	ldr	r1, [pc, #308]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d040      	beq.n	800275c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e2:	4b47      	ldr	r3, [pc, #284]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d115      	bne.n	800271a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e07f      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d107      	bne.n	800270a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fa:	4b41      	ldr	r3, [pc, #260]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e073      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270a:	4b3d      	ldr	r3, [pc, #244]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e06b      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800271a:	4b39      	ldr	r3, [pc, #228]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f023 0203 	bic.w	r2, r3, #3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4936      	ldr	r1, [pc, #216]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800272c:	f7ff fa56 	bl	8001bdc <HAL_GetTick>
 8002730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002732:	e00a      	b.n	800274a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002734:	f7ff fa52 	bl	8001bdc <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e053      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274a:	4b2d      	ldr	r3, [pc, #180]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 020c 	and.w	r2, r3, #12
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	429a      	cmp	r2, r3
 800275a:	d1eb      	bne.n	8002734 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800275c:	4b27      	ldr	r3, [pc, #156]	@ (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d210      	bcs.n	800278c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b24      	ldr	r3, [pc, #144]	@ (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 0207 	bic.w	r2, r3, #7
 8002772:	4922      	ldr	r1, [pc, #136]	@ (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	4313      	orrs	r3, r2
 8002778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277a:	4b20      	ldr	r3, [pc, #128]	@ (80027fc <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e032      	b.n	80027f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002798:	4b19      	ldr	r3, [pc, #100]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4916      	ldr	r1, [pc, #88]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027b6:	4b12      	ldr	r3, [pc, #72]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	490e      	ldr	r1, [pc, #56]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ca:	f000 f821 	bl	8002810 <HAL_RCC_GetSysClockFreq>
 80027ce:	4602      	mov	r2, r0
 80027d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002800 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	490a      	ldr	r1, [pc, #40]	@ (8002804 <HAL_RCC_ClockConfig+0x1c8>)
 80027dc:	5ccb      	ldrb	r3, [r1, r3]
 80027de:	fa22 f303 	lsr.w	r3, r2, r3
 80027e2:	4a09      	ldr	r2, [pc, #36]	@ (8002808 <HAL_RCC_ClockConfig+0x1cc>)
 80027e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027e6:	4b09      	ldr	r3, [pc, #36]	@ (800280c <HAL_RCC_ClockConfig+0x1d0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff f9b4 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40022000 	.word	0x40022000
 8002800:	40021000 	.word	0x40021000
 8002804:	08009254 	.word	0x08009254
 8002808:	20000004 	.word	0x20000004
 800280c:	20000008 	.word	0x20000008

08002810 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	2300      	movs	r3, #0
 8002824:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800282a:	4b1e      	ldr	r3, [pc, #120]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b04      	cmp	r3, #4
 8002838:	d002      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x30>
 800283a:	2b08      	cmp	r3, #8
 800283c:	d003      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x36>
 800283e:	e027      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002840:	4b19      	ldr	r3, [pc, #100]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002842:	613b      	str	r3, [r7, #16]
      break;
 8002844:	e027      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	0c9b      	lsrs	r3, r3, #18
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	4a17      	ldr	r2, [pc, #92]	@ (80028ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002850:	5cd3      	ldrb	r3, [r2, r3]
 8002852:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d010      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800285e:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	0c5b      	lsrs	r3, r3, #17
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	4a11      	ldr	r2, [pc, #68]	@ (80028b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800286a:	5cd3      	ldrb	r3, [r2, r3]
 800286c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a0d      	ldr	r2, [pc, #52]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002872:	fb03 f202 	mul.w	r2, r3, r2
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	fbb2 f3f3 	udiv	r3, r2, r3
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	e004      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a0c      	ldr	r2, [pc, #48]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002884:	fb02 f303 	mul.w	r3, r2, r3
 8002888:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	613b      	str	r3, [r7, #16]
      break;
 800288e:	e002      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002890:	4b05      	ldr	r3, [pc, #20]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002892:	613b      	str	r3, [r7, #16]
      break;
 8002894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002896:	693b      	ldr	r3, [r7, #16]
}
 8002898:	4618      	mov	r0, r3
 800289a:	371c      	adds	r7, #28
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	007a1200 	.word	0x007a1200
 80028ac:	0800926c 	.word	0x0800926c
 80028b0:	0800927c 	.word	0x0800927c
 80028b4:	003d0900 	.word	0x003d0900

080028b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028bc:	4b02      	ldr	r3, [pc, #8]	@ (80028c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	20000004 	.word	0x20000004

080028cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028d0:	f7ff fff2 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
 80028d4:	4602      	mov	r2, r0
 80028d6:	4b05      	ldr	r3, [pc, #20]	@ (80028ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	0a1b      	lsrs	r3, r3, #8
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	4903      	ldr	r1, [pc, #12]	@ (80028f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e2:	5ccb      	ldrb	r3, [r1, r3]
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40021000 	.word	0x40021000
 80028f0:	08009264 	.word	0x08009264

080028f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028f8:	f7ff ffde 	bl	80028b8 <HAL_RCC_GetHCLKFreq>
 80028fc:	4602      	mov	r2, r0
 80028fe:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	0adb      	lsrs	r3, r3, #11
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	4903      	ldr	r1, [pc, #12]	@ (8002918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800290a:	5ccb      	ldrb	r3, [r1, r3]
 800290c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002910:	4618      	mov	r0, r3
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000
 8002918:	08009264 	.word	0x08009264

0800291c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002924:	4b0a      	ldr	r3, [pc, #40]	@ (8002950 <RCC_Delay+0x34>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0a      	ldr	r2, [pc, #40]	@ (8002954 <RCC_Delay+0x38>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	0a5b      	lsrs	r3, r3, #9
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	fb02 f303 	mul.w	r3, r2, r3
 8002936:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002938:	bf00      	nop
  }
  while (Delay --);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1e5a      	subs	r2, r3, #1
 800293e:	60fa      	str	r2, [r7, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f9      	bne.n	8002938 <RCC_Delay+0x1c>
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	20000004 	.word	0x20000004
 8002954:	10624dd3 	.word	0x10624dd3

08002958 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e076      	b.n	8002a58 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d108      	bne.n	8002984 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800297a:	d009      	beq.n	8002990 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
 8002982:	e005      	b.n	8002990 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe ff16 	bl	80017dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a14:	ea42 0103 	orr.w	r1, r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	0c1a      	lsrs	r2, r3, #16
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f002 0204 	and.w	r2, r2, #4
 8002a36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	69da      	ldr	r2, [r3, #28]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a70:	f7ff f8b4 	bl	8001bdc <HAL_GetTick>
 8002a74:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d001      	beq.n	8002a8a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
 8002a88:	e12a      	b.n	8002ce0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_SPI_Transmit+0x36>
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e122      	b.n	8002ce0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_SPI_Transmit+0x48>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e11b      	b.n	8002ce0 <HAL_SPI_Transmit+0x280>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	88fa      	ldrh	r2, [r7, #6]
 8002ac8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	88fa      	ldrh	r2, [r7, #6]
 8002ace:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002af6:	d10f      	bne.n	8002b18 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b16:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b22:	2b40      	cmp	r3, #64	@ 0x40
 8002b24:	d007      	beq.n	8002b36 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b3e:	d152      	bne.n	8002be6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_SPI_Transmit+0xee>
 8002b48:	8b7b      	ldrh	r3, [r7, #26]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d145      	bne.n	8002bda <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	881a      	ldrh	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	1c9a      	adds	r2, r3, #2
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b72:	e032      	b.n	8002bda <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d112      	bne.n	8002ba8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	881a      	ldrh	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	1c9a      	adds	r2, r3, #2
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ba6:	e018      	b.n	8002bda <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ba8:	f7ff f818 	bl	8001bdc <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d803      	bhi.n	8002bc0 <HAL_SPI_Transmit+0x160>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbe:	d102      	bne.n	8002bc6 <HAL_SPI_Transmit+0x166>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e082      	b.n	8002ce0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1c7      	bne.n	8002b74 <HAL_SPI_Transmit+0x114>
 8002be4:	e053      	b.n	8002c8e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <HAL_SPI_Transmit+0x194>
 8002bee:	8b7b      	ldrh	r3, [r7, #26]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d147      	bne.n	8002c84 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	330c      	adds	r3, #12
 8002bfe:	7812      	ldrb	r2, [r2, #0]
 8002c00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c1a:	e033      	b.n	8002c84 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d113      	bne.n	8002c52 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	330c      	adds	r3, #12
 8002c34:	7812      	ldrb	r2, [r2, #0]
 8002c36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002c50:	e018      	b.n	8002c84 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c52:	f7fe ffc3 	bl	8001bdc <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d803      	bhi.n	8002c6a <HAL_SPI_Transmit+0x20a>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d102      	bne.n	8002c70 <HAL_SPI_Transmit+0x210>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e02d      	b.n	8002ce0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1c6      	bne.n	8002c1c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	6839      	ldr	r1, [r7, #0]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fa5a 	bl	800314c <SPI_EndRxTxTransaction>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002cde:	2300      	movs	r3, #0
  }
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3720      	adds	r7, #32
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	@ 0x28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cfa:	f7fe ff6f 	bl	8001bdc <HAL_GetTick>
 8002cfe:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d06:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002d0e:	887b      	ldrh	r3, [r7, #2]
 8002d10:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d12:	7ffb      	ldrb	r3, [r7, #31]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d00c      	beq.n	8002d32 <HAL_SPI_TransmitReceive+0x4a>
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d1e:	d106      	bne.n	8002d2e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <HAL_SPI_TransmitReceive+0x46>
 8002d28:	7ffb      	ldrb	r3, [r7, #31]
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d001      	beq.n	8002d32 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e17f      	b.n	8003032 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_SPI_TransmitReceive+0x5c>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_SPI_TransmitReceive+0x5c>
 8002d3e:	887b      	ldrh	r3, [r7, #2]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e174      	b.n	8003032 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_SPI_TransmitReceive+0x6e>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e16d      	b.n	8003032 <HAL_SPI_TransmitReceive+0x34a>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d003      	beq.n	8002d72 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2205      	movs	r2, #5
 8002d6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	887a      	ldrh	r2, [r7, #2]
 8002d82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	887a      	ldrh	r2, [r7, #2]
 8002d88:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	887a      	ldrh	r2, [r7, #2]
 8002d94:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	887a      	ldrh	r2, [r7, #2]
 8002d9a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db2:	2b40      	cmp	r3, #64	@ 0x40
 8002db4:	d007      	beq.n	8002dc6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dce:	d17e      	bne.n	8002ece <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_SPI_TransmitReceive+0xf6>
 8002dd8:	8afb      	ldrh	r3, [r7, #22]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d16c      	bne.n	8002eb8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	881a      	ldrh	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	1c9a      	adds	r2, r3, #2
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e02:	e059      	b.n	8002eb8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d11b      	bne.n	8002e4a <HAL_SPI_TransmitReceive+0x162>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d016      	beq.n	8002e4a <HAL_SPI_TransmitReceive+0x162>
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d113      	bne.n	8002e4a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	881a      	ldrh	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	1c9a      	adds	r2, r3, #2
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d119      	bne.n	8002e8c <HAL_SPI_TransmitReceive+0x1a4>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d014      	beq.n	8002e8c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6c:	b292      	uxth	r2, r2
 8002e6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e74:	1c9a      	adds	r2, r3, #2
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e8c:	f7fe fea6 	bl	8001bdc <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d80d      	bhi.n	8002eb8 <HAL_SPI_TransmitReceive+0x1d0>
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea2:	d009      	beq.n	8002eb8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0bc      	b.n	8003032 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1a0      	bne.n	8002e04 <HAL_SPI_TransmitReceive+0x11c>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d19b      	bne.n	8002e04 <HAL_SPI_TransmitReceive+0x11c>
 8002ecc:	e082      	b.n	8002fd4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_SPI_TransmitReceive+0x1f4>
 8002ed6:	8afb      	ldrh	r3, [r7, #22]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d171      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	7812      	ldrb	r2, [r2, #0]
 8002ee8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f02:	e05d      	b.n	8002fc0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d11c      	bne.n	8002f4c <HAL_SPI_TransmitReceive+0x264>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d017      	beq.n	8002f4c <HAL_SPI_TransmitReceive+0x264>
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d114      	bne.n	8002f4c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	330c      	adds	r3, #12
 8002f2c:	7812      	ldrb	r2, [r2, #0]
 8002f2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d119      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x2a6>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d014      	beq.n	8002f8e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f8e:	f7fe fe25 	bl	8001bdc <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d803      	bhi.n	8002fa6 <HAL_SPI_TransmitReceive+0x2be>
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d102      	bne.n	8002fac <HAL_SPI_TransmitReceive+0x2c4>
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d109      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e038      	b.n	8003032 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d19c      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x21c>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d197      	bne.n	8002f04 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f8b7 	bl	800314c <SPI_EndRxTxTransaction>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e01d      	b.n	8003032 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10a      	bne.n	8003014 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003030:	2300      	movs	r3, #0
  }
}
 8003032:	4618      	mov	r0, r3
 8003034:	3728      	adds	r7, #40	@ 0x28
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	4613      	mov	r3, r2
 800304a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800304c:	f7fe fdc6 	bl	8001bdc <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	4413      	add	r3, r2
 800305a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800305c:	f7fe fdbe 	bl	8001bdc <HAL_GetTick>
 8003060:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003062:	4b39      	ldr	r3, [pc, #228]	@ (8003148 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	015b      	lsls	r3, r3, #5
 8003068:	0d1b      	lsrs	r3, r3, #20
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	fb02 f303 	mul.w	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003072:	e054      	b.n	800311e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d050      	beq.n	800311e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800307c:	f7fe fdae 	bl	8001bdc <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	429a      	cmp	r2, r3
 800308a:	d902      	bls.n	8003092 <SPI_WaitFlagStateUntilTimeout+0x56>
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d13d      	bne.n	800310e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80030a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030aa:	d111      	bne.n	80030d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030b4:	d004      	beq.n	80030c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030be:	d107      	bne.n	80030d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030d8:	d10f      	bne.n	80030fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e017      	b.n	800313e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	3b01      	subs	r3, #1
 800311c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4013      	ands	r3, r2
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	429a      	cmp	r2, r3
 800313a:	d19b      	bne.n	8003074 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000004 	.word	0x20000004

0800314c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af02      	add	r7, sp, #8
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2201      	movs	r2, #1
 8003160:	2102      	movs	r1, #2
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f7ff ff6a 	bl	800303c <SPI_WaitFlagStateUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003172:	f043 0220 	orr.w	r2, r3, #32
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e013      	b.n	80031a6 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2200      	movs	r2, #0
 8003186:	2180      	movs	r1, #128	@ 0x80
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff ff57 	bl	800303c <SPI_WaitFlagStateUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003198:	f043 0220 	orr.w	r2, r3, #32
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e000      	b.n	80031a6 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e042      	b.n	8003246 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d106      	bne.n	80031da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7fe fb4d 	bl	8001874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2224      	movs	r2, #36	@ 0x24
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f972 	bl	80034dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003206:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003216:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003226:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b08a      	sub	sp, #40	@ 0x28
 8003252:	af02      	add	r7, sp, #8
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	4613      	mov	r3, r2
 800325c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b20      	cmp	r3, #32
 800326c:	d175      	bne.n	800335a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HAL_UART_Transmit+0x2c>
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e06e      	b.n	800335c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2221      	movs	r2, #33	@ 0x21
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800328c:	f7fe fca6 	bl	8001bdc <HAL_GetTick>
 8003290:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	88fa      	ldrh	r2, [r7, #6]
 8003296:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	88fa      	ldrh	r2, [r7, #6]
 800329c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032a6:	d108      	bne.n	80032ba <HAL_UART_Transmit+0x6c>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	61bb      	str	r3, [r7, #24]
 80032b8:	e003      	b.n	80032c2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032c2:	e02e      	b.n	8003322 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2200      	movs	r2, #0
 80032cc:	2180      	movs	r1, #128	@ 0x80
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f848 	bl	8003364 <UART_WaitOnFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e03a      	b.n	800335c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10b      	bne.n	8003304 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032fa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	3302      	adds	r3, #2
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	e007      	b.n	8003314 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	781a      	ldrb	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3301      	adds	r3, #1
 8003312:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1cb      	bne.n	80032c4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2200      	movs	r2, #0
 8003334:	2140      	movs	r1, #64	@ 0x40
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f814 	bl	8003364 <UART_WaitOnFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e006      	b.n	800335c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800335a:	2302      	movs	r3, #2
  }
}
 800335c:	4618      	mov	r0, r3
 800335e:	3720      	adds	r7, #32
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003374:	e03b      	b.n	80033ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d037      	beq.n	80033ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337e:	f7fe fc2d 	bl	8001bdc <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	6a3a      	ldr	r2, [r7, #32]
 800338a:	429a      	cmp	r2, r3
 800338c:	d302      	bcc.n	8003394 <UART_WaitOnFlagUntilTimeout+0x30>
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e03a      	b.n	800340e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d023      	beq.n	80033ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b80      	cmp	r3, #128	@ 0x80
 80033aa:	d020      	beq.n	80033ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b40      	cmp	r3, #64	@ 0x40
 80033b0:	d01d      	beq.n	80033ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d116      	bne.n	80033ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f81d 	bl	8003416 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2208      	movs	r2, #8
 80033e0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e00f      	b.n	800340e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4013      	ands	r3, r2
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	bf0c      	ite	eq
 80033fe:	2301      	moveq	r3, #1
 8003400:	2300      	movne	r3, #0
 8003402:	b2db      	uxtb	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	429a      	cmp	r2, r3
 800340a:	d0b4      	beq.n	8003376 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003416:	b480      	push	{r7}
 8003418:	b095      	sub	sp, #84	@ 0x54
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	330c      	adds	r3, #12
 8003424:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800342e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003430:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003434:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	330c      	adds	r3, #12
 800343c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800343e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003440:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003442:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003444:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003446:	e841 2300 	strex	r3, r2, [r1]
 800344a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800344c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1e5      	bne.n	800341e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3314      	adds	r3, #20
 8003458:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	61fb      	str	r3, [r7, #28]
   return(result);
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	64bb      	str	r3, [r7, #72]	@ 0x48
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3314      	adds	r3, #20
 8003470:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003472:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003474:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003478:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800347a:	e841 2300 	strex	r3, r2, [r1]
 800347e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e5      	bne.n	8003452 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	2b01      	cmp	r3, #1
 800348c:	d119      	bne.n	80034c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	330c      	adds	r3, #12
 8003494:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	e853 3f00 	ldrex	r3, [r3]
 800349c:	60bb      	str	r3, [r7, #8]
   return(result);
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f023 0310 	bic.w	r3, r3, #16
 80034a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	330c      	adds	r3, #12
 80034ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034ae:	61ba      	str	r2, [r7, #24]
 80034b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b2:	6979      	ldr	r1, [r7, #20]
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	e841 2300 	strex	r3, r2, [r1]
 80034ba:	613b      	str	r3, [r7, #16]
   return(result);
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1e5      	bne.n	800348e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034d0:	bf00      	nop
 80034d2:	3754      	adds	r7, #84	@ 0x54
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
	...

080034dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003516:	f023 030c 	bic.w	r3, r3, #12
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6812      	ldr	r2, [r2, #0]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	430b      	orrs	r3, r1
 8003522:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a2c      	ldr	r2, [pc, #176]	@ (80035f0 <UART_SetConfig+0x114>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d103      	bne.n	800354c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003544:	f7ff f9d6 	bl	80028f4 <HAL_RCC_GetPCLK2Freq>
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	e002      	b.n	8003552 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800354c:	f7ff f9be 	bl	80028cc <HAL_RCC_GetPCLK1Freq>
 8003550:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009a      	lsls	r2, r3, #2
 800355c:	441a      	add	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	4a22      	ldr	r2, [pc, #136]	@ (80035f4 <UART_SetConfig+0x118>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	0119      	lsls	r1, r3, #4
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	009a      	lsls	r2, r3, #2
 800357c:	441a      	add	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	fbb2 f2f3 	udiv	r2, r2, r3
 8003588:	4b1a      	ldr	r3, [pc, #104]	@ (80035f4 <UART_SetConfig+0x118>)
 800358a:	fba3 0302 	umull	r0, r3, r3, r2
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	2064      	movs	r0, #100	@ 0x64
 8003592:	fb00 f303 	mul.w	r3, r0, r3
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	3332      	adds	r3, #50	@ 0x32
 800359c:	4a15      	ldr	r2, [pc, #84]	@ (80035f4 <UART_SetConfig+0x118>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035a8:	4419      	add	r1, r3
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009a      	lsls	r2, r3, #2
 80035b4:	441a      	add	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c0:	4b0c      	ldr	r3, [pc, #48]	@ (80035f4 <UART_SetConfig+0x118>)
 80035c2:	fba3 0302 	umull	r0, r3, r3, r2
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	2064      	movs	r0, #100	@ 0x64
 80035ca:	fb00 f303 	mul.w	r3, r0, r3
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	3332      	adds	r3, #50	@ 0x32
 80035d4:	4a07      	ldr	r2, [pc, #28]	@ (80035f4 <UART_SetConfig+0x118>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	f003 020f 	and.w	r2, r3, #15
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	440a      	add	r2, r1
 80035e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40013800 	.word	0x40013800
 80035f4:	51eb851f 	.word	0x51eb851f

080035f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80035fc:	4904      	ldr	r1, [pc, #16]	@ (8003610 <MX_FATFS_Init+0x18>)
 80035fe:	4805      	ldr	r0, [pc, #20]	@ (8003614 <MX_FATFS_Init+0x1c>)
 8003600:	f003 feae 	bl	8007360 <FATFS_LinkDriver>
 8003604:	4603      	mov	r3, r0
 8003606:	461a      	mov	r2, r3
 8003608:	4b03      	ldr	r3, [pc, #12]	@ (8003618 <MX_FATFS_Init+0x20>)
 800360a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800360c:	bf00      	nop
 800360e:	bd80      	pop	{r7, pc}
 8003610:	20000150 	.word	0x20000150
 8003614:	20000010 	.word	0x20000010
 8003618:	2000014c 	.word	0x2000014c

0800361c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003620:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003622:	4618      	mov	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	4603      	mov	r3, r0
 8003632:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return SD_disk_initialize(pdrv);
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fc ff6c 	bl	8000514 <SD_disk_initialize>
 800363c:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return SD_disk_status(pdrv);
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fd f844 	bl	80006e0 <SD_disk_status>
 8003658:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b084      	sub	sp, #16
 8003666:	af00      	add	r7, sp, #0
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	4603      	mov	r3, r0
 8003670:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return SD_disk_read(pdrv, buff, sector, count);
 8003672:	7bf8      	ldrb	r0, [r7, #15]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	f7fd f845 	bl	8000708 <SD_disk_read>
 800367e:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	4603      	mov	r3, r0
 8003696:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return SD_disk_write(pdrv, buff, sector, count);
 8003698:	7bf8      	ldrb	r0, [r7, #15]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	f7fd f89c 	bl	80007dc <SD_disk_write>
 80036a4:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	4603      	mov	r3, r0
 80036b6:	603a      	str	r2, [r7, #0]
 80036b8:	71fb      	strb	r3, [r7, #7]
 80036ba:	460b      	mov	r3, r1
 80036bc:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return SD_disk_ioctl(pdrv, cmd, buff);
 80036be:	79b9      	ldrb	r1, [r7, #6]
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fd f90d 	bl	80008e4 <SD_disk_ioctl>
 80036ca:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	4a08      	ldr	r2, [pc, #32]	@ (8003704 <disk_status+0x30>)
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	79fa      	ldrb	r2, [r7, #7]
 80036ec:	4905      	ldr	r1, [pc, #20]	@ (8003704 <disk_status+0x30>)
 80036ee:	440a      	add	r2, r1
 80036f0:	7a12      	ldrb	r2, [r2, #8]
 80036f2:	4610      	mov	r0, r2
 80036f4:	4798      	blx	r3
 80036f6:	4603      	mov	r3, r0
 80036f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000374 	.word	0x20000374

08003708 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	4a0d      	ldr	r2, [pc, #52]	@ (8003750 <disk_initialize+0x48>)
 800371a:	5cd3      	ldrb	r3, [r2, r3]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d111      	bne.n	8003744 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	4a0b      	ldr	r2, [pc, #44]	@ (8003750 <disk_initialize+0x48>)
 8003724:	2101      	movs	r1, #1
 8003726:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	4a09      	ldr	r2, [pc, #36]	@ (8003750 <disk_initialize+0x48>)
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	79fa      	ldrb	r2, [r7, #7]
 8003736:	4906      	ldr	r1, [pc, #24]	@ (8003750 <disk_initialize+0x48>)
 8003738:	440a      	add	r2, r1
 800373a:	7a12      	ldrb	r2, [r2, #8]
 800373c:	4610      	mov	r0, r2
 800373e:	4798      	blx	r3
 8003740:	4603      	mov	r3, r0
 8003742:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003744:	7bfb      	ldrb	r3, [r7, #15]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000374 	.word	0x20000374

08003754 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003754:	b590      	push	{r4, r7, lr}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	4603      	mov	r3, r0
 8003762:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003764:	7bfb      	ldrb	r3, [r7, #15]
 8003766:	4a0a      	ldr	r2, [pc, #40]	@ (8003790 <disk_read+0x3c>)
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	689c      	ldr	r4, [r3, #8]
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	4a07      	ldr	r2, [pc, #28]	@ (8003790 <disk_read+0x3c>)
 8003774:	4413      	add	r3, r2
 8003776:	7a18      	ldrb	r0, [r3, #8]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	47a0      	blx	r4
 8003780:	4603      	mov	r3, r0
 8003782:	75fb      	strb	r3, [r7, #23]
  return res;
 8003784:	7dfb      	ldrb	r3, [r7, #23]
}
 8003786:	4618      	mov	r0, r3
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	bd90      	pop	{r4, r7, pc}
 800378e:	bf00      	nop
 8003790:	20000374 	.word	0x20000374

08003794 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	4603      	mov	r3, r0
 80037a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	4a0a      	ldr	r2, [pc, #40]	@ (80037d0 <disk_write+0x3c>)
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	68dc      	ldr	r4, [r3, #12]
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	4a07      	ldr	r2, [pc, #28]	@ (80037d0 <disk_write+0x3c>)
 80037b4:	4413      	add	r3, r2
 80037b6:	7a18      	ldrb	r0, [r3, #8]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	47a0      	blx	r4
 80037c0:	4603      	mov	r3, r0
 80037c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80037c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd90      	pop	{r4, r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000374 	.word	0x20000374

080037d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	603a      	str	r2, [r7, #0]
 80037de:	71fb      	strb	r3, [r7, #7]
 80037e0:	460b      	mov	r3, r1
 80037e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	4a09      	ldr	r2, [pc, #36]	@ (800380c <disk_ioctl+0x38>)
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	79fa      	ldrb	r2, [r7, #7]
 80037f2:	4906      	ldr	r1, [pc, #24]	@ (800380c <disk_ioctl+0x38>)
 80037f4:	440a      	add	r2, r1
 80037f6:	7a10      	ldrb	r0, [r2, #8]
 80037f8:	79b9      	ldrb	r1, [r7, #6]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	4798      	blx	r3
 80037fe:	4603      	mov	r3, r0
 8003800:	73fb      	strb	r3, [r7, #15]
  return res;
 8003802:	7bfb      	ldrb	r3, [r7, #15]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20000374 	.word	0x20000374

08003810 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003824:	e007      	b.n	8003836 <mem_cpy+0x26>
		*d++ = *s++;
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	1c53      	adds	r3, r2, #1
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	1c59      	adds	r1, r3, #1
 8003830:	6179      	str	r1, [r7, #20]
 8003832:	7812      	ldrb	r2, [r2, #0]
 8003834:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	1e5a      	subs	r2, r3, #1
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f2      	bne.n	8003826 <mem_cpy+0x16>
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	371c      	adds	r7, #28
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800385c:	e005      	b.n	800386a <mem_set+0x1e>
		*d++ = (BYTE)val;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	617a      	str	r2, [r7, #20]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	1e5a      	subs	r2, r3, #1
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f4      	bne.n	800385e <mem_set+0x12>
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr

08003880 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003880:	b480      	push	{r7}
 8003882:	b089      	sub	sp, #36	@ 0x24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	61fb      	str	r3, [r7, #28]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003898:	bf00      	nop
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	1e5a      	subs	r2, r3, #1
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00d      	beq.n	80038c0 <mem_cmp+0x40>
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	61fa      	str	r2, [r7, #28]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	4619      	mov	r1, r3
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	61ba      	str	r2, [r7, #24]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	1acb      	subs	r3, r1, r3
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ec      	beq.n	800389a <mem_cmp+0x1a>
	return r;
 80038c0:	697b      	ldr	r3, [r7, #20]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3724      	adds	r7, #36	@ 0x24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80038d6:	e002      	b.n	80038de <chk_chr+0x12>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3301      	adds	r3, #1
 80038dc:	607b      	str	r3, [r7, #4]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <chk_chr+0x26>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d1f2      	bne.n	80038d8 <chk_chr+0xc>
	return *str;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	781b      	ldrb	r3, [r3, #0]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e03b      	b.n	800398c <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8003914:	4931      	ldr	r1, [pc, #196]	@ (80039dc <chk_lock+0xdc>)
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4613      	mov	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d02c      	beq.n	8003982 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003928:	492c      	ldr	r1, [pc, #176]	@ (80039dc <chk_lock+0xdc>)
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4613      	mov	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d120      	bne.n	8003986 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8003944:	4925      	ldr	r1, [pc, #148]	@ (80039dc <chk_lock+0xdc>)
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4613      	mov	r3, r2
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	3304      	adds	r3, #4
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800395c:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800395e:	429a      	cmp	r2, r3
 8003960:	d111      	bne.n	8003986 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8003962:	491e      	ldr	r1, [pc, #120]	@ (80039dc <chk_lock+0xdc>)
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4613      	mov	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	3308      	adds	r3, #8
 8003972:	881a      	ldrh	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800397a:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 800397c:	429a      	cmp	r2, r3
 800397e:	d102      	bne.n	8003986 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8003980:	e007      	b.n	8003992 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8003982:	2301      	movs	r3, #1
 8003984:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3301      	adds	r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d9c0      	bls.n	8003914 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d109      	bne.n	80039ac <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <chk_lock+0xa4>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d101      	bne.n	80039a8 <chk_lock+0xa8>
 80039a4:	2300      	movs	r3, #0
 80039a6:	e013      	b.n	80039d0 <chk_lock+0xd0>
 80039a8:	2312      	movs	r3, #18
 80039aa:	e011      	b.n	80039d0 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10b      	bne.n	80039ca <chk_lock+0xca>
 80039b2:	490a      	ldr	r1, [pc, #40]	@ (80039dc <chk_lock+0xdc>)
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4613      	mov	r3, r2
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	330a      	adds	r3, #10
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039c8:	d101      	bne.n	80039ce <chk_lock+0xce>
 80039ca:	2310      	movs	r3, #16
 80039cc:	e000      	b.n	80039d0 <chk_lock+0xd0>
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	2000015c 	.word	0x2000015c

080039e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80039e6:	2300      	movs	r3, #0
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	e002      	b.n	80039f2 <enq_lock+0x12>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3301      	adds	r3, #1
 80039f0:	607b      	str	r3, [r7, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d809      	bhi.n	8003a0c <enq_lock+0x2c>
 80039f8:	490a      	ldr	r1, [pc, #40]	@ (8003a24 <enq_lock+0x44>)
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1ef      	bne.n	80039ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	2000015c 	.word	0x2000015c

08003a28 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	e02e      	b.n	8003a96 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8003a38:	4958      	ldr	r1, [pc, #352]	@ (8003b9c <inc_lock+0x174>)
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d11d      	bne.n	8003a90 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8003a54:	4951      	ldr	r1, [pc, #324]	@ (8003b9c <inc_lock+0x174>)
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	3304      	adds	r3, #4
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a6c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d10e      	bne.n	8003a90 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8003a72:	494a      	ldr	r1, [pc, #296]	@ (8003b9c <inc_lock+0x174>)
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	3308      	adds	r3, #8
 8003a82:	881a      	ldrh	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a8a:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d006      	beq.n	8003a9e <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	3301      	adds	r3, #1
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d9cd      	bls.n	8003a38 <inc_lock+0x10>
 8003a9c:	e000      	b.n	8003aa0 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8003a9e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d148      	bne.n	8003b38 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	e002      	b.n	8003ab2 <inc_lock+0x8a>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d809      	bhi.n	8003acc <inc_lock+0xa4>
 8003ab8:	4938      	ldr	r1, [pc, #224]	@ (8003b9c <inc_lock+0x174>)
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4613      	mov	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1ef      	bne.n	8003aac <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d101      	bne.n	8003ad6 <inc_lock+0xae>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e05d      	b.n	8003b92 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003adc:	6819      	ldr	r1, [r3, #0]
 8003ade:	482f      	ldr	r0, [pc, #188]	@ (8003b9c <inc_lock+0x174>)
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4403      	add	r3, r0
 8003aec:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003af4:	6899      	ldr	r1, [r3, #8]
 8003af6:	4829      	ldr	r0, [pc, #164]	@ (8003b9c <inc_lock+0x174>)
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4613      	mov	r3, r2
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4403      	add	r3, r0
 8003b04:	3304      	adds	r3, #4
 8003b06:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b0e:	88d8      	ldrh	r0, [r3, #6]
 8003b10:	4922      	ldr	r1, [pc, #136]	@ (8003b9c <inc_lock+0x174>)
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4613      	mov	r3, r2
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3308      	adds	r3, #8
 8003b20:	4602      	mov	r2, r0
 8003b22:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8003b24:	491d      	ldr	r1, [pc, #116]	@ (8003b9c <inc_lock+0x174>)
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	330a      	adds	r3, #10
 8003b34:	2200      	movs	r2, #0
 8003b36:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00c      	beq.n	8003b58 <inc_lock+0x130>
 8003b3e:	4917      	ldr	r1, [pc, #92]	@ (8003b9c <inc_lock+0x174>)
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4613      	mov	r3, r2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	330a      	adds	r3, #10
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <inc_lock+0x130>
 8003b54:	2300      	movs	r3, #0
 8003b56:	e01c      	b.n	8003b92 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10b      	bne.n	8003b76 <inc_lock+0x14e>
 8003b5e:	490f      	ldr	r1, [pc, #60]	@ (8003b9c <inc_lock+0x174>)
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4613      	mov	r3, r2
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	330a      	adds	r3, #10
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	3301      	adds	r3, #1
 8003b72:	b299      	uxth	r1, r3
 8003b74:	e001      	b.n	8003b7a <inc_lock+0x152>
 8003b76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b7a:	4808      	ldr	r0, [pc, #32]	@ (8003b9c <inc_lock+0x174>)
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4403      	add	r3, r0
 8003b88:	330a      	adds	r3, #10
 8003b8a:	460a      	mov	r2, r1
 8003b8c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3301      	adds	r3, #1
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr
 8003b9c:	2000015c 	.word	0x2000015c

08003ba0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d82e      	bhi.n	8003c12 <dec_lock+0x72>
		n = Files[i].ctr;
 8003bb4:	491b      	ldr	r1, [pc, #108]	@ (8003c24 <dec_lock+0x84>)
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	330a      	adds	r3, #10
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003bc8:	89fb      	ldrh	r3, [r7, #14]
 8003bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bce:	d101      	bne.n	8003bd4 <dec_lock+0x34>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8003bd4:	89fb      	ldrh	r3, [r7, #14]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <dec_lock+0x40>
 8003bda:	89fb      	ldrh	r3, [r7, #14]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003be0:	4910      	ldr	r1, [pc, #64]	@ (8003c24 <dec_lock+0x84>)
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	330a      	adds	r3, #10
 8003bf0:	89fa      	ldrh	r2, [r7, #14]
 8003bf2:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003bf4:	89fb      	ldrh	r3, [r7, #14]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d108      	bne.n	8003c0c <dec_lock+0x6c>
 8003bfa:	490a      	ldr	r1, [pc, #40]	@ (8003c24 <dec_lock+0x84>)
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	737b      	strb	r3, [r7, #13]
 8003c10:	e001      	b.n	8003c16 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003c12:	2302      	movs	r3, #2
 8003c14:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003c16:	7b7b      	ldrb	r3, [r7, #13]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	2000015c 	.word	0x2000015c

08003c28 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	e016      	b.n	8003c64 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003c36:	4910      	ldr	r1, [pc, #64]	@ (8003c78 <clear_lock+0x50>)
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d108      	bne.n	8003c5e <clear_lock+0x36>
 8003c4c:	490a      	ldr	r1, [pc, #40]	@ (8003c78 <clear_lock+0x50>)
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4613      	mov	r3, r2
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3301      	adds	r3, #1
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d9e5      	bls.n	8003c36 <clear_lock+0xe>
	}
}
 8003c6a:	bf00      	nop
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	2000015c 	.word	0x2000015c

08003c7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c8e:	791b      	ldrb	r3, [r3, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d040      	beq.n	8003d16 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ca4:	7858      	ldrb	r0, [r3, #1]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	2301      	movs	r3, #1
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	f7ff fd72 	bl	8003794 <disk_write>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <sync_window+0x40>
			res = FR_DISK_ERR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
 8003cba:	e02c      	b.n	8003d16 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	1ad2      	subs	r2, r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d21b      	bcs.n	8003d16 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ce4:	78db      	ldrb	r3, [r3, #3]
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	e012      	b.n	8003d10 <sync_window+0x94>
					wsect += fs->fsize;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cfe:	7858      	ldrb	r0, [r3, #1]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	2301      	movs	r3, #1
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	f7ff fd45 	bl	8003794 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d8e9      	bhi.n	8003cea <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d01e      	beq.n	8003d7a <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ff9d 	bl	8003c7c <sync_window>
 8003d42:	4603      	mov	r3, r0
 8003d44:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d116      	bne.n	8003d7a <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d52:	7858      	ldrb	r0, [r3, #1]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	2301      	movs	r3, #1
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	f7ff fcfb 	bl	8003754 <disk_read>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d004      	beq.n	8003d6e <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003d64:	f04f 33ff 	mov.w	r3, #4294967295
 8003d68:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d74:	461a      	mov	r2, r3
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff ff75 	bl	8003c7c <sync_window>
 8003d92:	4603      	mov	r3, r0
 8003d94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f040 80ad 	bne.w	8003ef8 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	f040 8098 	bne.w	8003edc <sync_fs+0x158>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003db2:	795b      	ldrb	r3, [r3, #5]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	f040 8091 	bne.w	8003edc <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dc2:	895b      	ldrh	r3, [r3, #10]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	f7ff fd40 	bl	800384c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2255      	movs	r2, #85	@ 0x55
 8003dd0:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	22aa      	movs	r2, #170	@ 0xaa
 8003dd8:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2252      	movs	r2, #82	@ 0x52
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2252      	movs	r2, #82	@ 0x52
 8003de6:	705a      	strb	r2, [r3, #1]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2261      	movs	r2, #97	@ 0x61
 8003dec:	709a      	strb	r2, [r3, #2]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2241      	movs	r2, #65	@ 0x41
 8003df2:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2272      	movs	r2, #114	@ 0x72
 8003df8:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2272      	movs	r2, #114	@ 0x72
 8003e00:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2241      	movs	r2, #65	@ 0x41
 8003e08:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2261      	movs	r2, #97	@ 0x61
 8003e10:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	0a1b      	lsrs	r3, r3, #8
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	0c1b      	lsrs	r3, r3, #16
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	0e1b      	lsrs	r3, r3, #24
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	0a1b      	lsrs	r3, r3, #8
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	0c1b      	lsrs	r3, r3, #16
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	0e1b      	lsrs	r3, r3, #24
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ec0:	7858      	ldrb	r0, [r3, #1]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ecc:	2301      	movs	r3, #1
 8003ece:	f7ff fc61 	bl	8003794 <disk_write>
			fs->fsi_flag = 0;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ed8:	2200      	movs	r2, #0
 8003eda:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ee2:	785b      	ldrb	r3, [r3, #1]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fc73 	bl	80037d4 <disk_ioctl>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	3b02      	subs	r3, #2
 8003f10:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	3b02      	subs	r3, #2
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d301      	bcc.n	8003f26 <clust2sect+0x24>
 8003f22:	2300      	movs	r3, #0
 8003f24:	e00c      	b.n	8003f40 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f2c:	789b      	ldrb	r3, [r3, #2]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	fb03 f202 	mul.w	r2, r3, r2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3e:	4413      	add	r3, r2
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b086      	sub	sp, #24
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d906      	bls.n	8003f68 <get_fat+0x1e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d302      	bcc.n	8003f6e <get_fat+0x24>
		val = 1;	/* Internal error */
 8003f68:	2301      	movs	r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	e0e4      	b.n	8004138 <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f72:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	f000 8098 	beq.w	80040b2 <get_fat+0x168>
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	f300 80ce 	bgt.w	8004124 <get_fat+0x1da>
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d002      	beq.n	8003f92 <get_fat+0x48>
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d05e      	beq.n	800404e <get_fat+0x104>
 8003f90:	e0c8      	b.n	8004124 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fa6:	6a1a      	ldr	r2, [r3, #32]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fae:	895b      	ldrh	r3, [r3, #10]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fb8:	4413      	add	r3, r2
 8003fba:	4619      	mov	r1, r3
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff feaf 	bl	8003d20 <move_window>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f040 80b0 	bne.w	800412a <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	60fa      	str	r2, [r7, #12]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fd6:	8952      	ldrh	r2, [r2, #10]
 8003fd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fdc:	fb01 f202 	mul.w	r2, r1, r2
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	5cd3      	ldrb	r3, [r2, r3]
 8003fe6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fee:	6a1a      	ldr	r2, [r3, #32]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ff6:	895b      	ldrh	r3, [r3, #10]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	fbb3 f3f1 	udiv	r3, r3, r1
 8004000:	4413      	add	r3, r2
 8004002:	4619      	mov	r1, r3
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fe8b 	bl	8003d20 <move_window>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	f040 808e 	bne.w	800412e <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004018:	895b      	ldrh	r3, [r3, #10]
 800401a:	461a      	mov	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004022:	fb01 f202 	mul.w	r2, r1, r2
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	5cd3      	ldrb	r3, [r2, r3]
 800402c:	021b      	lsls	r3, r3, #8
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	4313      	orrs	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <get_fat+0xfa>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	091b      	lsrs	r3, r3, #4
 8004042:	e002      	b.n	800404a <get_fat+0x100>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404a:	617b      	str	r3, [r7, #20]
			break;
 800404c:	e074      	b.n	8004138 <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004054:	6a1a      	ldr	r2, [r3, #32]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800405c:	895b      	ldrh	r3, [r3, #10]
 800405e:	085b      	lsrs	r3, r3, #1
 8004060:	b29b      	uxth	r3, r3
 8004062:	4619      	mov	r1, r3
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	fbb3 f3f1 	udiv	r3, r3, r1
 800406a:	4413      	add	r3, r2
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff fe56 	bl	8003d20 <move_window>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d15b      	bne.n	8004132 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004084:	8952      	ldrh	r2, [r2, #10]
 8004086:	fbb3 f1f2 	udiv	r1, r3, r2
 800408a:	fb01 f202 	mul.w	r2, r1, r2
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	4413      	add	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	3301      	adds	r3, #1
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	b21b      	sxth	r3, r3
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	b21a      	sxth	r2, r3
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	b21b      	sxth	r3, r3
 80040a8:	4313      	orrs	r3, r2
 80040aa:	b21b      	sxth	r3, r3
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	617b      	str	r3, [r7, #20]
			break;
 80040b0:	e042      	b.n	8004138 <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040b8:	6a1a      	ldr	r2, [r3, #32]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040c0:	895b      	ldrh	r3, [r3, #10]
 80040c2:	089b      	lsrs	r3, r3, #2
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	4619      	mov	r1, r3
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ce:	4413      	add	r3, r2
 80040d0:	4619      	mov	r1, r3
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff fe24 	bl	8003d20 <move_window>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d12b      	bne.n	8004136 <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80040e8:	8952      	ldrh	r2, [r2, #10]
 80040ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80040ee:	fb01 f202 	mul.w	r2, r1, r2
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4413      	add	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	3303      	adds	r3, #3
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	061a      	lsls	r2, r3, #24
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	3302      	adds	r3, #2
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	041b      	lsls	r3, r3, #16
 800410a:	431a      	orrs	r2, r3
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	3301      	adds	r3, #1
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	4313      	orrs	r3, r2
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	7812      	ldrb	r2, [r2, #0]
 800411a:	4313      	orrs	r3, r2
 800411c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004120:	617b      	str	r3, [r7, #20]
			break;
 8004122:	e009      	b.n	8004138 <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8004124:	2301      	movs	r3, #1
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	e006      	b.n	8004138 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800412a:	bf00      	nop
 800412c:	e004      	b.n	8004138 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800412e:	bf00      	nop
 8004130:	e002      	b.n	8004138 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004132:	bf00      	nop
 8004134:	e000      	b.n	8004138 <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004136:	bf00      	nop
		}
	}

	return val;
 8004138:	697b      	ldr	r3, [r7, #20]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b088      	sub	sp, #32
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d906      	bls.n	8004162 <put_fat+0x20>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	429a      	cmp	r2, r3
 8004160:	d302      	bcc.n	8004168 <put_fat+0x26>
		res = FR_INT_ERR;
 8004162:	2302      	movs	r3, #2
 8004164:	77fb      	strb	r3, [r7, #31]
 8004166:	e13a      	b.n	80043de <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b03      	cmp	r3, #3
 8004172:	f000 80d0 	beq.w	8004316 <put_fat+0x1d4>
 8004176:	2b03      	cmp	r3, #3
 8004178:	f300 8127 	bgt.w	80043ca <put_fat+0x288>
 800417c:	2b01      	cmp	r3, #1
 800417e:	d003      	beq.n	8004188 <put_fat+0x46>
 8004180:	2b02      	cmp	r3, #2
 8004182:	f000 808f 	beq.w	80042a4 <put_fat+0x162>
 8004186:	e120      	b.n	80043ca <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	085b      	lsrs	r3, r3, #1
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4413      	add	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800419c:	6a1a      	ldr	r2, [r3, #32]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041a4:	895b      	ldrh	r3, [r3, #10]
 80041a6:	4619      	mov	r1, r3
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80041ae:	4413      	add	r3, r2
 80041b0:	4619      	mov	r1, r3
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f7ff fdb4 	bl	8003d20 <move_window>
 80041b8:	4603      	mov	r3, r0
 80041ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80041bc:	7ffb      	ldrb	r3, [r7, #31]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f040 8106 	bne.w	80043d0 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	617a      	str	r2, [r7, #20]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80041d0:	8952      	ldrh	r2, [r2, #10]
 80041d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80041d6:	fb01 f202 	mul.w	r2, r1, r2
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4413      	add	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00d      	beq.n	8004208 <put_fat+0xc6>
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	b25b      	sxtb	r3, r3
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	b25a      	sxtb	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	b25b      	sxtb	r3, r3
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	b25b      	sxtb	r3, r3
 8004200:	4313      	orrs	r3, r2
 8004202:	b25b      	sxtb	r3, r3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	e001      	b.n	800420c <put_fat+0xca>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004216:	2201      	movs	r2, #1
 8004218:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004220:	6a1a      	ldr	r2, [r3, #32]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004228:	895b      	ldrh	r3, [r3, #10]
 800422a:	4619      	mov	r1, r3
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004232:	4413      	add	r3, r2
 8004234:	4619      	mov	r1, r3
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f7ff fd72 	bl	8003d20 <move_window>
 800423c:	4603      	mov	r3, r0
 800423e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004240:	7ffb      	ldrb	r3, [r7, #31]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f040 80c6 	bne.w	80043d4 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800424e:	895b      	ldrh	r3, [r3, #10]
 8004250:	461a      	mov	r2, r3
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	fbb3 f1f2 	udiv	r1, r3, r2
 8004258:	fb01 f202 	mul.w	r2, r1, r2
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4413      	add	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <put_fat+0x134>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	b2db      	uxtb	r3, r3
 8004274:	e00e      	b.n	8004294 <put_fat+0x152>
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	b25b      	sxtb	r3, r3
 800427c:	f023 030f 	bic.w	r3, r3, #15
 8004280:	b25a      	sxtb	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	0a1b      	lsrs	r3, r3, #8
 8004286:	b25b      	sxtb	r3, r3
 8004288:	f003 030f 	and.w	r3, r3, #15
 800428c:	b25b      	sxtb	r3, r3
 800428e:	4313      	orrs	r3, r2
 8004290:	b25b      	sxtb	r3, r3
 8004292:	b2db      	uxtb	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800429e:	2201      	movs	r2, #1
 80042a0:	711a      	strb	r2, [r3, #4]
			break;
 80042a2:	e09c      	b.n	80043de <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042aa:	6a1a      	ldr	r2, [r3, #32]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042b2:	895b      	ldrh	r3, [r3, #10]
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	4619      	mov	r1, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80042c0:	4413      	add	r3, r2
 80042c2:	4619      	mov	r1, r3
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f7ff fd2b 	bl	8003d20 <move_window>
 80042ca:	4603      	mov	r3, r0
 80042cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80042ce:	7ffb      	ldrb	r3, [r7, #31]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f040 8081 	bne.w	80043d8 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042e0:	8952      	ldrh	r2, [r2, #10]
 80042e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80042e6:	fb01 f202 	mul.w	r2, r1, r2
 80042ea:	1a9b      	subs	r3, r3, r2
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	b29a      	uxth	r2, r3
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	3301      	adds	r3, #1
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004310:	2201      	movs	r2, #1
 8004312:	711a      	strb	r2, [r3, #4]
			break;
 8004314:	e063      	b.n	80043de <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800431c:	6a1a      	ldr	r2, [r3, #32]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004324:	895b      	ldrh	r3, [r3, #10]
 8004326:	089b      	lsrs	r3, r3, #2
 8004328:	b29b      	uxth	r3, r3
 800432a:	4619      	mov	r1, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004332:	4413      	add	r3, r2
 8004334:	4619      	mov	r1, r3
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7ff fcf2 	bl	8003d20 <move_window>
 800433c:	4603      	mov	r3, r0
 800433e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004340:	7ffb      	ldrb	r3, [r7, #31]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d14a      	bne.n	80043dc <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004350:	8952      	ldrh	r2, [r2, #10]
 8004352:	fbb3 f1f2 	udiv	r1, r3, r2
 8004356:	fb01 f202 	mul.w	r2, r1, r2
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4413      	add	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	3303      	adds	r3, #3
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	061a      	lsls	r2, r3, #24
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	3302      	adds	r3, #2
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	041b      	lsls	r3, r3, #16
 8004372:	431a      	orrs	r2, r3
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	3301      	adds	r3, #1
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	4313      	orrs	r3, r2
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	7812      	ldrb	r2, [r2, #0]
 8004382:	4313      	orrs	r3, r2
 8004384:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4313      	orrs	r3, r2
 800438c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	b2da      	uxtb	r2, r3
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	701a      	strb	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	b29b      	uxth	r3, r3
 800439a:	0a1b      	lsrs	r3, r3, #8
 800439c:	b29a      	uxth	r2, r3
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	3301      	adds	r3, #1
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	0c1a      	lsrs	r2, r3, #16
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	3302      	adds	r3, #2
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	0e1a      	lsrs	r2, r3, #24
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	3303      	adds	r3, #3
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043c4:	2201      	movs	r2, #1
 80043c6:	711a      	strb	r2, [r3, #4]
			break;
 80043c8:	e009      	b.n	80043de <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 80043ca:	2302      	movs	r3, #2
 80043cc:	77fb      	strb	r3, [r7, #31]
 80043ce:	e006      	b.n	80043de <put_fat+0x29c>
			if (res != FR_OK) break;
 80043d0:	bf00      	nop
 80043d2:	e004      	b.n	80043de <put_fat+0x29c>
			if (res != FR_OK) break;
 80043d4:	bf00      	nop
 80043d6:	e002      	b.n	80043de <put_fat+0x29c>
			if (res != FR_OK) break;
 80043d8:	bf00      	nop
 80043da:	e000      	b.n	80043de <put_fat+0x29c>
			if (res != FR_OK) break;
 80043dc:	bf00      	nop
		}
	}

	return res;
 80043de:	7ffb      	ldrb	r3, [r7, #31]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d906      	bls.n	8004406 <remove_chain+0x1e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d302      	bcc.n	800440c <remove_chain+0x24>
		res = FR_INT_ERR;
 8004406:	2302      	movs	r3, #2
 8004408:	73fb      	strb	r3, [r7, #15]
 800440a:	e049      	b.n	80044a0 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004410:	e03b      	b.n	800448a <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004412:	6839      	ldr	r1, [r7, #0]
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7ff fd98 	bl	8003f4a <get_fat>
 800441a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d03b      	beq.n	800449a <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d102      	bne.n	800442e <remove_chain+0x46>
 8004428:	2302      	movs	r3, #2
 800442a:	73fb      	strb	r3, [r7, #15]
 800442c:	e038      	b.n	80044a0 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d102      	bne.n	800443c <remove_chain+0x54>
 8004436:	2301      	movs	r3, #1
 8004438:	73fb      	strb	r3, [r7, #15]
 800443a:	e031      	b.n	80044a0 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800443c:	2200      	movs	r2, #0
 800443e:	6839      	ldr	r1, [r7, #0]
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff fe7e 	bl	8004142 <put_fat>
 8004446:	4603      	mov	r3, r0
 8004448:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d126      	bne.n	800449e <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d013      	beq.n	8004486 <remove_chain+0x9e>
				fs->free_clust++;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	3301      	adds	r3, #1
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800446e:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004476:	795b      	ldrb	r3, [r3, #5]
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	b2da      	uxtb	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004484:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d3bc      	bcc.n	8004412 <remove_chain+0x2a>
 8004498:	e002      	b.n	80044a0 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 800449a:	bf00      	nop
 800449c:	e000      	b.n	80044a0 <remove_chain+0xb8>
			if (res != FR_OK) break;
 800449e:	bf00      	nop
		}
	}

	return res;
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b086      	sub	sp, #24
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d111      	bne.n	80044de <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d006      	beq.n	80044d8 <create_chain+0x2e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d31d      	bcc.n	8004514 <create_chain+0x6a>
 80044d8:	2301      	movs	r3, #1
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	e01a      	b.n	8004514 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80044de:	6839      	ldr	r1, [r7, #0]
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff fd32 	bl	8003f4a <get_fat>
 80044e6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d801      	bhi.n	80044f2 <create_chain+0x48>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e07f      	b.n	80045f2 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f8:	d101      	bne.n	80044fe <create_chain+0x54>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	e079      	b.n	80045f2 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	429a      	cmp	r2, r3
 800450a:	d201      	bcs.n	8004510 <create_chain+0x66>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	e070      	b.n	80045f2 <create_chain+0x148>
		scl = clst;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	3301      	adds	r3, #1
 800451c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	429a      	cmp	r2, r3
 800452a:	d307      	bcc.n	800453c <create_chain+0x92>
			ncl = 2;
 800452c:	2302      	movs	r3, #2
 800452e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	429a      	cmp	r2, r3
 8004536:	d901      	bls.n	800453c <create_chain+0x92>
 8004538:	2300      	movs	r3, #0
 800453a:	e05a      	b.n	80045f2 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800453c:	6979      	ldr	r1, [r7, #20]
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff fd03 	bl	8003f4a <get_fat>
 8004544:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00e      	beq.n	800456a <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004552:	d002      	beq.n	800455a <create_chain+0xb0>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <create_chain+0xb4>
			return cs;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	e049      	b.n	80045f2 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	429a      	cmp	r2, r3
 8004564:	d1d8      	bne.n	8004518 <create_chain+0x6e>
 8004566:	2300      	movs	r3, #0
 8004568:	e043      	b.n	80045f2 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 800456a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800456c:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8004570:	6979      	ldr	r1, [r7, #20]
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff fde5 	bl	8004142 <put_fat>
 8004578:	4603      	mov	r3, r0
 800457a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <create_chain+0xec>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d006      	beq.n	8004596 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	6839      	ldr	r1, [r7, #0]
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff fdd8 	bl	8004142 <put_fat>
 8004592:	4603      	mov	r3, r0
 8004594:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d121      	bne.n	80045e0 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045a2:	461a      	mov	r2, r3
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b4:	d01c      	beq.n	80045f0 <create_chain+0x146>
			fs->free_clust--;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	3b01      	subs	r3, #1
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045c6:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ce:	795b      	ldrb	r3, [r3, #5]
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045dc:	715a      	strb	r2, [r3, #5]
 80045de:	e007      	b.n	80045f0 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d102      	bne.n	80045ec <create_chain+0x142>
 80045e6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ea:	e000      	b.n	80045ee <create_chain+0x144>
 80045ec:	2301      	movs	r3, #1
 80045ee:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80045f0:	697b      	ldr	r3, [r7, #20]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b087      	sub	sp, #28
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	3304      	adds	r3, #4
 800460e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800461c:	895b      	ldrh	r3, [r3, #10]
 800461e:	461a      	mov	r2, r3
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	fbb3 f3f2 	udiv	r3, r3, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004632:	7892      	ldrb	r2, [r2, #2]
 8004634:	fbb3 f3f2 	udiv	r3, r3, r2
 8004638:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1d1a      	adds	r2, r3, #4
 800463e:	613a      	str	r2, [r7, #16]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <clmt_clust+0x54>
 800464a:	2300      	movs	r3, #0
 800464c:	e010      	b.n	8004670 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	429a      	cmp	r2, r3
 8004654:	d307      	bcc.n	8004666 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	3304      	adds	r3, #4
 8004662:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004664:	e7e9      	b.n	800463a <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8004666:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	4413      	add	r3, r2
}
 8004670:	4618      	mov	r0, r3
 8004672:	371c      	adds	r7, #28
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr

0800467a <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b086      	sub	sp, #24
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	b29a      	uxth	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800468e:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d009      	beq.n	80046b4 <dir_sdi+0x3a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d301      	bcc.n	80046b8 <dir_sdi+0x3e>
		return FR_INT_ERR;
 80046b4:	2302      	movs	r3, #2
 80046b6:	e0aa      	b.n	800480e <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d110      	bne.n	80046e0 <dir_sdi+0x66>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d107      	bne.n	80046e0 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046de:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d115      	bne.n	8004712 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046f2:	891b      	ldrh	r3, [r3, #8]
 80046f4:	461a      	mov	r2, r3
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d301      	bcc.n	8004700 <dir_sdi+0x86>
			return FR_INT_ERR;
 80046fc:	2302      	movs	r3, #2
 80046fe:	e086      	b.n	800480e <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	e043      	b.n	800479a <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800471e:	895b      	ldrh	r3, [r3, #10]
 8004720:	095b      	lsrs	r3, r3, #5
 8004722:	b29b      	uxth	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004732:	789b      	ldrb	r3, [r3, #2]
 8004734:	fb02 f303 	mul.w	r3, r2, r3
 8004738:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800473a:	e021      	b.n	8004780 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6979      	ldr	r1, [r7, #20]
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff fbff 	bl	8003f4a <get_fat>
 800474c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d101      	bne.n	800475a <dir_sdi+0xe0>
 8004756:	2301      	movs	r3, #1
 8004758:	e059      	b.n	800480e <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d909      	bls.n	8004774 <dir_sdi+0xfa>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	429a      	cmp	r2, r3
 8004772:	d301      	bcc.n	8004778 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8004774:	2302      	movs	r3, #2
 8004776:	e04a      	b.n	800480e <dir_sdi+0x194>
			idx -= ic;
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	429a      	cmp	r2, r3
 8004786:	d2d9      	bcs.n	800473c <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6979      	ldr	r1, [r7, #20]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fbb5 	bl	8003f02 <clust2sect>
 8004798:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047a0:	461a      	mov	r2, r3
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <dir_sdi+0x136>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e02e      	b.n	800480e <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047bc:	895b      	ldrh	r3, [r3, #10]
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	4413      	add	r3, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80047d4:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047ec:	895b      	ldrh	r3, [r3, #10]
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80047fa:	fb01 f202 	mul.w	r2, r1, r2
 80047fe:	1a9b      	subs	r3, r3, r2
 8004800:	015b      	lsls	r3, r3, #5
 8004802:	4403      	add	r3, r0
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800480a:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004816:	b590      	push	{r4, r7, lr}
 8004818:	b087      	sub	sp, #28
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004826:	88db      	ldrh	r3, [r3, #6]
 8004828:	3301      	adds	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <dir_next+0x2a>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <dir_next+0x2e>
		return FR_NO_FILE;
 8004840:	2304      	movs	r3, #4
 8004842:	e12e      	b.n	8004aa2 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004850:	895b      	ldrh	r3, [r3, #10]
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	b29b      	uxth	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	fbb3 f1f2 	udiv	r1, r3, r2
 800485e:	fb01 f202 	mul.w	r2, r1, r2
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	2b00      	cmp	r3, #0
 8004866:	f040 80fa 	bne.w	8004a5e <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	3301      	adds	r3, #1
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800487a:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10d      	bne.n	80048a4 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004894:	891b      	ldrh	r3, [r3, #8]
 8004896:	461a      	mov	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4293      	cmp	r3, r2
 800489c:	f0c0 80df 	bcc.w	8004a5e <dir_next+0x248>
				return FR_NO_FILE;
 80048a0:	2304      	movs	r3, #4
 80048a2:	e0fe      	b.n	8004aa2 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048b0:	895b      	ldrh	r3, [r3, #10]
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80048ca:	7892      	ldrb	r2, [r2, #2]
 80048cc:	3a01      	subs	r2, #1
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f040 80c4 	bne.w	8004a5e <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	4619      	mov	r1, r3
 80048e8:	4610      	mov	r0, r2
 80048ea:	f7ff fb2e 	bl	8003f4a <get_fat>
 80048ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d801      	bhi.n	80048fa <dir_next+0xe4>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e0d3      	b.n	8004aa2 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004900:	d101      	bne.n	8004906 <dir_next+0xf0>
 8004902:	2301      	movs	r3, #1
 8004904:	e0cd      	b.n	8004aa2 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	429a      	cmp	r2, r3
 8004918:	f0c0 808e 	bcc.w	8004a38 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <dir_next+0x110>
 8004922:	2304      	movs	r3, #4
 8004924:	e0bd      	b.n	8004aa2 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f7ff fdb6 	bl	80044aa <create_chain>
 800493e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <dir_next+0x134>
 8004946:	2307      	movs	r3, #7
 8004948:	e0ab      	b.n	8004aa2 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <dir_next+0x13e>
 8004950:	2302      	movs	r3, #2
 8004952:	e0a6      	b.n	8004aa2 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495a:	d101      	bne.n	8004960 <dir_next+0x14a>
 800495c:	2301      	movs	r3, #1
 800495e:	e0a0      	b.n	8004aa2 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff f987 	bl	8003c7c <sync_window>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <dir_next+0x162>
 8004974:	2301      	movs	r3, #1
 8004976:	e094      	b.n	8004aa2 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800498e:	895b      	ldrh	r3, [r3, #10]
 8004990:	461a      	mov	r2, r3
 8004992:	2100      	movs	r1, #0
 8004994:	f7fe ff5a 	bl	800384c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049a6:	681c      	ldr	r4, [r3, #0]
 80049a8:	6979      	ldr	r1, [r7, #20]
 80049aa:	4610      	mov	r0, r2
 80049ac:	f7ff faa9 	bl	8003f02 <clust2sect>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 80049b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80049b8:	2300      	movs	r3, #0
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	e021      	b.n	8004a02 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049ca:	2201      	movs	r2, #1
 80049cc:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff f950 	bl	8003c7c <sync_window>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <dir_next+0x1d0>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e05d      	b.n	8004aa2 <dir_next+0x28c>
						dp->fs->winsect++;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 80049f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049f4:	3201      	adds	r2, #1
 80049f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049fa:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	3301      	adds	r3, #1
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a0e:	789b      	ldrb	r3, [r3, #2]
 8004a10:	461a      	mov	r2, r3
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d3d2      	bcc.n	80049be <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1acb      	subs	r3, r1, r3
 8004a32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004a36:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a3e:	461a      	mov	r2, r3
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6979      	ldr	r1, [r7, #20]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff fa57 	bl	8003f02 <clust2sect>
 8004a54:	4602      	mov	r2, r0
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a5c:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a68:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a80:	895b      	ldrh	r3, [r3, #10]
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a8e:	fb01 f202 	mul.w	r2, r1, r2
 8004a92:	1a9b      	subs	r3, r3, r2
 8004a94:	015b      	lsls	r3, r3, #5
 8004a96:	4403      	add	r3, r0
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004a9e:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd90      	pop	{r4, r7, pc}

08004aaa <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff fddf 	bl	800467a <dir_sdi>
 8004abc:	4603      	mov	r3, r0
 8004abe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d135      	bne.n	8004b32 <dir_alloc+0x88>
		n = 0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f7ff f91f 	bl	8003d20 <move_window>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d121      	bne.n	8004b30 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2be5      	cmp	r3, #229	@ 0xe5
 8004af8:	d006      	beq.n	8004b08 <dir_alloc+0x5e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d107      	bne.n	8004b18 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60bb      	str	r3, [r7, #8]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d102      	bne.n	8004b1c <dir_alloc+0x72>
 8004b16:	e00c      	b.n	8004b32 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff fe79 	bl	8004816 <dir_next>
 8004b24:	4603      	mov	r3, r0
 8004b26:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0cd      	beq.n	8004aca <dir_alloc+0x20>
 8004b2e:	e000      	b.n	8004b32 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8004b30:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d101      	bne.n	8004b3c <dir_alloc+0x92>
 8004b38:	2307      	movs	r3, #7
 8004b3a:	73fb      	strb	r3, [r7, #15]
	return res;
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b085      	sub	sp, #20
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	331b      	adds	r3, #27
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	b21b      	sxth	r3, r3
 8004b58:	021b      	lsls	r3, r3, #8
 8004b5a:	b21a      	sxth	r2, r3
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	331a      	adds	r3, #26
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	b21b      	sxth	r3, r3
 8004b64:	4313      	orrs	r3, r2
 8004b66:	b21b      	sxth	r3, r3
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d110      	bne.n	8004b9a <ld_clust+0x54>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	3315      	adds	r3, #21
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	b21b      	sxth	r3, r3
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	b21a      	sxth	r2, r3
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	3314      	adds	r3, #20
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	b21b      	sxth	r3, r3
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	b21b      	sxth	r3, r3
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	041b      	lsls	r3, r3, #16
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]

	return cl;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bc80      	pop	{r7}
 8004ba4:	4770      	bx	lr

08004ba6 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	331a      	adds	r3, #26
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	0a1b      	lsrs	r3, r3, #8
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	331b      	adds	r3, #27
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	0c1a      	lsrs	r2, r3, #16
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3314      	adds	r3, #20
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	0c1b      	lsrs	r3, r3, #16
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	0a1b      	lsrs	r3, r3, #8
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3315      	adds	r3, #21
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	701a      	strb	r2, [r3, #0]
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr
	...

08004bf4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c06:	1e5a      	subs	r2, r3, #1
 8004c08:	4613      	mov	r3, r2
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8004c14:	2300      	movs	r3, #0
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	2301      	movs	r3, #1
 8004c1a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8004c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8004ccc <cmp_lfn+0xd8>)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	4413      	add	r3, r2
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	3301      	adds	r3, #1
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	4413      	add	r3, r2
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	b21b      	sxth	r3, r3
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	b21a      	sxth	r2, r3
 8004c32:	4926      	ldr	r1, [pc, #152]	@ (8004ccc <cmp_lfn+0xd8>)
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	440b      	add	r3, r1
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	440b      	add	r3, r1
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	b21b      	sxth	r3, r3
 8004c44:	4313      	orrs	r3, r2
 8004c46:	b21b      	sxth	r3, r3
 8004c48:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8004c4a:	89fb      	ldrh	r3, [r7, #14]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d019      	beq.n	8004c84 <cmp_lfn+0x90>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8004c50:	89bb      	ldrh	r3, [r7, #12]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f002 fbce 	bl	80073f4 <ff_wtoupper>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2bfe      	cmp	r3, #254	@ 0xfe
 8004c60:	d80e      	bhi.n	8004c80 <cmp_lfn+0x8c>
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	617a      	str	r2, [r7, #20]
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f002 fbbf 	bl	80073f4 <ff_wtoupper>
 8004c76:	4603      	mov	r3, r0
 8004c78:	461a      	mov	r2, r3
 8004c7a:	89fb      	ldrh	r3, [r7, #14]
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d008      	beq.n	8004c92 <cmp_lfn+0x9e>
				return 0;				/* Not matched */
 8004c80:	2300      	movs	r3, #0
 8004c82:	e01f      	b.n	8004cc4 <cmp_lfn+0xd0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8004c84:	89bb      	ldrh	r3, [r7, #12]
 8004c86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d001      	beq.n	8004c92 <cmp_lfn+0x9e>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	e018      	b.n	8004cc4 <cmp_lfn+0xd0>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	3301      	adds	r3, #1
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	2b0c      	cmp	r3, #12
 8004c9c:	d9be      	bls.n	8004c1c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00b      	beq.n	8004cc2 <cmp_lfn+0xce>
 8004caa:	89fb      	ldrh	r3, [r7, #14]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <cmp_lfn+0xce>
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <cmp_lfn+0xce>
		return 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e000      	b.n	8004cc4 <cmp_lfn+0xd0>

	return 1;						/* The part of LFN matched */
 8004cc2:	2301      	movs	r3, #1
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	08009300 	.word	0x08009300

08004cd0 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b089      	sub	sp, #36	@ 0x24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	4611      	mov	r1, r2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	460b      	mov	r3, r1
 8004ce0:	71fb      	strb	r3, [r7, #7]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	330d      	adds	r3, #13
 8004cea:	79ba      	ldrb	r2, [r7, #6]
 8004cec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	330b      	adds	r3, #11
 8004cf2:	220f      	movs	r2, #15
 8004cf4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	330c      	adds	r3, #12
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	331a      	adds	r3, #26
 8004d02:	2200      	movs	r2, #0
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	331b      	adds	r3, #27
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8004d0e:	79fb      	ldrb	r3, [r7, #7]
 8004d10:	1e5a      	subs	r2, r3, #1
 8004d12:	4613      	mov	r3, r2
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	4413      	add	r3, r2
 8004d1c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	82fb      	strh	r3, [r7, #22]
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8004d26:	8afb      	ldrh	r3, [r7, #22]
 8004d28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d007      	beq.n	8004d40 <fit_lfn+0x70>
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	61fa      	str	r2, [r7, #28]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8004d40:	4a1c      	ldr	r2, [pc, #112]	@ (8004db4 <fit_lfn+0xe4>)
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	4413      	add	r3, r2
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	8afa      	ldrh	r2, [r7, #22]
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	8afb      	ldrh	r3, [r7, #22]
 8004d56:	0a1b      	lsrs	r3, r3, #8
 8004d58:	b299      	uxth	r1, r3
 8004d5a:	4a16      	ldr	r2, [pc, #88]	@ (8004db4 <fit_lfn+0xe4>)
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	4413      	add	r3, r2
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	3301      	adds	r3, #1
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	4413      	add	r3, r2
 8004d68:	b2ca      	uxtb	r2, r1
 8004d6a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8004d6c:	8afb      	ldrh	r3, [r7, #22]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d102      	bne.n	8004d78 <fit_lfn+0xa8>
 8004d72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004d76:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	61bb      	str	r3, [r7, #24]
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	2b0c      	cmp	r3, #12
 8004d82:	d9d0      	bls.n	8004d26 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8004d84:	8afb      	ldrh	r3, [r7, #22]
 8004d86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d006      	beq.n	8004d9c <fit_lfn+0xcc>
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4413      	add	r3, r2
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d103      	bne.n	8004da4 <fit_lfn+0xd4>
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004da2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	79fa      	ldrb	r2, [r7, #7]
 8004da8:	701a      	strb	r2, [r3, #0]
}
 8004daa:	bf00      	nop
 8004dac:	3724      	adds	r7, #36	@ 0x24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr
 8004db4:	08009300 	.word	0x08009300

08004db8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08c      	sub	sp, #48	@ 0x30
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004dc6:	220b      	movs	r2, #11
 8004dc8:	68b9      	ldr	r1, [r7, #8]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7fe fd20 	bl	8003810 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b05      	cmp	r3, #5
 8004dd4:	d92b      	bls.n	8004e2e <gen_numname+0x76>
		sr = seq;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004dda:	e022      	b.n	8004e22 <gen_numname+0x6a>
			wc = *lfn++;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	1c9a      	adds	r2, r3, #2
 8004de0:	607a      	str	r2, [r7, #4]
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8004de6:	2300      	movs	r3, #0
 8004de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dea:	e017      	b.n	8004e1c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	005a      	lsls	r2, r3, #1
 8004df0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	4413      	add	r3, r2
 8004df8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004dfa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004dfc:	085b      	lsrs	r3, r3, #1
 8004dfe:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <gen_numname+0x5e>
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8004e10:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8004e14:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e18:	3301      	adds	r3, #1
 8004e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1e:	2b0f      	cmp	r3, #15
 8004e20:	d9e4      	bls.n	8004dec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1d8      	bne.n	8004ddc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004e2e:	2307      	movs	r3, #7
 8004e30:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	3330      	adds	r3, #48	@ 0x30
 8004e3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8004e42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e46:	2b39      	cmp	r3, #57	@ 0x39
 8004e48:	d904      	bls.n	8004e54 <gen_numname+0x9c>
 8004e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e4e:	3307      	adds	r3, #7
 8004e50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8004e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e56:	1e5a      	subs	r2, r3, #1
 8004e58:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004e5a:	3330      	adds	r3, #48	@ 0x30
 8004e5c:	443b      	add	r3, r7
 8004e5e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004e62:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	091b      	lsrs	r3, r3, #4
 8004e6a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1df      	bne.n	8004e32 <gen_numname+0x7a>
	ns[i] = '~';
 8004e72:	f107 0214 	add.w	r2, r7, #20
 8004e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e78:	4413      	add	r3, r2
 8004e7a:	227e      	movs	r2, #126	@ 0x7e
 8004e7c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004e7e:	2300      	movs	r3, #0
 8004e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e82:	e002      	b.n	8004e8a <gen_numname+0xd2>
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	3301      	adds	r3, #1
 8004e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d205      	bcs.n	8004e9e <gen_numname+0xe6>
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e96:	4413      	add	r3, r2
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b20      	cmp	r3, #32
 8004e9c:	d1f2      	bne.n	8004e84 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea0:	2b07      	cmp	r3, #7
 8004ea2:	d807      	bhi.n	8004eb4 <gen_numname+0xfc>
 8004ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004eaa:	3330      	adds	r3, #48	@ 0x30
 8004eac:	443b      	add	r3, r7
 8004eae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004eb2:	e000      	b.n	8004eb6 <gen_numname+0xfe>
 8004eb4:	2120      	movs	r1, #32
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	460a      	mov	r2, r1
 8004ec2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec6:	2b07      	cmp	r3, #7
 8004ec8:	d9e9      	bls.n	8004e9e <gen_numname+0xe6>
}
 8004eca:	bf00      	nop
 8004ecc:	bf00      	nop
 8004ece:	3730      	adds	r7, #48	@ 0x30
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004edc:	2300      	movs	r3, #0
 8004ede:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004ee0:	230b      	movs	r3, #11
 8004ee2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	0852      	lsrs	r2, r2, #1
 8004eea:	01db      	lsls	r3, r3, #7
 8004eec:	4313      	orrs	r3, r2
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	1c59      	adds	r1, r3, #1
 8004ef4:	6079      	str	r1, [r7, #4]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	4413      	add	r3, r2
 8004efa:	73fb      	strb	r3, [r7, #15]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1ed      	bne.n	8004ee4 <sum_sfn+0x10>
	return sum;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr

08004f14 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7ff fbab 	bl	800467a <dir_sdi>
 8004f24:	4603      	mov	r3, r0
 8004f26:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <dir_find+0x1e>
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
 8004f30:	e0b8      	b.n	80050a4 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004f32:	23ff      	movs	r3, #255	@ 0xff
 8004f34:	753b      	strb	r3, [r7, #20]
 8004f36:	7d3b      	ldrb	r3, [r7, #20]
 8004f38:	757b      	strb	r3, [r7, #21]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f44:	849a      	strh	r2, [r3, #36]	@ 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f7fe fee1 	bl	8003d20 <move_window>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f040 8097 	bne.w	8005098 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004f7a:	7dbb      	ldrb	r3, [r7, #22]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d102      	bne.n	8004f86 <dir_find+0x72>
 8004f80:	2304      	movs	r3, #4
 8004f82:	75fb      	strb	r3, [r7, #23]
 8004f84:	e08d      	b.n	80050a2 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	330b      	adds	r3, #11
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f90:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004f92:	7dbb      	ldrb	r3, [r7, #22]
 8004f94:	2be5      	cmp	r3, #229	@ 0xe5
 8004f96:	d007      	beq.n	8004fa8 <dir_find+0x94>
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <dir_find+0xa6>
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	2b0f      	cmp	r3, #15
 8004fa6:	d008      	beq.n	8004fba <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004fa8:	23ff      	movs	r3, #255	@ 0xff
 8004faa:	757b      	strb	r3, [r7, #21]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fb6:	849a      	strh	r2, [r3, #36]	@ 0x24
 8004fb8:	e063      	b.n	8005082 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	2b0f      	cmp	r3, #15
 8004fbe:	d137      	bne.n	8005030 <dir_find+0x11c>
				if (dp->lfn) {
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d05a      	beq.n	8005082 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004fcc:	7dbb      	ldrb	r3, [r7, #22]
 8004fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d010      	beq.n	8004ff8 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	7b5b      	ldrb	r3, [r3, #13]
 8004fda:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8004fdc:	7dbb      	ldrb	r3, [r7, #22]
 8004fde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fe2:	75bb      	strb	r3, [r7, #22]
 8004fe4:	7dbb      	ldrb	r3, [r7, #22]
 8004fe6:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fee:	88da      	ldrh	r2, [r3, #6]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ff6:	849a      	strh	r2, [r3, #36]	@ 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8004ff8:	7dba      	ldrb	r2, [r7, #22]
 8004ffa:	7d7b      	ldrb	r3, [r7, #21]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d114      	bne.n	800502a <dir_find+0x116>
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	330d      	adds	r3, #13
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	7d3a      	ldrb	r2, [r7, #20]
 8005008:	429a      	cmp	r2, r3
 800500a:	d10e      	bne.n	800502a <dir_find+0x116>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	6939      	ldr	r1, [r7, #16]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fdec 	bl	8004bf4 <cmp_lfn>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <dir_find+0x116>
 8005022:	7d7b      	ldrb	r3, [r7, #21]
 8005024:	3b01      	subs	r3, #1
 8005026:	b2db      	uxtb	r3, r3
 8005028:	e000      	b.n	800502c <dir_find+0x118>
 800502a:	23ff      	movs	r3, #255	@ 0xff
 800502c:	757b      	strb	r3, [r7, #21]
 800502e:	e028      	b.n	8005082 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005030:	7d7b      	ldrb	r3, [r7, #21]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d107      	bne.n	8005046 <dir_find+0x132>
 8005036:	6938      	ldr	r0, [r7, #16]
 8005038:	f7ff ff4c 	bl	8004ed4 <sum_sfn>
 800503c:	4603      	mov	r3, r0
 800503e:	461a      	mov	r2, r3
 8005040:	7d3b      	ldrb	r3, [r7, #20]
 8005042:	4293      	cmp	r3, r2
 8005044:	d02a      	beq.n	800509c <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	330b      	adds	r3, #11
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10b      	bne.n	8005072 <dir_find+0x15e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	220b      	movs	r2, #11
 8005064:	4619      	mov	r1, r3
 8005066:	6938      	ldr	r0, [r7, #16]
 8005068:	f7fe fc0a 	bl	8003880 <mem_cmp>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005072:	23ff      	movs	r3, #255	@ 0xff
 8005074:	757b      	strb	r3, [r7, #21]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800507c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005080:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8005082:	2100      	movs	r1, #0
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff fbc6 	bl	8004816 <dir_next>
 800508a:	4603      	mov	r3, r0
 800508c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800508e:	7dfb      	ldrb	r3, [r7, #23]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f43f af58 	beq.w	8004f46 <dir_find+0x32>
 8005096:	e004      	b.n	80050a2 <dir_find+0x18e>
		if (res != FR_OK) break;
 8005098:	bf00      	nop
 800509a:	e002      	b.n	80050a2 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800509c:	bf00      	nop
 800509e:	e000      	b.n	80050a2 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80050a0:	bf00      	nop

	return res;
 80050a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08c      	sub	sp, #48	@ 0x30
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	623b      	str	r3, [r7, #32]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80050c8:	f107 030c 	add.w	r3, r7, #12
 80050cc:	220c      	movs	r2, #12
 80050ce:	6a39      	ldr	r1, [r7, #32]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fe fb9d 	bl	8003810 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80050d6:	7dfb      	ldrb	r3, [r7, #23]
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d03b      	beq.n	8005158 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	330b      	adds	r3, #11
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050ee:	461a      	mov	r2, r3
 80050f0:	2300      	movs	r3, #0
 80050f2:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 80050f4:	2301      	movs	r3, #1
 80050f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050f8:	e013      	b.n	8005122 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80050fa:	f107 010c 	add.w	r1, r7, #12
 80050fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	6a38      	ldr	r0, [r7, #32]
 8005104:	f7ff fe58 	bl	8004db8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff ff03 	bl	8004f14 <dir_find>
 800510e:	4603      	mov	r3, r0
 8005110:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8005114:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005118:	2b00      	cmp	r3, #0
 800511a:	d106      	bne.n	800512a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800511c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511e:	3301      	adds	r3, #1
 8005120:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005124:	2b63      	cmp	r3, #99	@ 0x63
 8005126:	d9e8      	bls.n	80050fa <dir_register+0x4e>
 8005128:	e000      	b.n	800512c <dir_register+0x80>
			if (res != FR_OK) break;
 800512a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800512c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512e:	2b64      	cmp	r3, #100	@ 0x64
 8005130:	d101      	bne.n	8005136 <dir_register+0x8a>
 8005132:	2307      	movs	r3, #7
 8005134:	e0d8      	b.n	80052e8 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005136:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800513a:	2b04      	cmp	r3, #4
 800513c:	d002      	beq.n	8005144 <dir_register+0x98>
 800513e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005142:	e0d1      	b.n	80052e8 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	330b      	adds	r3, #11
 8005148:	7dfa      	ldrb	r2, [r7, #23]
 800514a:	701a      	strb	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005152:	461a      	mov	r2, r3
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d014      	beq.n	800518c <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8005162:	2300      	movs	r3, #0
 8005164:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005166:	e002      	b.n	800516e <dir_register+0xc2>
 8005168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516a:	3301      	adds	r3, #1
 800516c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800516e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1f5      	bne.n	8005168 <dir_register+0xbc>
		nent = (n + 25) / 13;
 800517c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517e:	3319      	adds	r3, #25
 8005180:	4a5b      	ldr	r2, [pc, #364]	@ (80052f0 <dir_register+0x244>)
 8005182:	fba2 2303 	umull	r2, r3, r2, r3
 8005186:	089b      	lsrs	r3, r3, #2
 8005188:	627b      	str	r3, [r7, #36]	@ 0x24
 800518a:	e001      	b.n	8005190 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800518c:	2301      	movs	r3, #1
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005190:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7ff fc89 	bl	8004aaa <dir_alloc>
 8005198:	4603      	mov	r3, r0
 800519a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800519e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d15b      	bne.n	800525e <dir_register+0x1b2>
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	3b01      	subs	r3, #1
 80051aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d055      	beq.n	800525e <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051b8:	88db      	ldrh	r3, [r3, #6]
 80051ba:	461a      	mov	r2, r3
 80051bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	4619      	mov	r1, r3
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7ff fa59 	bl	800467a <dir_sdi>
 80051c8:	4603      	mov	r3, r0
 80051ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80051ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d143      	bne.n	800525e <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff fe78 	bl	8004ed4 <sum_sfn>
 80051e4:	4603      	mov	r3, r0
 80051e6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	4619      	mov	r1, r3
 80051fa:	4610      	mov	r0, r2
 80051fc:	f7fe fd90 	bl	8003d20 <move_window>
 8005200:	4603      	mov	r3, r0
 8005202:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8005206:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800520a:	2b00      	cmp	r3, #0
 800520c:	d126      	bne.n	800525c <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005214:	6a18      	ldr	r0, [r3, #32]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800521c:	6959      	ldr	r1, [r3, #20]
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	b2da      	uxtb	r2, r3
 8005222:	7efb      	ldrb	r3, [r7, #27]
 8005224:	f7ff fd54 	bl	8004cd0 <fit_lfn>
				dp->fs->wflag = 1;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005234:	2201      	movs	r2, #1
 8005236:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8005238:	2100      	movs	r1, #0
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff faeb 	bl	8004816 <dir_next>
 8005240:	4603      	mov	r3, r0
 8005242:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8005246:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800524a:	2b00      	cmp	r3, #0
 800524c:	d107      	bne.n	800525e <dir_register+0x1b2>
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	3b01      	subs	r3, #1
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1c6      	bne.n	80051e8 <dir_register+0x13c>
 800525a:	e000      	b.n	800525e <dir_register+0x1b2>
				if (res != FR_OK) break;
 800525c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800525e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005262:	2b00      	cmp	r3, #0
 8005264:	d13e      	bne.n	80052e4 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	4619      	mov	r1, r3
 8005278:	4610      	mov	r0, r2
 800527a:	f7fe fd51 	bl	8003d20 <move_window>
 800527e:	4603      	mov	r3, r0
 8005280:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005284:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005288:	2b00      	cmp	r3, #0
 800528a:	d12b      	bne.n	80052e4 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	2220      	movs	r2, #32
 8005296:	2100      	movs	r1, #0
 8005298:	4618      	mov	r0, r3
 800529a:	f7fe fad7 	bl	800384c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052a4:	6958      	ldr	r0, [r3, #20]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	220b      	movs	r2, #11
 80052b0:	4619      	mov	r1, r3
 80052b2:	f7fe faad 	bl	8003810 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	330b      	adds	r3, #11
 80052c0:	781a      	ldrb	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	330c      	adds	r3, #12
 80052cc:	f002 0218 	and.w	r2, r2, #24
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052e0:	2201      	movs	r2, #1
 80052e2:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80052e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3730      	adds	r7, #48	@ 0x30
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	4ec4ec4f 	.word	0x4ec4ec4f

080052f4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	@ 0x28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	613b      	str	r3, [r7, #16]
 8005304:	e002      	b.n	800530c <create_name+0x18>
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	3301      	adds	r3, #1
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b2f      	cmp	r3, #47	@ 0x2f
 8005312:	d0f8      	beq.n	8005306 <create_name+0x12>
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b5c      	cmp	r3, #92	@ 0x5c
 800531a:	d0f4      	beq.n	8005306 <create_name+0x12>
	lfn = dp->lfn;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	61ba      	str	r2, [r7, #24]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4413      	add	r3, r2
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800533c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800533e:	2b1f      	cmp	r3, #31
 8005340:	d92f      	bls.n	80053a2 <create_name+0xae>
 8005342:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005344:	2b2f      	cmp	r3, #47	@ 0x2f
 8005346:	d02c      	beq.n	80053a2 <create_name+0xae>
 8005348:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800534a:	2b5c      	cmp	r3, #92	@ 0x5c
 800534c:	d029      	beq.n	80053a2 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	2bfe      	cmp	r3, #254	@ 0xfe
 8005352:	d901      	bls.n	8005358 <create_name+0x64>
			return FR_INVALID_NAME;
 8005354:	2306      	movs	r3, #6
 8005356:	e186      	b.n	8005666 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005358:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800535a:	b2db      	uxtb	r3, r3
 800535c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800535e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005360:	2101      	movs	r1, #1
 8005362:	4618      	mov	r0, r3
 8005364:	f002 f80c 	bl	8007380 <ff_convert>
 8005368:	4603      	mov	r3, r0
 800536a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800536c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <create_name+0x82>
 8005372:	2306      	movs	r3, #6
 8005374:	e177      	b.n	8005666 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8005376:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005378:	2b7f      	cmp	r3, #127	@ 0x7f
 800537a:	d809      	bhi.n	8005390 <create_name+0x9c>
 800537c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800537e:	4619      	mov	r1, r3
 8005380:	488e      	ldr	r0, [pc, #568]	@ (80055bc <create_name+0x2c8>)
 8005382:	f7fe faa3 	bl	80038cc <chk_chr>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <create_name+0x9c>
			return FR_INVALID_NAME;
 800538c:	2306      	movs	r3, #6
 800538e:	e16a      	b.n	8005666 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	617a      	str	r2, [r7, #20]
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800539e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80053a0:	e7c5      	b.n	800532e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	441a      	add	r2, r3
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80053ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053ae:	2b1f      	cmp	r3, #31
 80053b0:	d801      	bhi.n	80053b6 <create_name+0xc2>
 80053b2:	2304      	movs	r3, #4
 80053b4:	e000      	b.n	80053b8 <create_name+0xc4>
 80053b6:	2300      	movs	r3, #0
 80053b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80053bc:	e011      	b.n	80053e2 <create_name+0xee>
		w = lfn[di - 1];
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80053c4:	3b01      	subs	r3, #1
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80053d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	d002      	beq.n	80053dc <create_name+0xe8>
 80053d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80053da:	d106      	bne.n	80053ea <create_name+0xf6>
		di--;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	3b01      	subs	r3, #1
 80053e0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1ea      	bne.n	80053be <create_name+0xca>
 80053e8:	e000      	b.n	80053ec <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 80053ea:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <create_name+0x102>
 80053f2:	2306      	movs	r3, #6
 80053f4:	e137      	b.n	8005666 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	2200      	movs	r2, #0
 8005400:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	220b      	movs	r2, #11
 800540c:	2120      	movs	r1, #32
 800540e:	4618      	mov	r0, r3
 8005410:	f7fe fa1c 	bl	800384c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005414:	2300      	movs	r3, #0
 8005416:	61bb      	str	r3, [r7, #24]
 8005418:	e002      	b.n	8005420 <create_name+0x12c>
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	3301      	adds	r3, #1
 800541e:	61bb      	str	r3, [r7, #24]
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	2b20      	cmp	r3, #32
 800542c:	d0f5      	beq.n	800541a <create_name+0x126>
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4413      	add	r3, r2
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	2b2e      	cmp	r3, #46	@ 0x2e
 800543a:	d0ee      	beq.n	800541a <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <create_name+0x162>
 8005442:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005446:	f043 0303 	orr.w	r3, r3, #3
 800544a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800544e:	e002      	b.n	8005456 <create_name+0x162>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	3b01      	subs	r3, #1
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d009      	beq.n	8005470 <create_name+0x17c>
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005462:	3b01      	subs	r3, #1
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4413      	add	r3, r2
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	2b2e      	cmp	r3, #46	@ 0x2e
 800546e:	d1ef      	bne.n	8005450 <create_name+0x15c>

	b = i = 0; ni = 8;
 8005470:	2300      	movs	r3, #0
 8005472:	623b      	str	r3, [r7, #32]
 8005474:	2300      	movs	r3, #0
 8005476:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800547a:	2308      	movs	r3, #8
 800547c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	61ba      	str	r2, [r7, #24]
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4413      	add	r3, r2
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800548e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 8091 	beq.w	80055b8 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005496:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005498:	2b20      	cmp	r3, #32
 800549a:	d006      	beq.n	80054aa <create_name+0x1b6>
 800549c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800549e:	2b2e      	cmp	r3, #46	@ 0x2e
 80054a0:	d10a      	bne.n	80054b8 <create_name+0x1c4>
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d006      	beq.n	80054b8 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 80054aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054ae:	f043 0303 	orr.w	r3, r3, #3
 80054b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80054b6:	e07e      	b.n	80055b6 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80054b8:	6a3a      	ldr	r2, [r7, #32]
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d203      	bcs.n	80054c8 <create_name+0x1d4>
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d123      	bne.n	8005510 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	2b0b      	cmp	r3, #11
 80054cc:	d106      	bne.n	80054dc <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 80054ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054d2:	f043 0303 	orr.w	r3, r3, #3
 80054d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80054da:	e076      	b.n	80055ca <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d005      	beq.n	80054f0 <create_name+0x1fc>
 80054e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80054e8:	f043 0303 	orr.w	r3, r3, #3
 80054ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d867      	bhi.n	80055c8 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	61bb      	str	r3, [r7, #24]
 80054fc:	2308      	movs	r3, #8
 80054fe:	623b      	str	r3, [r7, #32]
 8005500:	230b      	movs	r3, #11
 8005502:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005504:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800550e:	e052      	b.n	80055b6 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005510:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005512:	2b7f      	cmp	r3, #127	@ 0x7f
 8005514:	d914      	bls.n	8005540 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005516:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005518:	2100      	movs	r1, #0
 800551a:	4618      	mov	r0, r3
 800551c:	f001 ff30 	bl	8007380 <ff_convert>
 8005520:	4603      	mov	r3, r0
 8005522:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005524:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <create_name+0x240>
 800552a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800552c:	3b80      	subs	r3, #128	@ 0x80
 800552e:	4a24      	ldr	r2, [pc, #144]	@ (80055c0 <create_name+0x2cc>)
 8005530:	5cd3      	ldrb	r3, [r2, r3]
 8005532:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005538:	f043 0302 	orr.w	r3, r3, #2
 800553c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005540:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005542:	2b00      	cmp	r3, #0
 8005544:	d007      	beq.n	8005556 <create_name+0x262>
 8005546:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005548:	4619      	mov	r1, r3
 800554a:	481e      	ldr	r0, [pc, #120]	@ (80055c4 <create_name+0x2d0>)
 800554c:	f7fe f9be 	bl	80038cc <chk_chr>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d008      	beq.n	8005568 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005556:	235f      	movs	r3, #95	@ 0x5f
 8005558:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800555a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800555e:	f043 0303 	orr.w	r3, r3, #3
 8005562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005566:	e01b      	b.n	80055a0 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005568:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800556a:	2b40      	cmp	r3, #64	@ 0x40
 800556c:	d909      	bls.n	8005582 <create_name+0x28e>
 800556e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005570:	2b5a      	cmp	r3, #90	@ 0x5a
 8005572:	d806      	bhi.n	8005582 <create_name+0x28e>
					b |= 2;
 8005574:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005578:	f043 0302 	orr.w	r3, r3, #2
 800557c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005580:	e00e      	b.n	80055a0 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005582:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005584:	2b60      	cmp	r3, #96	@ 0x60
 8005586:	d90b      	bls.n	80055a0 <create_name+0x2ac>
 8005588:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800558a:	2b7a      	cmp	r3, #122	@ 0x7a
 800558c:	d808      	bhi.n	80055a0 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800558e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005592:	f043 0301 	orr.w	r3, r3, #1
 8005596:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800559a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800559c:	3b20      	subs	r3, #32
 800559e:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055a6:	699a      	ldr	r2, [r3, #24]
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	1c59      	adds	r1, r3, #1
 80055ac:	6239      	str	r1, [r7, #32]
 80055ae:	4413      	add	r3, r2
 80055b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80055b6:	e762      	b.n	800547e <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 80055b8:	bf00      	nop
 80055ba:	e006      	b.n	80055ca <create_name+0x2d6>
 80055bc:	0800920c 	.word	0x0800920c
 80055c0:	08009280 	.word	0x08009280
 80055c4:	08009218 	.word	0x08009218
			if (si > di) break;			/* No extension */
 80055c8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2be5      	cmp	r3, #229	@ 0xe5
 80055d6:	d105      	bne.n	80055e4 <create_name+0x2f0>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	2205      	movs	r2, #5
 80055e2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d104      	bne.n	80055f4 <create_name+0x300>
 80055ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80055f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80055f8:	f003 030c 	and.w	r3, r3, #12
 80055fc:	2b0c      	cmp	r3, #12
 80055fe:	d005      	beq.n	800560c <create_name+0x318>
 8005600:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005604:	f003 0303 	and.w	r3, r3, #3
 8005608:	2b03      	cmp	r3, #3
 800560a:	d105      	bne.n	8005618 <create_name+0x324>
		cf |= NS_LFN;
 800560c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005610:	f043 0302 	orr.w	r3, r3, #2
 8005614:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d117      	bne.n	8005654 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005624:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	2b01      	cmp	r3, #1
 800562e:	d105      	bne.n	800563c <create_name+0x348>
 8005630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005634:	f043 0310 	orr.w	r3, r3, #16
 8005638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800563c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005640:	f003 030c 	and.w	r3, r3, #12
 8005644:	2b04      	cmp	r3, #4
 8005646:	d105      	bne.n	8005654 <create_name+0x360>
 8005648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800564c:	f043 0308 	orr.w	r3, r3, #8
 8005650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	330b      	adds	r3, #11
 800565e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005662:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005664:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8005666:	4618      	mov	r0, r3
 8005668:	3728      	adds	r7, #40	@ 0x28
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop

08005670 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b2f      	cmp	r3, #47	@ 0x2f
 8005680:	d003      	beq.n	800568a <follow_path+0x1a>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b5c      	cmp	r3, #92	@ 0x5c
 8005688:	d102      	bne.n	8005690 <follow_path+0x20>
		path++;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	3301      	adds	r3, #1
 800568e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005696:	461a      	mov	r2, r3
 8005698:	2300      	movs	r3, #0
 800569a:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b1f      	cmp	r3, #31
 80056a2:	d80c      	bhi.n	80056be <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80056a4:	2100      	movs	r1, #0
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7fe ffe7 	bl	800467a <dir_sdi>
 80056ac:	4603      	mov	r3, r0
 80056ae:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056b6:	461a      	mov	r2, r3
 80056b8:	2300      	movs	r3, #0
 80056ba:	6153      	str	r3, [r2, #20]
 80056bc:	e049      	b.n	8005752 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80056be:	463b      	mov	r3, r7
 80056c0:	4619      	mov	r1, r3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7ff fe16 	bl	80052f4 <create_name>
 80056c8:	4603      	mov	r3, r0
 80056ca:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d13a      	bne.n	8005748 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff fc1e 	bl	8004f14 <dir_find>
 80056d8:	4603      	mov	r3, r0
 80056da:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	7adb      	ldrb	r3, [r3, #11]
 80056e6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d12b      	bne.n	800574c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80056f4:	7bbb      	ldrb	r3, [r7, #14]
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d126      	bne.n	800574c <follow_path+0xdc>
 80056fe:	2305      	movs	r3, #5
 8005700:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8005702:	e023      	b.n	800574c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005704:	7bbb      	ldrb	r3, [r7, #14]
 8005706:	f003 0304 	and.w	r3, r3, #4
 800570a:	2b00      	cmp	r3, #0
 800570c:	d120      	bne.n	8005750 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	330b      	adds	r3, #11
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	f003 0310 	and.w	r3, r3, #16
 8005722:	2b00      	cmp	r3, #0
 8005724:	d102      	bne.n	800572c <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8005726:	2305      	movs	r3, #5
 8005728:	73fb      	strb	r3, [r7, #15]
 800572a:	e012      	b.n	8005752 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68b9      	ldr	r1, [r7, #8]
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff fa05 	bl	8004b46 <ld_clust>
 800573c:	4602      	mov	r2, r0
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005744:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005746:	e7ba      	b.n	80056be <follow_path+0x4e>
			if (res != FR_OK) break;
 8005748:	bf00      	nop
 800574a:	e002      	b.n	8005752 <follow_path+0xe2>
				break;
 800574c:	bf00      	nop
 800574e:	e000      	b.n	8005752 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005750:	bf00      	nop
		}
	}

	return res;
 8005752:	7bfb      	ldrb	r3, [r7, #15]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005764:	f04f 33ff 	mov.w	r3, #4294967295
 8005768:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d031      	beq.n	80057d6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	e002      	b.n	8005780 <get_ldnumber+0x24>
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	3301      	adds	r3, #1
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b1f      	cmp	r3, #31
 8005786:	d903      	bls.n	8005790 <get_ldnumber+0x34>
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b3a      	cmp	r3, #58	@ 0x3a
 800578e:	d1f4      	bne.n	800577a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b3a      	cmp	r3, #58	@ 0x3a
 8005796:	d11c      	bne.n	80057d2 <get_ldnumber+0x76>
			tp = *path;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	60fa      	str	r2, [r7, #12]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	3b30      	subs	r3, #48	@ 0x30
 80057a8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b09      	cmp	r3, #9
 80057ae:	d80e      	bhi.n	80057ce <get_ldnumber+0x72>
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d10a      	bne.n	80057ce <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d107      	bne.n	80057ce <get_ldnumber+0x72>
					vol = (int)i;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	3301      	adds	r3, #1
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	e002      	b.n	80057d8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80057d2:	2300      	movs	r3, #0
 80057d4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80057d6:	693b      	ldr	r3, [r7, #16]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr
	...

080057e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057f4:	2200      	movs	r2, #0
 80057f6:	711a      	strb	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057fe:	461a      	mov	r2, r3
 8005800:	f04f 33ff 	mov.w	r3, #4294967295
 8005804:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8005806:	6839      	ldr	r1, [r7, #0]
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7fe fa89 	bl	8003d20 <move_window>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <check_fs+0x34>
		return 3;
 8005814:	2303      	movs	r3, #3
 8005816:	e04b      	b.n	80058b0 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800581e:	3301      	adds	r3, #1
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	b21b      	sxth	r3, r3
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	b21a      	sxth	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800582e:	b21b      	sxth	r3, r3
 8005830:	4313      	orrs	r3, r2
 8005832:	b21b      	sxth	r3, r3
 8005834:	4a20      	ldr	r2, [pc, #128]	@ (80058b8 <check_fs+0xd4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d001      	beq.n	800583e <check_fs+0x5a>
		return 2;
 800583a:	2302      	movs	r3, #2
 800583c:	e038      	b.n	80058b0 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3336      	adds	r3, #54	@ 0x36
 8005842:	3303      	adds	r3, #3
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	061a      	lsls	r2, r3, #24
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3336      	adds	r3, #54	@ 0x36
 800584c:	3302      	adds	r3, #2
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	041b      	lsls	r3, r3, #16
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3336      	adds	r3, #54	@ 0x36
 8005858:	3301      	adds	r3, #1
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	4313      	orrs	r3, r2
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8005866:	4313      	orrs	r3, r2
 8005868:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800586c:	4a13      	ldr	r2, [pc, #76]	@ (80058bc <check_fs+0xd8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d101      	bne.n	8005876 <check_fs+0x92>
		return 0;
 8005872:	2300      	movs	r3, #0
 8005874:	e01c      	b.n	80058b0 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	3352      	adds	r3, #82	@ 0x52
 800587a:	3303      	adds	r3, #3
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	061a      	lsls	r2, r3, #24
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3352      	adds	r3, #82	@ 0x52
 8005884:	3302      	adds	r3, #2
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	041b      	lsls	r3, r3, #16
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3352      	adds	r3, #82	@ 0x52
 8005890:	3301      	adds	r3, #1
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	021b      	lsls	r3, r3, #8
 8005896:	4313      	orrs	r3, r2
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800589e:	4313      	orrs	r3, r2
 80058a0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80058a4:	4a05      	ldr	r2, [pc, #20]	@ (80058bc <check_fs+0xd8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d101      	bne.n	80058ae <check_fs+0xca>
		return 0;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e000      	b.n	80058b0 <check_fs+0xcc>

	return 1;
 80058ae:	2301      	movs	r3, #1
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	ffffaa55 	.word	0xffffaa55
 80058bc:	00544146 	.word	0x00544146

080058c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b096      	sub	sp, #88	@ 0x58
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	4613      	mov	r3, r2
 80058cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80058d4:	68b8      	ldr	r0, [r7, #8]
 80058d6:	f7ff ff41 	bl	800575c <get_ldnumber>
 80058da:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80058dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	da01      	bge.n	80058e6 <find_volume+0x26>
 80058e2:	230b      	movs	r3, #11
 80058e4:	e318      	b.n	8005f18 <find_volume+0x658>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80058e6:	4a99      	ldr	r2, [pc, #612]	@ (8005b4c <find_volume+0x28c>)
 80058e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ee:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80058f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <find_volume+0x3a>
 80058f6:	230c      	movs	r3, #12
 80058f8:	e30e      	b.n	8005f18 <find_volume+0x658>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058fe:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d01c      	beq.n	8005946 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800590c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005912:	785b      	ldrb	r3, [r3, #1]
 8005914:	4618      	mov	r0, r3
 8005916:	f7fd fedd 	bl	80036d4 <disk_status>
 800591a:	4603      	mov	r3, r0
 800591c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005920:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10c      	bne.n	8005946 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d007      	beq.n	8005942 <find_volume+0x82>
 8005932:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800593e:	230a      	movs	r3, #10
 8005940:	e2ea      	b.n	8005f18 <find_volume+0x658>
			return FR_OK;				/* The file system object is valid */
 8005942:	2300      	movs	r3, #0
 8005944:	e2e8      	b.n	8005f18 <find_volume+0x658>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005948:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005952:	b2da      	uxtb	r2, r3
 8005954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800595a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800595c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800595e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005962:	785b      	ldrb	r3, [r3, #1]
 8005964:	4618      	mov	r0, r3
 8005966:	f7fd fecf 	bl	8003708 <disk_initialize>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005970:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800597c:	2303      	movs	r3, #3
 800597e:	e2cb      	b.n	8005f18 <find_volume+0x658>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d007      	beq.n	8005996 <find_volume+0xd6>
 8005986:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8005992:	230a      	movs	r3, #10
 8005994:	e2c0      	b.n	8005f18 <find_volume+0x658>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8005996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005998:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800599c:	7858      	ldrb	r0, [r3, #1]
 800599e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059a4:	330a      	adds	r3, #10
 80059a6:	461a      	mov	r2, r3
 80059a8:	2102      	movs	r1, #2
 80059aa:	f7fd ff13 	bl	80037d4 <disk_ioctl>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10d      	bne.n	80059d0 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80059b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ba:	895b      	ldrh	r3, [r3, #10]
 80059bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059c0:	d306      	bcc.n	80059d0 <find_volume+0x110>
 80059c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059c8:	895b      	ldrh	r3, [r3, #10]
 80059ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ce:	d901      	bls.n	80059d4 <find_volume+0x114>
 80059d0:	2301      	movs	r3, #1
 80059d2:	e2a1      	b.n	8005f18 <find_volume+0x658>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80059d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80059da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80059dc:	f7ff ff02 	bl	80057e4 <check_fs>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80059e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d153      	bne.n	8005a96 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80059ee:	2300      	movs	r3, #0
 80059f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80059f2:	e028      	b.n	8005a46 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80059f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80059fe:	4413      	add	r3, r2
 8005a00:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8005a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a04:	3304      	adds	r3, #4
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d012      	beq.n	8005a32 <find_volume+0x172>
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0e:	330b      	adds	r3, #11
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	061a      	lsls	r2, r3, #24
 8005a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a16:	330a      	adds	r3, #10
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	041b      	lsls	r3, r3, #16
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a20:	3309      	adds	r3, #9
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	4313      	orrs	r3, r2
 8005a28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a2a:	3208      	adds	r2, #8
 8005a2c:	7812      	ldrb	r2, [r2, #0]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	e000      	b.n	8005a34 <find_volume+0x174>
 8005a32:	2200      	movs	r2, #0
 8005a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	3358      	adds	r3, #88	@ 0x58
 8005a3a:	443b      	add	r3, r7
 8005a3c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a42:	3301      	adds	r3, #1
 8005a44:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d9d3      	bls.n	80059f4 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005a50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d002      	beq.n	8005a5c <find_volume+0x19c>
 8005a56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8005a5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	3358      	adds	r3, #88	@ 0x58
 8005a62:	443b      	add	r3, r7
 8005a64:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005a68:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005a6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <find_volume+0x1bc>
 8005a70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005a72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a74:	f7ff feb6 	bl	80057e4 <check_fs>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	e000      	b.n	8005a7e <find_volume+0x1be>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005a82:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <find_volume+0x1d6>
 8005a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d9e2      	bls.n	8005a5c <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005a96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	d101      	bne.n	8005aa2 <find_volume+0x1e2>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e23a      	b.n	8005f18 <find_volume+0x658>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005aa2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <find_volume+0x1ee>
 8005aaa:	230d      	movs	r3, #13
 8005aac:	e234      	b.n	8005f18 <find_volume+0x658>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab0:	7b1b      	ldrb	r3, [r3, #12]
 8005ab2:	b21b      	sxth	r3, r3
 8005ab4:	021b      	lsls	r3, r3, #8
 8005ab6:	b21a      	sxth	r2, r3
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aba:	7adb      	ldrb	r3, [r3, #11]
 8005abc:	b21b      	sxth	r3, r3
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	b21a      	sxth	r2, r3
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ac8:	895b      	ldrh	r3, [r3, #10]
 8005aca:	b21b      	sxth	r3, r3
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d001      	beq.n	8005ad4 <find_volume+0x214>
		return FR_NO_FILESYSTEM;
 8005ad0:	230d      	movs	r3, #13
 8005ad2:	e221      	b.n	8005f18 <find_volume+0x658>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad6:	7ddb      	ldrb	r3, [r3, #23]
 8005ad8:	b21b      	sxth	r3, r3
 8005ada:	021b      	lsls	r3, r3, #8
 8005adc:	b21a      	sxth	r2, r3
 8005ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae0:	7d9b      	ldrb	r3, [r3, #22]
 8005ae2:	b21b      	sxth	r3, r3
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	b21b      	sxth	r3, r3
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8005aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d112      	bne.n	8005b18 <find_volume+0x258>
 8005af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af4:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8005af8:	061a      	lsls	r2, r3, #24
 8005afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8005b00:	041b      	lsls	r3, r3, #16
 8005b02:	431a      	orrs	r2, r3
 8005b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005b0a:	021b      	lsls	r3, r3, #8
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b10:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8005b14:	4313      	orrs	r3, r2
 8005b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8005b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b1e:	461a      	mov	r2, r3
 8005b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b22:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b26:	7c1a      	ldrb	r2, [r3, #16]
 8005b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b2e:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8005b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b36:	78db      	ldrb	r3, [r3, #3]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d009      	beq.n	8005b50 <find_volume+0x290>
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b42:	78db      	ldrb	r3, [r3, #3]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d003      	beq.n	8005b50 <find_volume+0x290>
		return FR_NO_FILESYSTEM;
 8005b48:	230d      	movs	r3, #13
 8005b4a:	e1e5      	b.n	8005f18 <find_volume+0x658>
 8005b4c:	20000154 	.word	0x20000154
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b56:	78db      	ldrb	r3, [r3, #3]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b5c:	fb02 f303 	mul.w	r3, r2, r3
 8005b60:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b64:	7b5a      	ldrb	r2, [r3, #13]
 8005b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b6c:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b74:	789b      	ldrb	r3, [r3, #2]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00c      	beq.n	8005b94 <find_volume+0x2d4>
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b80:	789b      	ldrb	r3, [r3, #2]
 8005b82:	461a      	mov	r2, r3
 8005b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b8a:	789b      	ldrb	r3, [r3, #2]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <find_volume+0x2d8>
		return FR_NO_FILESYSTEM;
 8005b94:	230d      	movs	r3, #13
 8005b96:	e1bf      	b.n	8005f18 <find_volume+0x658>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9a:	7c9b      	ldrb	r3, [r3, #18]
 8005b9c:	b21b      	sxth	r3, r3
 8005b9e:	021b      	lsls	r3, r3, #8
 8005ba0:	b21a      	sxth	r2, r3
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba4:	7c5b      	ldrb	r3, [r3, #17]
 8005ba6:	b21b      	sxth	r3, r3
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	b21b      	sxth	r3, r3
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bb4:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bbc:	891b      	ldrh	r3, [r3, #8]
 8005bbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005bc4:	8952      	ldrh	r2, [r2, #10]
 8005bc6:	0952      	lsrs	r2, r2, #5
 8005bc8:	b292      	uxth	r2, r2
 8005bca:	fbb3 f1f2 	udiv	r1, r3, r2
 8005bce:	fb01 f202 	mul.w	r2, r1, r2
 8005bd2:	1a9b      	subs	r3, r3, r2
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <find_volume+0x31e>
		return FR_NO_FILESYSTEM;
 8005bda:	230d      	movs	r3, #13
 8005bdc:	e19c      	b.n	8005f18 <find_volume+0x658>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be0:	7d1b      	ldrb	r3, [r3, #20]
 8005be2:	b21b      	sxth	r3, r3
 8005be4:	021b      	lsls	r3, r3, #8
 8005be6:	b21a      	sxth	r2, r3
 8005be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bea:	7cdb      	ldrb	r3, [r3, #19]
 8005bec:	b21b      	sxth	r3, r3
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	b21b      	sxth	r3, r3
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005bf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d112      	bne.n	8005c22 <find_volume+0x362>
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bfe:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8005c02:	061a      	lsls	r2, r3, #24
 8005c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c06:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8005c0a:	041b      	lsls	r3, r3, #16
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c10:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005c14:	021b      	lsls	r3, r3, #8
 8005c16:	4313      	orrs	r3, r2
 8005c18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c1a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c24:	7bdb      	ldrb	r3, [r3, #15]
 8005c26:	b21b      	sxth	r3, r3
 8005c28:	021b      	lsls	r3, r3, #8
 8005c2a:	b21a      	sxth	r2, r3
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2e:	7b9b      	ldrb	r3, [r3, #14]
 8005c30:	b21b      	sxth	r3, r3
 8005c32:	4313      	orrs	r3, r2
 8005c34:	b21b      	sxth	r3, r3
 8005c36:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005c38:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <find_volume+0x382>
 8005c3e:	230d      	movs	r3, #13
 8005c40:	e16a      	b.n	8005f18 <find_volume+0x658>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005c42:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005c44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c46:	4413      	add	r3, r2
 8005c48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c4e:	8911      	ldrh	r1, [r2, #8]
 8005c50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c56:	8952      	ldrh	r2, [r2, #10]
 8005c58:	0952      	lsrs	r2, r2, #5
 8005c5a:	b292      	uxth	r2, r2
 8005c5c:	fbb1 f2f2 	udiv	r2, r1, r2
 8005c60:	b292      	uxth	r2, r2
 8005c62:	4413      	add	r3, r2
 8005c64:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005c66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d201      	bcs.n	8005c72 <find_volume+0x3b2>
 8005c6e:	230d      	movs	r3, #13
 8005c70:	e152      	b.n	8005f18 <find_volume+0x658>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005c72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c7e:	7892      	ldrb	r2, [r2, #2]
 8005c80:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c84:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <find_volume+0x3d0>
 8005c8c:	230d      	movs	r3, #13
 8005c8e:	e143      	b.n	8005f18 <find_volume+0x658>
	fmt = FS_FAT12;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d902      	bls.n	8005ca6 <find_volume+0x3e6>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d902      	bls.n	8005cb6 <find_volume+0x3f6>
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	3302      	adds	r3, #2
 8005cba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005cbc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005cc0:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ccc:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005cce:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cd2:	4413      	add	r3, r2
 8005cd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005cd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005cda:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8005cdc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce0:	4413      	add	r3, r2
 8005ce2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ce4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ce8:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8005cea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d124      	bne.n	8005d3c <find_volume+0x47c>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cf8:	891b      	ldrh	r3, [r3, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <find_volume+0x442>
 8005cfe:	230d      	movs	r3, #13
 8005d00:	e10a      	b.n	8005f18 <find_volume+0x658>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d04:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005d08:	061a      	lsls	r2, r3, #24
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005d10:	041b      	lsls	r3, r3, #16
 8005d12:	431a      	orrs	r2, r3
 8005d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005d1a:	021b      	lsls	r3, r3, #8
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d20:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8005d24:	4313      	orrs	r3, r2
 8005d26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d2c:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d3a:	e02b      	b.n	8005d94 <find_volume+0x4d4>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d42:	891b      	ldrh	r3, [r3, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <find_volume+0x48c>
 8005d48:	230d      	movs	r3, #13
 8005d4a:	e0e5      	b.n	8005f18 <find_volume+0x658>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d52:	6a1a      	ldr	r2, [r3, #32]
 8005d54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d56:	4413      	add	r3, r2
 8005d58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d5e:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005d60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d105      	bne.n	8005d74 <find_volume+0x4b4>
 8005d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	e00e      	b.n	8005d92 <find_volume+0x4d2>
 8005d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d7a:	695a      	ldr	r2, [r3, #20]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	4413      	add	r3, r2
 8005d82:	085a      	lsrs	r2, r3, #1
 8005d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005d92:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d9a:	699a      	ldr	r2, [r3, #24]
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005da2:	895b      	ldrh	r3, [r3, #10]
 8005da4:	4619      	mov	r1, r3
 8005da6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005da8:	440b      	add	r3, r1
 8005daa:	3b01      	subs	r3, #1
 8005dac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005dae:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8005db2:	8949      	ldrh	r1, [r1, #10]
 8005db4:	fbb3 f3f1 	udiv	r3, r3, r1
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d201      	bcs.n	8005dc0 <find_volume+0x500>
		return FR_NO_FILESYSTEM;
 8005dbc:	230d      	movs	r3, #13
 8005dbe:	e0ab      	b.n	8005f18 <find_volume+0x658>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dcc:	6113      	str	r3, [r2, #16]
 8005dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005dd8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ddc:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005de4:	2280      	movs	r2, #128	@ 0x80
 8005de6:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005de8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005dec:	2b03      	cmp	r3, #3
 8005dee:	d17c      	bne.n	8005eea <find_volume+0x62a>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005df6:	b21b      	sxth	r3, r3
 8005df8:	021b      	lsls	r3, r3, #8
 8005dfa:	b21a      	sxth	r2, r3
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005e02:	b21b      	sxth	r3, r3
 8005e04:	4313      	orrs	r3, r2
 8005e06:	b21b      	sxth	r3, r3
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d16e      	bne.n	8005eea <find_volume+0x62a>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005e0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e0e:	3301      	adds	r3, #1
 8005e10:	4619      	mov	r1, r3
 8005e12:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005e14:	f7fd ff84 	bl	8003d20 <move_window>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d165      	bne.n	8005eea <find_volume+0x62a>
	{
		fs->fsi_flag = 0;
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e24:	2200      	movs	r2, #0
 8005e26:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2a:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8005e2e:	b21b      	sxth	r3, r3
 8005e30:	021b      	lsls	r3, r3, #8
 8005e32:	b21a      	sxth	r2, r3
 8005e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e36:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8005e3a:	b21b      	sxth	r3, r3
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	b21b      	sxth	r3, r3
 8005e40:	4a37      	ldr	r2, [pc, #220]	@ (8005f20 <find_volume+0x660>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d151      	bne.n	8005eea <find_volume+0x62a>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e48:	78db      	ldrb	r3, [r3, #3]
 8005e4a:	061a      	lsls	r2, r3, #24
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4e:	789b      	ldrb	r3, [r3, #2]
 8005e50:	041b      	lsls	r3, r3, #16
 8005e52:	431a      	orrs	r2, r3
 8005e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	021b      	lsls	r3, r3, #8
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e5e:	7812      	ldrb	r2, [r2, #0]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	4a30      	ldr	r2, [pc, #192]	@ (8005f24 <find_volume+0x664>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d140      	bne.n	8005eea <find_volume+0x62a>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e6a:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8005e6e:	061a      	lsls	r2, r3, #24
 8005e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e72:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8005e76:	041b      	lsls	r3, r3, #16
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e7c:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	4313      	orrs	r3, r2
 8005e84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e86:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	4a26      	ldr	r2, [pc, #152]	@ (8005f28 <find_volume+0x668>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d12b      	bne.n	8005eea <find_volume+0x62a>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e94:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8005e98:	061a      	lsls	r2, r3, #24
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9c:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8005ea0:	041b      	lsls	r3, r3, #16
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea6:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8005eaa:	021b      	lsls	r3, r3, #8
 8005eac:	4313      	orrs	r3, r2
 8005eae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005eb0:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005eb8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ebc:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec0:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8005ec4:	061a      	lsls	r2, r3, #24
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec8:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8005ecc:	041b      	lsls	r3, r3, #16
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed2:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8005ed6:	021b      	lsls	r3, r3, #8
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005edc:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ee4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ee8:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ef6:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8005ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8005f2c <find_volume+0x66c>)
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	3301      	adds	r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	4b0a      	ldr	r3, [pc, #40]	@ (8005f2c <find_volume+0x66c>)
 8005f02:	801a      	strh	r2, [r3, #0]
 8005f04:	4b09      	ldr	r3, [pc, #36]	@ (8005f2c <find_volume+0x66c>)
 8005f06:	881a      	ldrh	r2, [r3, #0]
 8005f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f0e:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005f10:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005f12:	f7fd fe89 	bl	8003c28 <clear_lock>
#endif

	return FR_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3758      	adds	r7, #88	@ 0x58
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	ffffaa55 	.word	0xffffaa55
 8005f24:	41615252 	.word	0x41615252
 8005f28:	61417272 	.word	0x61417272
 8005f2c:	20000158 	.word	0x20000158

08005f30 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d02a      	beq.n	8005f98 <validate+0x68>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d024      	beq.n	8005f98 <validate+0x68>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d01b      	beq.n	8005f98 <validate+0x68>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f6c:	88da      	ldrh	r2, [r3, #6]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f74:	889b      	ldrh	r3, [r3, #4]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d10e      	bne.n	8005f98 <validate+0x68>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f86:	785b      	ldrb	r3, [r3, #1]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fd fba3 	bl	80036d4 <disk_status>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <validate+0x6c>
		return FR_INVALID_OBJECT;
 8005f98:	2309      	movs	r3, #9
 8005f9a:	e000      	b.n	8005f9e <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005fba:	f107 0310 	add.w	r3, r7, #16
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff fbcc 	bl	800575c <get_ldnumber>
 8005fc4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	da01      	bge.n	8005fd0 <f_mount+0x28>
 8005fcc:	230b      	movs	r3, #11
 8005fce:	e02f      	b.n	8006030 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005fd0:	4a19      	ldr	r2, [pc, #100]	@ (8006038 <f_mount+0x90>)
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8005fe0:	69b8      	ldr	r0, [r7, #24]
 8005fe2:	f7fd fe21 	bl	8003c28 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fec:	2200      	movs	r2, #0
 8005fee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d004      	beq.n	8006000 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	490d      	ldr	r1, [pc, #52]	@ (8006038 <f_mount+0x90>)
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <f_mount+0x6e>
 8006010:	79fb      	ldrb	r3, [r7, #7]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d001      	beq.n	800601a <f_mount+0x72>
 8006016:	2300      	movs	r3, #0
 8006018:	e00a      	b.n	8006030 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800601a:	f107 0108 	add.w	r1, r7, #8
 800601e:	f107 030c 	add.w	r3, r7, #12
 8006022:	2200      	movs	r2, #0
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fc4b 	bl	80058c0 <find_volume>
 800602a:	4603      	mov	r3, r0
 800602c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800602e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3720      	adds	r7, #32
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	20000154 	.word	0x20000154

0800603c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800604a:	f843 0c4c 	str.w	r0, [r3, #-76]
 800604e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006052:	f843 1c50 	str.w	r1, [r3, #-80]
 8006056:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800605a:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800605e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006062:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <f_open+0x32>
 800606a:	2309      	movs	r3, #9
 800606c:	e2f3      	b.n	8006656 <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 800606e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006072:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800607a:	461a      	mov	r2, r3
 800607c:	2300      	movs	r3, #0
 800607e:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006080:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006084:	461a      	mov	r2, r3
 8006086:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800608a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800608e:	f003 031f 	and.w	r3, r3, #31
 8006092:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006096:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800609a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800609e:	f023 0301 	bic.w	r3, r3, #1
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	f107 0118 	add.w	r1, r7, #24
 80060a8:	3910      	subs	r1, #16
 80060aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80060ae:	3b18      	subs	r3, #24
 80060b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff fc03 	bl	80058c0 <find_volume>
 80060ba:	4603      	mov	r3, r0
 80060bc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80060c0:	f102 0217 	add.w	r2, r2, #23
 80060c4:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80060c6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80060ca:	f103 0317 	add.w	r3, r3, #23
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f040 82bb 	bne.w	800664c <f_open+0x610>
		INIT_BUF(dj);
 80060d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80060da:	461a      	mov	r2, r3
 80060dc:	f107 0318 	add.w	r3, r7, #24
 80060e0:	3b04      	subs	r3, #4
 80060e2:	f8c2 3fe0 	str.w	r3, [r2, #4064]	@ 0xfe0
 80060e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80060ea:	461a      	mov	r2, r3
 80060ec:	4bd3      	ldr	r3, [pc, #844]	@ (800643c <f_open+0x400>)
 80060ee:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 80060f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80060f6:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80060fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80060fe:	3b18      	subs	r3, #24
 8006100:	4611      	mov	r1, r2
 8006102:	4618      	mov	r0, r3
 8006104:	f7ff fab4 	bl	8005670 <follow_path>
 8006108:	4603      	mov	r3, r0
 800610a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800610e:	f102 0217 	add.w	r2, r2, #23
 8006112:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8006114:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006118:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 800611c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006120:	f102 0210 	add.w	r2, r2, #16
 8006124:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006126:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800612a:	f103 0317 	add.w	r3, r3, #23
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d124      	bne.n	800617e <f_open+0x142>
			if (!dir)	/* Default directory itself */
 8006134:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006138:	f103 0310 	add.w	r3, r3, #16
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <f_open+0x114>
				res = FR_INVALID_NAME;
 8006142:	2306      	movs	r3, #6
 8006144:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006148:	f102 0217 	add.w	r2, r2, #23
 800614c:	7013      	strb	r3, [r2, #0]
 800614e:	e016      	b.n	800617e <f_open+0x142>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006150:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006154:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006158:	2b01      	cmp	r3, #1
 800615a:	bf8c      	ite	hi
 800615c:	2301      	movhi	r3, #1
 800615e:	2300      	movls	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	461a      	mov	r2, r3
 8006164:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006168:	3b18      	subs	r3, #24
 800616a:	4611      	mov	r1, r2
 800616c:	4618      	mov	r0, r3
 800616e:	f7fd fbc7 	bl	8003900 <chk_lock>
 8006172:	4603      	mov	r3, r0
 8006174:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006178:	f102 0217 	add.w	r2, r2, #23
 800617c:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800617e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006182:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006186:	f003 031c 	and.w	r3, r3, #28
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 813c 	beq.w	8006408 <f_open+0x3cc>
			if (res != FR_OK) {					/* No file, create new */
 8006190:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006194:	f103 0317 	add.w	r3, r3, #23
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d02e      	beq.n	80061fc <f_open+0x1c0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800619e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80061a2:	f103 0317 	add.w	r3, r3, #23
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d112      	bne.n	80061d2 <f_open+0x196>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80061ac:	f7fd fc18 	bl	80039e0 <enq_lock>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d007      	beq.n	80061c6 <f_open+0x18a>
 80061b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80061ba:	3b18      	subs	r3, #24
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fe ff75 	bl	80050ac <dir_register>
 80061c2:	4603      	mov	r3, r0
 80061c4:	e000      	b.n	80061c8 <f_open+0x18c>
 80061c6:	2312      	movs	r3, #18
 80061c8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80061cc:	f102 0217 	add.w	r2, r2, #23
 80061d0:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80061d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80061d6:	461a      	mov	r2, r3
 80061d8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80061dc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80061e0:	f043 0308 	orr.w	r3, r3, #8
 80061e4:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 80061e8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80061ec:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 80061f0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80061f4:	f102 0210 	add.w	r2, r2, #16
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	e01f      	b.n	800623c <f_open+0x200>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80061fc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006200:	f103 0310 	add.w	r3, r3, #16
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	330b      	adds	r3, #11
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	f003 0311 	and.w	r3, r3, #17
 800620e:	2b00      	cmp	r3, #0
 8006210:	d006      	beq.n	8006220 <f_open+0x1e4>
					res = FR_DENIED;
 8006212:	2307      	movs	r3, #7
 8006214:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006218:	f102 0217 	add.w	r2, r2, #23
 800621c:	7013      	strb	r3, [r2, #0]
 800621e:	e00d      	b.n	800623c <f_open+0x200>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8006220:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006224:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	d005      	beq.n	800623c <f_open+0x200>
						res = FR_EXIST;
 8006230:	2308      	movs	r3, #8
 8006232:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006236:	f102 0217 	add.w	r2, r2, #23
 800623a:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800623c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006240:	f103 0317 	add.w	r3, r3, #23
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	f040 8113 	bne.w	8006472 <f_open+0x436>
 800624c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006250:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 810a 	beq.w	8006472 <f_open+0x436>
				dw = GET_FATTIME();				/* Created time */
 800625e:	f7fd f9dd 	bl	800361c <get_fattime>
 8006262:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006266:	f103 030c 	add.w	r3, r3, #12
 800626a:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800626c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006270:	f103 0310 	add.w	r3, r3, #16
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	330e      	adds	r3, #14
 8006278:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800627c:	f102 020c 	add.w	r2, r2, #12
 8006280:	6812      	ldr	r2, [r2, #0]
 8006282:	b2d2      	uxtb	r2, r2
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800628a:	f103 030c 	add.w	r3, r3, #12
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	b29b      	uxth	r3, r3
 8006292:	0a1b      	lsrs	r3, r3, #8
 8006294:	b29a      	uxth	r2, r3
 8006296:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800629a:	f103 0310 	add.w	r3, r3, #16
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	330f      	adds	r3, #15
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	701a      	strb	r2, [r3, #0]
 80062a6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80062aa:	f103 030c 	add.w	r3, r3, #12
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	0c1a      	lsrs	r2, r3, #16
 80062b2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80062b6:	f103 0310 	add.w	r3, r3, #16
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3310      	adds	r3, #16
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80062c6:	f103 030c 	add.w	r3, r3, #12
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	0e1a      	lsrs	r2, r3, #24
 80062ce:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80062d2:	f103 0310 	add.w	r3, r3, #16
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3311      	adds	r3, #17
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80062de:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80062e2:	f103 0310 	add.w	r3, r3, #16
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	330b      	adds	r3, #11
 80062ea:	2200      	movs	r2, #0
 80062ec:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80062ee:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80062f2:	f103 0310 	add.w	r3, r3, #16
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	331c      	adds	r3, #28
 80062fa:	2200      	movs	r2, #0
 80062fc:	701a      	strb	r2, [r3, #0]
 80062fe:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006302:	f103 0310 	add.w	r3, r3, #16
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	331d      	adds	r3, #29
 800630a:	2200      	movs	r2, #0
 800630c:	701a      	strb	r2, [r3, #0]
 800630e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006312:	f103 0310 	add.w	r3, r3, #16
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	331e      	adds	r3, #30
 800631a:	2200      	movs	r2, #0
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006322:	f103 0310 	add.w	r3, r3, #16
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	331f      	adds	r3, #31
 800632a:	2200      	movs	r2, #0
 800632c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800632e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006332:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006336:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800633a:	f102 0210 	add.w	r2, r2, #16
 800633e:	6811      	ldr	r1, [r2, #0]
 8006340:	4618      	mov	r0, r3
 8006342:	f7fe fc00 	bl	8004b46 <ld_clust>
 8006346:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800634a:	f103 0308 	add.w	r3, r3, #8
 800634e:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8006350:	2100      	movs	r1, #0
 8006352:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006356:	f103 0310 	add.w	r3, r3, #16
 800635a:	6818      	ldr	r0, [r3, #0]
 800635c:	f7fe fc23 	bl	8004ba6 <st_clust>
				dj.fs->wflag = 1;
 8006360:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006364:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006368:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800636c:	2201      	movs	r2, #1
 800636e:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8006370:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006374:	f103 0308 	add.w	r3, r3, #8
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d079      	beq.n	8006472 <f_open+0x436>
					dw = dj.fs->winsect;
 800637e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006382:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8006386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800638a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006390:	f102 020c 	add.w	r2, r2, #12
 8006394:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8006396:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800639a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800639e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80063a2:	f102 0208 	add.w	r2, r2, #8
 80063a6:	6811      	ldr	r1, [r2, #0]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7fe f81d 	bl	80043e8 <remove_chain>
 80063ae:	4603      	mov	r3, r0
 80063b0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80063b4:	f102 0217 	add.w	r2, r2, #23
 80063b8:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80063ba:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80063be:	f103 0317 	add.w	r3, r3, #23
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d154      	bne.n	8006472 <f_open+0x436>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80063c8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80063cc:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 80063d0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80063d4:	f103 0308 	add.w	r3, r3, #8
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3b01      	subs	r3, #1
 80063dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80063e0:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 80063e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80063e6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80063ea:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80063ee:	f102 020c 	add.w	r2, r2, #12
 80063f2:	6811      	ldr	r1, [r2, #0]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fd fc93 	bl	8003d20 <move_window>
 80063fa:	4603      	mov	r3, r0
 80063fc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006400:	f102 0217 	add.w	r2, r2, #23
 8006404:	7013      	strb	r3, [r2, #0]
 8006406:	e034      	b.n	8006472 <f_open+0x436>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006408:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800640c:	f103 0317 	add.w	r3, r3, #23
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d12d      	bne.n	8006472 <f_open+0x436>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006416:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800641a:	f103 0310 	add.w	r3, r3, #16
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	330b      	adds	r3, #11
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	f003 0310 	and.w	r3, r3, #16
 8006428:	2b00      	cmp	r3, #0
 800642a:	d009      	beq.n	8006440 <f_open+0x404>
					res = FR_NO_FILE;
 800642c:	2304      	movs	r3, #4
 800642e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006432:	f102 0217 	add.w	r2, r2, #23
 8006436:	7013      	strb	r3, [r2, #0]
 8006438:	e01b      	b.n	8006472 <f_open+0x436>
 800643a:	bf00      	nop
 800643c:	20000174 	.word	0x20000174
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006440:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006444:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d010      	beq.n	8006472 <f_open+0x436>
 8006450:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006454:	f103 0310 	add.w	r3, r3, #16
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	330b      	adds	r3, #11
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d005      	beq.n	8006472 <f_open+0x436>
						res = FR_DENIED;
 8006466:	2307      	movs	r3, #7
 8006468:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800646c:	f102 0217 	add.w	r2, r2, #23
 8006470:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8006472:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006476:	f103 0317 	add.w	r3, r3, #23
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d155      	bne.n	800652c <f_open+0x4f0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006480:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006484:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <f_open+0x46a>
				mode |= FA__WRITTEN;
 8006490:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006494:	461a      	mov	r2, r3
 8006496:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800649a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800649e:	f043 0320 	orr.w	r3, r3, #32
 80064a2:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80064a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80064aa:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80064ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b4:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80064b8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80064bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80064c0:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 80064c2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80064c6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80064ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ce:	461a      	mov	r2, r3
 80064d0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80064d4:	f103 0310 	add.w	r3, r3, #16
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80064dc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80064e0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	bf8c      	ite	hi
 80064e8:	2301      	movhi	r3, #1
 80064ea:	2300      	movls	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	461a      	mov	r2, r3
 80064f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80064f4:	3b18      	subs	r3, #24
 80064f6:	4611      	mov	r1, r2
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fd fa95 	bl	8003a28 <inc_lock>
 80064fe:	4602      	mov	r2, r0
 8006500:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006504:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006508:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800650c:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800650e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006512:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006516:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800651a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651c:	2b00      	cmp	r3, #0
 800651e:	d105      	bne.n	800652c <f_open+0x4f0>
 8006520:	2302      	movs	r3, #2
 8006522:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006526:	f102 0217 	add.w	r2, r2, #23
 800652a:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800652c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006530:	f103 0317 	add.w	r3, r3, #23
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	f040 8088 	bne.w	800664c <f_open+0x610>
			fp->flag = mode;					/* File access mode */
 800653c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006540:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006544:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006548:	461a      	mov	r2, r3
 800654a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800654e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8006552:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8006554:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006558:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800655c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006560:	2200      	movs	r2, #0
 8006562:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006564:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006568:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800656c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8006570:	f102 0210 	add.w	r2, r2, #16
 8006574:	6811      	ldr	r1, [r2, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fae5 	bl	8004b46 <ld_clust>
 800657c:	4602      	mov	r2, r0
 800657e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006582:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800658a:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800658c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006590:	f103 0310 	add.w	r3, r3, #16
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	331f      	adds	r3, #31
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	061a      	lsls	r2, r3, #24
 800659c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80065a0:	f103 0310 	add.w	r3, r3, #16
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	331e      	adds	r3, #30
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	041b      	lsls	r3, r3, #16
 80065ac:	431a      	orrs	r2, r3
 80065ae:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80065b2:	f103 0310 	add.w	r3, r3, #16
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	331d      	adds	r3, #29
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	021b      	lsls	r3, r3, #8
 80065be:	4313      	orrs	r3, r2
 80065c0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80065c4:	f102 0210 	add.w	r2, r2, #16
 80065c8:	6812      	ldr	r2, [r2, #0]
 80065ca:	321c      	adds	r2, #28
 80065cc:	7812      	ldrb	r2, [r2, #0]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80065d4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80065d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80065dc:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 80065de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80065e2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80065e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065ea:	461a      	mov	r2, r3
 80065ec:	2300      	movs	r3, #0
 80065ee:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 80065f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80065f4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80065f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065fc:	461a      	mov	r2, r3
 80065fe:	2300      	movs	r3, #0
 8006600:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006602:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006606:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800660a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800660e:	461a      	mov	r2, r3
 8006610:	2300      	movs	r3, #0
 8006612:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006614:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006618:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800661c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8006620:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8006624:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006628:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800662a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800662e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800663c:	88da      	ldrh	r2, [r3, #6]
 800663e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006642:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8006646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800664a:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800664c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8006650:	f103 0317 	add.w	r3, r3, #23
 8006654:	781b      	ldrb	r3, [r3, #0]
}
 8006656:	4618      	mov	r0, r3
 8006658:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop

08006664 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08c      	sub	sp, #48	@ 0x30
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f7ff fc57 	bl	8005f30 <validate>
 8006682:	4603      	mov	r3, r0
 8006684:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006686:	7ffb      	ldrb	r3, [r7, #31]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <f_read+0x2c>
 800668c:	7ffb      	ldrb	r3, [r7, #31]
 800668e:	e1cd      	b.n	8006a2c <f_read+0x3c8>
	if (fp->err)								/* Check error */
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006696:	79db      	ldrb	r3, [r3, #7]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d004      	beq.n	80066a6 <f_read+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066a2:	79db      	ldrb	r3, [r3, #7]
 80066a4:	e1c2      	b.n	8006a2c <f_read+0x3c8>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066ac:	799b      	ldrb	r3, [r3, #6]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <f_read+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80066b6:	2307      	movs	r3, #7
 80066b8:	e1b8      	b.n	8006a2c <f_read+0x3c8>
	remain = fp->fsize - fp->fptr;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	f240 81a5 	bls.w	8006a22 <f_read+0x3be>
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80066dc:	e1a1      	b.n	8006a22 <f_read+0x3be>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80066ec:	6812      	ldr	r2, [r2, #0]
 80066ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80066f2:	8952      	ldrh	r2, [r2, #10]
 80066f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80066f8:	fb01 f202 	mul.w	r2, r1, r2
 80066fc:	1a9b      	subs	r3, r3, r2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f040 8140 	bne.w	8006984 <f_read+0x320>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006712:	6812      	ldr	r2, [r2, #0]
 8006714:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006718:	8952      	ldrh	r2, [r2, #10]
 800671a:	fbb3 f3f2 	udiv	r3, r3, r2
 800671e:	b2da      	uxtb	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800672c:	789b      	ldrb	r3, [r3, #2]
 800672e:	3b01      	subs	r3, #1
 8006730:	b2db      	uxtb	r3, r3
 8006732:	4013      	ands	r3, r2
 8006734:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8006736:	7dfb      	ldrb	r3, [r7, #23]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d143      	bne.n	80067c4 <f_read+0x160>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d105      	bne.n	8006754 <f_read+0xf0>
					clst = fp->sclust;			/* Follow from the origin */
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006752:	e01c      	b.n	800678e <f_read+0x12a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800675a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675c:	2b00      	cmp	r3, #0
 800675e:	d009      	beq.n	8006774 <f_read+0x110>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	4619      	mov	r1, r3
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f7fd ff45 	bl	80045fa <clmt_clust>
 8006770:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006772:	e00c      	b.n	800678e <f_read+0x12a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	4619      	mov	r1, r3
 8006786:	4610      	mov	r0, r2
 8006788:	f7fd fbdf 	bl	8003f4a <get_fat>
 800678c:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800678e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006790:	2b01      	cmp	r3, #1
 8006792:	d806      	bhi.n	80067a2 <f_read+0x13e>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800679a:	2202      	movs	r2, #2
 800679c:	71da      	strb	r2, [r3, #7]
 800679e:	2302      	movs	r3, #2
 80067a0:	e144      	b.n	8006a2c <f_read+0x3c8>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80067a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a8:	d106      	bne.n	80067b8 <f_read+0x154>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067b0:	2201      	movs	r2, #1
 80067b2:	71da      	strb	r2, [r3, #7]
 80067b4:	2301      	movs	r3, #1
 80067b6:	e139      	b.n	8006a2c <f_read+0x3c8>
				fp->clust = clst;				/* Update current cluster */
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067be:	461a      	mov	r2, r3
 80067c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c2:	6153      	str	r3, [r2, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	4619      	mov	r1, r3
 80067d6:	4610      	mov	r0, r2
 80067d8:	f7fd fb93 	bl	8003f02 <clust2sect>
 80067dc:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d106      	bne.n	80067f2 <f_read+0x18e>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067ea:	2202      	movs	r2, #2
 80067ec:	71da      	strb	r2, [r3, #7]
 80067ee:	2302      	movs	r3, #2
 80067f0:	e11c      	b.n	8006a2c <f_read+0x3c8>
			sect += csect;
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	4413      	add	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006806:	895b      	ldrh	r3, [r3, #10]
 8006808:	461a      	mov	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006810:	627b      	str	r3, [r7, #36]	@ 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	2b00      	cmp	r3, #0
 8006816:	d066      	beq.n	80068e6 <f_read+0x282>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006818:	7dfa      	ldrb	r2, [r7, #23]
 800681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681c:	4413      	add	r3, r2
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006824:	6812      	ldr	r2, [r2, #0]
 8006826:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800682a:	7892      	ldrb	r2, [r2, #2]
 800682c:	4293      	cmp	r3, r2
 800682e:	d90a      	bls.n	8006846 <f_read+0x1e2>
					cc = fp->fs->csize - csect;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800683c:	789b      	ldrb	r3, [r3, #2]
 800683e:	461a      	mov	r2, r3
 8006840:	7dfb      	ldrb	r3, [r7, #23]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	627b      	str	r3, [r7, #36]	@ 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006852:	7858      	ldrb	r0, [r3, #1]
 8006854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	6a39      	ldr	r1, [r7, #32]
 800685a:	f7fc ff7b 	bl	8003754 <disk_read>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d006      	beq.n	8006872 <f_read+0x20e>
					ABORT(fp->fs, FR_DISK_ERR);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800686a:	2201      	movs	r2, #1
 800686c:	71da      	strb	r2, [r3, #7]
 800686e:	2301      	movs	r3, #1
 8006870:	e0dc      	b.n	8006a2c <f_read+0x3c8>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006878:	799b      	ldrb	r3, [r3, #6]
 800687a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	d024      	beq.n	80068cc <f_read+0x268>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006890:	429a      	cmp	r2, r3
 8006892:	d91b      	bls.n	80068cc <f_read+0x268>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800689a:	699a      	ldr	r2, [r3, #24]
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80068a6:	6812      	ldr	r2, [r2, #0]
 80068a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80068ac:	8952      	ldrh	r2, [r2, #10]
 80068ae:	fb02 f303 	mul.w	r3, r2, r3
 80068b2:	6a3a      	ldr	r2, [r7, #32]
 80068b4:	18d0      	adds	r0, r2, r3
 80068b6:	68f9      	ldr	r1, [r7, #12]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068c4:	895b      	ldrh	r3, [r3, #10]
 80068c6:	461a      	mov	r2, r3
 80068c8:	f7fc ffa2 	bl	8003810 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068d8:	895b      	ldrh	r3, [r3, #10]
 80068da:	461a      	mov	r2, r3
 80068dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068de:	fb02 f303 	mul.w	r3, r2, r3
 80068e2:	62bb      	str	r3, [r7, #40]	@ 0x28
				continue;
 80068e4:	e085      	b.n	80069f2 <f_read+0x38e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d041      	beq.n	8006978 <f_read+0x314>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068fa:	799b      	ldrb	r3, [r3, #6]
 80068fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	d023      	beq.n	800694c <f_read+0x2e8>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006910:	7858      	ldrb	r0, [r3, #1]
 8006912:	68f9      	ldr	r1, [r7, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800691a:	699a      	ldr	r2, [r3, #24]
 800691c:	2301      	movs	r3, #1
 800691e:	f7fc ff39 	bl	8003794 <disk_write>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d006      	beq.n	8006936 <f_read+0x2d2>
						ABORT(fp->fs, FR_DISK_ERR);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800692e:	2201      	movs	r2, #1
 8006930:	71da      	strb	r2, [r3, #7]
 8006932:	2301      	movs	r3, #1
 8006934:	e07a      	b.n	8006a2c <f_read+0x3c8>
					fp->flag &= ~FA__DIRTY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800693c:	799b      	ldrb	r3, [r3, #6]
 800693e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006942:	b2da      	uxtb	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800694a:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006958:	7858      	ldrb	r0, [r3, #1]
 800695a:	68f9      	ldr	r1, [r7, #12]
 800695c:	2301      	movs	r3, #1
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	f7fc fef8 	bl	8003754 <disk_read>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d006      	beq.n	8006978 <f_read+0x314>
					ABORT(fp->fs, FR_DISK_ERR);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006970:	2201      	movs	r2, #1
 8006972:	71da      	strb	r2, [r3, #7]
 8006974:	2301      	movs	r3, #1
 8006976:	e059      	b.n	8006a2c <f_read+0x3c8>
			}
#endif
			fp->dsect = sect;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800697e:	461a      	mov	r2, r3
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	6193      	str	r3, [r2, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006990:	895b      	ldrh	r3, [r3, #10]
 8006992:	4618      	mov	r0, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80069a2:	6812      	ldr	r2, [r2, #0]
 80069a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80069a8:	8952      	ldrh	r2, [r2, #10]
 80069aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80069ae:	fb01 f202 	mul.w	r2, r1, r2
 80069b2:	1a9b      	subs	r3, r3, r2
 80069b4:	1ac3      	subs	r3, r0, r3
 80069b6:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (rcnt > btr) rcnt = btr;
 80069b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d901      	bls.n	80069c4 <f_read+0x360>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	62bb      	str	r3, [r7, #40]	@ 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80069d2:	6812      	ldr	r2, [r2, #0]
 80069d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80069d8:	8952      	ldrh	r2, [r2, #10]
 80069da:	fbb3 f1f2 	udiv	r1, r3, r2
 80069de:	fb01 f202 	mul.w	r2, r1, r2
 80069e2:	1a9b      	subs	r3, r3, r2
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4413      	add	r3, r2
 80069e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069ea:	4619      	mov	r1, r3
 80069ec:	6a38      	ldr	r0, [r7, #32]
 80069ee:	f7fc ff0f 	bl	8003810 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80069f2:	6a3a      	ldr	r2, [r7, #32]
 80069f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f6:	4413      	add	r3, r2
 80069f8:	623b      	str	r3, [r7, #32]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a04:	4413      	add	r3, r2
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006a0c:	6093      	str	r3, [r2, #8]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a14:	441a      	add	r2, r3
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f47f ae5a 	bne.w	80066de <f_read+0x7a>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3730      	adds	r7, #48	@ 0x30
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08a      	sub	sp, #40	@ 0x28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f7ff fa6f 	bl	8005f30 <validate>
 8006a52:	4603      	mov	r3, r0
 8006a54:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006a56:	7dfb      	ldrb	r3, [r7, #23]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <f_write+0x2c>
 8006a5c:	7dfb      	ldrb	r3, [r7, #23]
 8006a5e:	e21e      	b.n	8006e9e <f_write+0x46a>
	if (fp->err)							/* Check error */
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a66:	79db      	ldrb	r3, [r3, #7]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d004      	beq.n	8006a76 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a72:	79db      	ldrb	r3, [r3, #7]
 8006a74:	e213      	b.n	8006e9e <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a7c:	799b      	ldrb	r3, [r3, #6]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006a86:	2307      	movs	r3, #7
 8006a88:	e209      	b.n	8006e9e <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a90:	689a      	ldr	r2, [r3, #8]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	441a      	add	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	f080 81d9 	bcs.w	8006e56 <f_write+0x422>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8006aa8:	e1d5      	b.n	8006e56 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006ab8:	6812      	ldr	r2, [r2, #0]
 8006aba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006abe:	8952      	ldrh	r2, [r2, #10]
 8006ac0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ac4:	fb01 f202 	mul.w	r2, r1, r2
 8006ac8:	1a9b      	subs	r3, r3, r2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f040 8169 	bne.w	8006da2 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006ade:	6812      	ldr	r2, [r2, #0]
 8006ae0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006ae4:	8952      	ldrh	r2, [r2, #10]
 8006ae6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006af8:	789b      	ldrb	r3, [r3, #2]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	4013      	ands	r3, r2
 8006b00:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8006b02:	7dbb      	ldrb	r3, [r7, #22]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d15f      	bne.n	8006bc8 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d111      	bne.n	8006b38 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d126      	bne.n	8006b72 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fd fcbb 	bl	80044aa <create_chain>
 8006b34:	6278      	str	r0, [r7, #36]	@ 0x24
 8006b36:	e01c      	b.n	8006b72 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d009      	beq.n	8006b58 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f7fd fd53 	bl	80045fa <clmt_clust>
 8006b54:	6278      	str	r0, [r7, #36]	@ 0x24
 8006b56:	e00c      	b.n	8006b72 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	4610      	mov	r0, r2
 8006b6c:	f7fd fc9d 	bl	80044aa <create_chain>
 8006b70:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 8173 	beq.w	8006e60 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d106      	bne.n	8006b8e <f_write+0x15a>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b86:	2202      	movs	r2, #2
 8006b88:	71da      	strb	r2, [r3, #7]
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	e187      	b.n	8006e9e <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b94:	d106      	bne.n	8006ba4 <f_write+0x170>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	71da      	strb	r2, [r3, #7]
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e17c      	b.n	8006e9e <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006baa:	461a      	mov	r2, r3
 8006bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bae:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d105      	bne.n	8006bc8 <f_write+0x194>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc6:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bce:	799b      	ldrb	r3, [r3, #6]
 8006bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d023      	beq.n	8006c20 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006be4:	7858      	ldrb	r0, [r3, #1]
 8006be6:	68f9      	ldr	r1, [r7, #12]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bee:	699a      	ldr	r2, [r3, #24]
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	f7fc fdcf 	bl	8003794 <disk_write>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d006      	beq.n	8006c0a <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c02:	2201      	movs	r2, #1
 8006c04:	71da      	strb	r2, [r3, #7]
 8006c06:	2301      	movs	r3, #1
 8006c08:	e149      	b.n	8006e9e <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c10:	799b      	ldrb	r3, [r3, #6]
 8006c12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c1e:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	4619      	mov	r1, r3
 8006c32:	4610      	mov	r0, r2
 8006c34:	f7fd f965 	bl	8003f02 <clust2sect>
 8006c38:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d106      	bne.n	8006c4e <f_write+0x21a>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c46:	2202      	movs	r2, #2
 8006c48:	71da      	strb	r2, [r3, #7]
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e127      	b.n	8006e9e <f_write+0x46a>
			sect += csect;
 8006c4e:	7dbb      	ldrb	r3, [r7, #22]
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4413      	add	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c62:	895b      	ldrh	r3, [r3, #10]
 8006c64:	461a      	mov	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c6c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d069      	beq.n	8006d48 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006c74:	7dba      	ldrb	r2, [r7, #22]
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	4413      	add	r3, r2
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006c80:	6812      	ldr	r2, [r2, #0]
 8006c82:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006c86:	7892      	ldrb	r2, [r2, #2]
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d90a      	bls.n	8006ca2 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c98:	789b      	ldrb	r3, [r3, #2]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	7dbb      	ldrb	r3, [r7, #22]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cae:	7858      	ldrb	r0, [r3, #1]
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	69b9      	ldr	r1, [r7, #24]
 8006cb6:	f7fc fd6d 	bl	8003794 <disk_write>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d006      	beq.n	8006cce <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	71da      	strb	r2, [r3, #7]
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e0e7      	b.n	8006e9e <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	69fa      	ldr	r2, [r7, #28]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d926      	bls.n	8006d2e <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ce8:	699a      	ldr	r2, [r3, #24]
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006cf4:	6812      	ldr	r2, [r2, #0]
 8006cf6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006cfa:	8952      	ldrh	r2, [r2, #10]
 8006cfc:	fb02 f303 	mul.w	r3, r2, r3
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	18d1      	adds	r1, r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d10:	895b      	ldrh	r3, [r3, #10]
 8006d12:	461a      	mov	r2, r3
 8006d14:	f7fc fd7c 	bl	8003810 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d1e:	799b      	ldrb	r3, [r3, #6]
 8006d20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d2c:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d3a:	895b      	ldrh	r3, [r3, #10]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	fb02 f303 	mul.w	r3, r2, r3
 8006d44:	623b      	str	r3, [r7, #32]
				continue;
 8006d46:	e06e      	b.n	8006e26 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d01f      	beq.n	8006d96 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d5c:	689a      	ldr	r2, [r3, #8]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d215      	bcs.n	8006d96 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d76:	7858      	ldrb	r0, [r3, #1]
 8006d78:	68f9      	ldr	r1, [r7, #12]
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	f7fc fce9 	bl	8003754 <disk_read>
 8006d82:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d006      	beq.n	8006d96 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d8e:	2201      	movs	r2, #1
 8006d90:	71da      	strb	r2, [r3, #7]
 8006d92:	2301      	movs	r3, #1
 8006d94:	e083      	b.n	8006e9e <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dae:	895b      	ldrh	r3, [r3, #10]
 8006db0:	4618      	mov	r0, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006dc0:	6812      	ldr	r2, [r2, #0]
 8006dc2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006dc6:	8952      	ldrh	r2, [r2, #10]
 8006dc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dcc:	fb01 f202 	mul.w	r2, r1, r2
 8006dd0:	1a9b      	subs	r3, r3, r2
 8006dd2:	1ac3      	subs	r3, r0, r3
 8006dd4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8006dd6:	6a3a      	ldr	r2, [r7, #32]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d901      	bls.n	8006de2 <f_write+0x3ae>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006df0:	6812      	ldr	r2, [r2, #0]
 8006df2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006df6:	8952      	ldrh	r2, [r2, #10]
 8006df8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dfc:	fb01 f202 	mul.w	r2, r1, r2
 8006e00:	1a9b      	subs	r3, r3, r2
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	4413      	add	r3, r2
 8006e06:	6a3a      	ldr	r2, [r7, #32]
 8006e08:	69b9      	ldr	r1, [r7, #24]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fc fd00 	bl	8003810 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e16:	799b      	ldrb	r3, [r3, #6]
 8006e18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e24:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8006e26:	69ba      	ldr	r2, [r7, #24]
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	61bb      	str	r3, [r7, #24]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e34:	689a      	ldr	r2, [r3, #8]
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	4413      	add	r3, r2
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006e40:	6093      	str	r3, [r2, #8]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	441a      	add	r2, r3
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f47f ae26 	bne.w	8006aaa <f_write+0x76>
 8006e5e:	e000      	b.n	8006e62 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006e60:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d907      	bls.n	8006e86 <f_write+0x452>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006e84:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e8c:	799b      	ldrb	r3, [r3, #6]
 8006e8e:	f043 0320 	orr.w	r3, r3, #32
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e9a:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3728      	adds	r7, #40	@ 0x28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b086      	sub	sp, #24
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff f83e 	bl	8005f30 <validate>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f040 80bc 	bne.w	8007038 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ec6:	799b      	ldrb	r3, [r3, #6]
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 80b3 	beq.w	8007038 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ed8:	799b      	ldrb	r3, [r3, #6]
 8006eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d01e      	beq.n	8006f20 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eee:	7858      	ldrb	r0, [r3, #1]
 8006ef0:	6879      	ldr	r1, [r7, #4]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ef8:	699a      	ldr	r2, [r3, #24]
 8006efa:	2301      	movs	r3, #1
 8006efc:	f7fc fc4a 	bl	8003794 <disk_write>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006f06:	2301      	movs	r3, #1
 8006f08:	e097      	b.n	800703a <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f10:	799b      	ldrb	r3, [r3, #6]
 8006f12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f1e:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f2e:	69db      	ldr	r3, [r3, #28]
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f7fc fef4 	bl	8003d20 <move_window>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006f3c:	7dfb      	ldrb	r3, [r7, #23]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d17a      	bne.n	8007038 <f_sync+0x192>
				dir = fp->dir_ptr;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	330b      	adds	r3, #11
 8006f50:	781a      	ldrb	r2, [r3, #0]
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	330b      	adds	r3, #11
 8006f56:	f042 0220 	orr.w	r2, r2, #32
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	331c      	adds	r3, #28
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	0a1b      	lsrs	r3, r3, #8
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	331d      	adds	r3, #29
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	701a      	strb	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	0c1a      	lsrs	r2, r3, #16
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	331e      	adds	r3, #30
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	0e1a      	lsrs	r2, r3, #24
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	331f      	adds	r3, #31
 8006fa4:	b2d2      	uxtb	r2, r2
 8006fa6:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6938      	ldr	r0, [r7, #16]
 8006fb4:	f7fd fdf7 	bl	8004ba6 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006fb8:	f7fc fb30 	bl	800361c <get_fattime>
 8006fbc:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	3316      	adds	r3, #22
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	b2d2      	uxtb	r2, r2
 8006fc6:	701a      	strb	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	0a1b      	lsrs	r3, r3, #8
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	3317      	adds	r3, #23
 8006fd4:	b2d2      	uxtb	r2, r2
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	0c1a      	lsrs	r2, r3, #16
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	3318      	adds	r3, #24
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	701a      	strb	r2, [r3, #0]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	0e1a      	lsrs	r2, r3, #24
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	3319      	adds	r3, #25
 8006fec:	b2d2      	uxtb	r2, r2
 8006fee:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	3312      	adds	r3, #18
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	701a      	strb	r2, [r3, #0]
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	3313      	adds	r3, #19
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007006:	799b      	ldrb	r3, [r3, #6]
 8007008:	f023 0320 	bic.w	r3, r3, #32
 800700c:	b2da      	uxtb	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007014:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007022:	2201      	movs	r2, #1
 8007024:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4618      	mov	r0, r3
 8007030:	f7fc fea8 	bl	8003d84 <sync_fs>
 8007034:	4603      	mov	r3, r0
 8007036:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007038:	7dfb      	ldrb	r3, [r7, #23]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7ff ff2b 	bl	8006ea6 <f_sync>
 8007050:	4603      	mov	r3, r0
 8007052:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d119      	bne.n	800708e <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7fe ff68 	bl	8005f30 <validate>
 8007060:	4603      	mov	r3, r0
 8007062:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d111      	bne.n	800708e <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007072:	4618      	mov	r0, r3
 8007074:	f7fc fd94 	bl	8003ba0 <dec_lock>
 8007078:	4603      	mov	r3, r0
 800707a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d105      	bne.n	800708e <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007088:	461a      	mov	r2, r3
 800708a:	2300      	movs	r3, #0
 800708c:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800708e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b08e      	sub	sp, #56	@ 0x38
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80070a4:	f107 030c 	add.w	r3, r7, #12
 80070a8:	2200      	movs	r2, #0
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7fe fc07 	bl	80058c0 <find_volume>
 80070b2:	4603      	mov	r3, r0
 80070b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	fs = *fatfs;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80070be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f040 80bd 	bne.w	8007242 <f_getfree+0x1aa>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070ce:	691a      	ldr	r2, [r3, #16]
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	3b02      	subs	r3, #2
 80070da:	429a      	cmp	r2, r3
 80070dc:	d806      	bhi.n	80070ec <f_getfree+0x54>
			*nclst = fs->free_clust;
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070e4:	691a      	ldr	r2, [r3, #16]
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	e0aa      	b.n	8007242 <f_getfree+0x1aa>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	76fb      	strb	r3, [r7, #27]
			n = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (fat == FS_FAT12) {
 80070fa:	7efb      	ldrb	r3, [r7, #27]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d126      	bne.n	800714e <f_getfree+0xb6>
				clst = 2;
 8007100:	2302      	movs	r3, #2
 8007102:	62fb      	str	r3, [r7, #44]	@ 0x2c
				do {
					stat = get_fat(fs, clst);
 8007104:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007106:	69f8      	ldr	r0, [r7, #28]
 8007108:	f7fc ff1f 	bl	8003f4a <get_fat>
 800710c:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007114:	d103      	bne.n	800711e <f_getfree+0x86>
 8007116:	2301      	movs	r3, #1
 8007118:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800711c:	e07d      	b.n	800721a <f_getfree+0x182>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d103      	bne.n	800712c <f_getfree+0x94>
 8007124:	2302      	movs	r3, #2
 8007126:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800712a:	e076      	b.n	800721a <f_getfree+0x182>
					if (stat == 0) n++;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d102      	bne.n	8007138 <f_getfree+0xa0>
 8007132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007134:	3301      	adds	r3, #1
 8007136:	633b      	str	r3, [r7, #48]	@ 0x30
				} while (++clst < fs->n_fatent);
 8007138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800713a:	3301      	adds	r3, #1
 800713c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007148:	429a      	cmp	r2, r3
 800714a:	d3db      	bcc.n	8007104 <f_getfree+0x6c>
 800714c:	e065      	b.n	800721a <f_getfree+0x182>
			} else {
				clst = fs->n_fatent;
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	62fb      	str	r3, [r7, #44]	@ 0x2c
				sect = fs->fatbase;
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	62bb      	str	r3, [r7, #40]	@ 0x28
				i = 0; p = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	627b      	str	r3, [r7, #36]	@ 0x24
 8007166:	2300      	movs	r3, #0
 8007168:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716c:	2b00      	cmp	r3, #0
 800716e:	d114      	bne.n	800719a <f_getfree+0x102>
						res = move_window(fs, sect++);
 8007170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007176:	4619      	mov	r1, r3
 8007178:	69f8      	ldr	r0, [r7, #28]
 800717a:	f7fc fdd1 	bl	8003d20 <move_window>
 800717e:	4603      	mov	r3, r0
 8007180:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						if (res != FR_OK) break;
 8007184:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007188:	2b00      	cmp	r3, #0
 800718a:	d145      	bne.n	8007218 <f_getfree+0x180>
						p = fs->win.d8;
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007196:	895b      	ldrh	r3, [r3, #10]
 8007198:	627b      	str	r3, [r7, #36]	@ 0x24
					}
					if (fat == FS_FAT16) {
 800719a:	7efb      	ldrb	r3, [r7, #27]
 800719c:	2b02      	cmp	r3, #2
 800719e:	d116      	bne.n	80071ce <f_getfree+0x136>
						if (LD_WORD(p) == 0) n++;
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	3301      	adds	r3, #1
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	b21b      	sxth	r3, r3
 80071a8:	021b      	lsls	r3, r3, #8
 80071aa:	b21a      	sxth	r2, r3
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	b21b      	sxth	r3, r3
 80071b2:	4313      	orrs	r3, r2
 80071b4:	b21b      	sxth	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d102      	bne.n	80071c0 <f_getfree+0x128>
 80071ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071bc:	3301      	adds	r3, #1
 80071be:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 2; i -= 2;
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	3302      	adds	r3, #2
 80071c4:	623b      	str	r3, [r7, #32]
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	3b02      	subs	r3, #2
 80071ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80071cc:	e01d      	b.n	800720a <f_getfree+0x172>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	3303      	adds	r3, #3
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	061a      	lsls	r2, r3, #24
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	3302      	adds	r3, #2
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	041b      	lsls	r3, r3, #16
 80071de:	431a      	orrs	r2, r3
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	3301      	adds	r3, #1
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	021b      	lsls	r3, r3, #8
 80071e8:	4313      	orrs	r3, r2
 80071ea:	6a3a      	ldr	r2, [r7, #32]
 80071ec:	7812      	ldrb	r2, [r2, #0]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d102      	bne.n	80071fe <f_getfree+0x166>
 80071f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fa:	3301      	adds	r3, #1
 80071fc:	633b      	str	r3, [r7, #48]	@ 0x30
						p += 4; i -= 4;
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	3304      	adds	r3, #4
 8007202:	623b      	str	r3, [r7, #32]
 8007204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007206:	3b04      	subs	r3, #4
 8007208:	627b      	str	r3, [r7, #36]	@ 0x24
					}
				} while (--clst);
 800720a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800720c:	3b01      	subs	r3, #1
 800720e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1a9      	bne.n	800716a <f_getfree+0xd2>
 8007216:	e000      	b.n	800721a <f_getfree+0x182>
						if (res != FR_OK) break;
 8007218:	bf00      	nop
			}
			fs->free_clust = n;
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007220:	461a      	mov	r2, r3
 8007222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007224:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800722c:	795b      	ldrb	r3, [r3, #5]
 800722e:	f043 0301 	orr.w	r3, r3, #1
 8007232:	b2da      	uxtb	r2, r3
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800723a:	715a      	strb	r2, [r3, #5]
			*nclst = n;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007240:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8007242:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8007246:	4618      	mov	r0, r3
 8007248:	3738      	adds	r7, #56	@ 0x38
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b088      	sub	sp, #32
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	607a      	str	r2, [r7, #4]
	int n = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007262:	e01c      	b.n	800729e <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007264:	f107 0310 	add.w	r3, r7, #16
 8007268:	f107 0114 	add.w	r1, r7, #20
 800726c:	2201      	movs	r2, #1
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7ff f9f8 	bl	8006664 <f_read>
		if (rc != 1) break;
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d117      	bne.n	80072aa <f_gets+0x5c>
		c = s[0];
 800727a:	7d3b      	ldrb	r3, [r7, #20]
 800727c:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800727e:	7dfb      	ldrb	r3, [r7, #23]
 8007280:	2b0d      	cmp	r3, #13
 8007282:	d00b      	beq.n	800729c <f_gets+0x4e>
		*p++ = c;
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	61ba      	str	r2, [r7, #24]
 800728a:	7dfa      	ldrb	r2, [r7, #23]
 800728c:	701a      	strb	r2, [r3, #0]
		n++;
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	3301      	adds	r3, #1
 8007292:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007294:	7dfb      	ldrb	r3, [r7, #23]
 8007296:	2b0a      	cmp	r3, #10
 8007298:	d009      	beq.n	80072ae <f_gets+0x60>
 800729a:	e000      	b.n	800729e <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800729c:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	69fa      	ldr	r2, [r7, #28]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	dbdd      	blt.n	8007264 <f_gets+0x16>
 80072a8:	e002      	b.n	80072b0 <f_gets+0x62>
		if (rc != 1) break;
 80072aa:	bf00      	nop
 80072ac:	e000      	b.n	80072b0 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 80072ae:	bf00      	nop
	}
	*p = 0;
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	2200      	movs	r2, #0
 80072b4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <f_gets+0x72>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	e000      	b.n	80072c2 <f_gets+0x74>
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3720      	adds	r7, #32
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	4613      	mov	r3, r2
 80072d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80072da:	2301      	movs	r3, #1
 80072dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80072de:	2300      	movs	r3, #0
 80072e0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80072e2:	4b1e      	ldr	r3, [pc, #120]	@ (800735c <FATFS_LinkDriverEx+0x90>)
 80072e4:	7a5b      	ldrb	r3, [r3, #9]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d831      	bhi.n	8007350 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80072ec:	4b1b      	ldr	r3, [pc, #108]	@ (800735c <FATFS_LinkDriverEx+0x90>)
 80072ee:	7a5b      	ldrb	r3, [r3, #9]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	461a      	mov	r2, r3
 80072f4:	4b19      	ldr	r3, [pc, #100]	@ (800735c <FATFS_LinkDriverEx+0x90>)
 80072f6:	2100      	movs	r1, #0
 80072f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80072fa:	4b18      	ldr	r3, [pc, #96]	@ (800735c <FATFS_LinkDriverEx+0x90>)
 80072fc:	7a5b      	ldrb	r3, [r3, #9]
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	4a16      	ldr	r2, [pc, #88]	@ (800735c <FATFS_LinkDriverEx+0x90>)
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800730a:	4b14      	ldr	r3, [pc, #80]	@ (800735c <FATFS_LinkDriverEx+0x90>)
 800730c:	7a5b      	ldrb	r3, [r3, #9]
 800730e:	b2db      	uxtb	r3, r3
 8007310:	461a      	mov	r2, r3
 8007312:	4b12      	ldr	r3, [pc, #72]	@ (800735c <FATFS_LinkDriverEx+0x90>)
 8007314:	4413      	add	r3, r2
 8007316:	79fa      	ldrb	r2, [r7, #7]
 8007318:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800731a:	4b10      	ldr	r3, [pc, #64]	@ (800735c <FATFS_LinkDriverEx+0x90>)
 800731c:	7a5b      	ldrb	r3, [r3, #9]
 800731e:	b2db      	uxtb	r3, r3
 8007320:	1c5a      	adds	r2, r3, #1
 8007322:	b2d1      	uxtb	r1, r2
 8007324:	4a0d      	ldr	r2, [pc, #52]	@ (800735c <FATFS_LinkDriverEx+0x90>)
 8007326:	7251      	strb	r1, [r2, #9]
 8007328:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800732a:	7dbb      	ldrb	r3, [r7, #22]
 800732c:	3330      	adds	r3, #48	@ 0x30
 800732e:	b2da      	uxtb	r2, r3
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	3301      	adds	r3, #1
 8007338:	223a      	movs	r2, #58	@ 0x3a
 800733a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	3302      	adds	r3, #2
 8007340:	222f      	movs	r2, #47	@ 0x2f
 8007342:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	3303      	adds	r3, #3
 8007348:	2200      	movs	r2, #0
 800734a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800734c:	2300      	movs	r3, #0
 800734e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007350:	7dfb      	ldrb	r3, [r7, #23]
}
 8007352:	4618      	mov	r0, r3
 8007354:	371c      	adds	r7, #28
 8007356:	46bd      	mov	sp, r7
 8007358:	bc80      	pop	{r7}
 800735a:	4770      	bx	lr
 800735c:	20000374 	.word	0x20000374

08007360 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800736a:	2200      	movs	r2, #0
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff ffac 	bl	80072cc <FATFS_LinkDriverEx>
 8007374:	4603      	mov	r3, r0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	4603      	mov	r3, r0
 8007388:	6039      	str	r1, [r7, #0]
 800738a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800738c:	88fb      	ldrh	r3, [r7, #6]
 800738e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007390:	d802      	bhi.n	8007398 <ff_convert+0x18>
		c = chr;
 8007392:	88fb      	ldrh	r3, [r7, #6]
 8007394:	81fb      	strh	r3, [r7, #14]
 8007396:	e025      	b.n	80073e4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00b      	beq.n	80073b6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800739e:	88fb      	ldrh	r3, [r7, #6]
 80073a0:	2bff      	cmp	r3, #255	@ 0xff
 80073a2:	d805      	bhi.n	80073b0 <ff_convert+0x30>
 80073a4:	88fb      	ldrh	r3, [r7, #6]
 80073a6:	3b80      	subs	r3, #128	@ 0x80
 80073a8:	4a11      	ldr	r2, [pc, #68]	@ (80073f0 <ff_convert+0x70>)
 80073aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073ae:	e000      	b.n	80073b2 <ff_convert+0x32>
 80073b0:	2300      	movs	r3, #0
 80073b2:	81fb      	strh	r3, [r7, #14]
 80073b4:	e016      	b.n	80073e4 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80073b6:	2300      	movs	r3, #0
 80073b8:	81fb      	strh	r3, [r7, #14]
 80073ba:	e009      	b.n	80073d0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80073bc:	89fb      	ldrh	r3, [r7, #14]
 80073be:	4a0c      	ldr	r2, [pc, #48]	@ (80073f0 <ff_convert+0x70>)
 80073c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073c4:	88fa      	ldrh	r2, [r7, #6]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d006      	beq.n	80073d8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80073ca:	89fb      	ldrh	r3, [r7, #14]
 80073cc:	3301      	adds	r3, #1
 80073ce:	81fb      	strh	r3, [r7, #14]
 80073d0:	89fb      	ldrh	r3, [r7, #14]
 80073d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80073d4:	d9f2      	bls.n	80073bc <ff_convert+0x3c>
 80073d6:	e000      	b.n	80073da <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80073d8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80073da:	89fb      	ldrh	r3, [r7, #14]
 80073dc:	3380      	adds	r3, #128	@ 0x80
 80073de:	b29b      	uxth	r3, r3
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80073e4:	89fb      	ldrh	r3, [r7, #14]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bc80      	pop	{r7}
 80073ee:	4770      	bx	lr
 80073f0:	08009310 	.word	0x08009310

080073f4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	e002      	b.n	800740a <ff_wtoupper+0x16>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3301      	adds	r3, #1
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	4a0f      	ldr	r2, [pc, #60]	@ (8007448 <ff_wtoupper+0x54>)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d006      	beq.n	8007424 <ff_wtoupper+0x30>
 8007416:	4a0c      	ldr	r2, [pc, #48]	@ (8007448 <ff_wtoupper+0x54>)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800741e:	88fa      	ldrh	r2, [r7, #6]
 8007420:	429a      	cmp	r2, r3
 8007422:	d1ef      	bne.n	8007404 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8007424:	4a08      	ldr	r2, [pc, #32]	@ (8007448 <ff_wtoupper+0x54>)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d004      	beq.n	800743a <ff_wtoupper+0x46>
 8007430:	4a06      	ldr	r2, [pc, #24]	@ (800744c <ff_wtoupper+0x58>)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007438:	e000      	b.n	800743c <ff_wtoupper+0x48>
 800743a:	88fb      	ldrh	r3, [r7, #6]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	bc80      	pop	{r7}
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	08009410 	.word	0x08009410
 800744c:	080095f0 	.word	0x080095f0

08007450 <std>:
 8007450:	2300      	movs	r3, #0
 8007452:	b510      	push	{r4, lr}
 8007454:	4604      	mov	r4, r0
 8007456:	e9c0 3300 	strd	r3, r3, [r0]
 800745a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800745e:	6083      	str	r3, [r0, #8]
 8007460:	8181      	strh	r1, [r0, #12]
 8007462:	6643      	str	r3, [r0, #100]	@ 0x64
 8007464:	81c2      	strh	r2, [r0, #14]
 8007466:	6183      	str	r3, [r0, #24]
 8007468:	4619      	mov	r1, r3
 800746a:	2208      	movs	r2, #8
 800746c:	305c      	adds	r0, #92	@ 0x5c
 800746e:	f000 fa1b 	bl	80078a8 <memset>
 8007472:	4b0d      	ldr	r3, [pc, #52]	@ (80074a8 <std+0x58>)
 8007474:	6224      	str	r4, [r4, #32]
 8007476:	6263      	str	r3, [r4, #36]	@ 0x24
 8007478:	4b0c      	ldr	r3, [pc, #48]	@ (80074ac <std+0x5c>)
 800747a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800747c:	4b0c      	ldr	r3, [pc, #48]	@ (80074b0 <std+0x60>)
 800747e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007480:	4b0c      	ldr	r3, [pc, #48]	@ (80074b4 <std+0x64>)
 8007482:	6323      	str	r3, [r4, #48]	@ 0x30
 8007484:	4b0c      	ldr	r3, [pc, #48]	@ (80074b8 <std+0x68>)
 8007486:	429c      	cmp	r4, r3
 8007488:	d006      	beq.n	8007498 <std+0x48>
 800748a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800748e:	4294      	cmp	r4, r2
 8007490:	d002      	beq.n	8007498 <std+0x48>
 8007492:	33d0      	adds	r3, #208	@ 0xd0
 8007494:	429c      	cmp	r4, r3
 8007496:	d105      	bne.n	80074a4 <std+0x54>
 8007498:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800749c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074a0:	f000 ba7a 	b.w	8007998 <__retarget_lock_init_recursive>
 80074a4:	bd10      	pop	{r4, pc}
 80074a6:	bf00      	nop
 80074a8:	080076f9 	.word	0x080076f9
 80074ac:	0800771b 	.word	0x0800771b
 80074b0:	08007753 	.word	0x08007753
 80074b4:	08007777 	.word	0x08007777
 80074b8:	20000380 	.word	0x20000380

080074bc <stdio_exit_handler>:
 80074bc:	4a02      	ldr	r2, [pc, #8]	@ (80074c8 <stdio_exit_handler+0xc>)
 80074be:	4903      	ldr	r1, [pc, #12]	@ (80074cc <stdio_exit_handler+0x10>)
 80074c0:	4803      	ldr	r0, [pc, #12]	@ (80074d0 <stdio_exit_handler+0x14>)
 80074c2:	f000 b869 	b.w	8007598 <_fwalk_sglue>
 80074c6:	bf00      	nop
 80074c8:	20000024 	.word	0x20000024
 80074cc:	080084dd 	.word	0x080084dd
 80074d0:	20000034 	.word	0x20000034

080074d4 <cleanup_stdio>:
 80074d4:	6841      	ldr	r1, [r0, #4]
 80074d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007508 <cleanup_stdio+0x34>)
 80074d8:	b510      	push	{r4, lr}
 80074da:	4299      	cmp	r1, r3
 80074dc:	4604      	mov	r4, r0
 80074de:	d001      	beq.n	80074e4 <cleanup_stdio+0x10>
 80074e0:	f000 fffc 	bl	80084dc <_fflush_r>
 80074e4:	68a1      	ldr	r1, [r4, #8]
 80074e6:	4b09      	ldr	r3, [pc, #36]	@ (800750c <cleanup_stdio+0x38>)
 80074e8:	4299      	cmp	r1, r3
 80074ea:	d002      	beq.n	80074f2 <cleanup_stdio+0x1e>
 80074ec:	4620      	mov	r0, r4
 80074ee:	f000 fff5 	bl	80084dc <_fflush_r>
 80074f2:	68e1      	ldr	r1, [r4, #12]
 80074f4:	4b06      	ldr	r3, [pc, #24]	@ (8007510 <cleanup_stdio+0x3c>)
 80074f6:	4299      	cmp	r1, r3
 80074f8:	d004      	beq.n	8007504 <cleanup_stdio+0x30>
 80074fa:	4620      	mov	r0, r4
 80074fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007500:	f000 bfec 	b.w	80084dc <_fflush_r>
 8007504:	bd10      	pop	{r4, pc}
 8007506:	bf00      	nop
 8007508:	20000380 	.word	0x20000380
 800750c:	200003e8 	.word	0x200003e8
 8007510:	20000450 	.word	0x20000450

08007514 <global_stdio_init.part.0>:
 8007514:	b510      	push	{r4, lr}
 8007516:	4b0b      	ldr	r3, [pc, #44]	@ (8007544 <global_stdio_init.part.0+0x30>)
 8007518:	4c0b      	ldr	r4, [pc, #44]	@ (8007548 <global_stdio_init.part.0+0x34>)
 800751a:	4a0c      	ldr	r2, [pc, #48]	@ (800754c <global_stdio_init.part.0+0x38>)
 800751c:	4620      	mov	r0, r4
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	2104      	movs	r1, #4
 8007522:	2200      	movs	r2, #0
 8007524:	f7ff ff94 	bl	8007450 <std>
 8007528:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800752c:	2201      	movs	r2, #1
 800752e:	2109      	movs	r1, #9
 8007530:	f7ff ff8e 	bl	8007450 <std>
 8007534:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007538:	2202      	movs	r2, #2
 800753a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800753e:	2112      	movs	r1, #18
 8007540:	f7ff bf86 	b.w	8007450 <std>
 8007544:	200004b8 	.word	0x200004b8
 8007548:	20000380 	.word	0x20000380
 800754c:	080074bd 	.word	0x080074bd

08007550 <__sfp_lock_acquire>:
 8007550:	4801      	ldr	r0, [pc, #4]	@ (8007558 <__sfp_lock_acquire+0x8>)
 8007552:	f000 ba22 	b.w	800799a <__retarget_lock_acquire_recursive>
 8007556:	bf00      	nop
 8007558:	200004c1 	.word	0x200004c1

0800755c <__sfp_lock_release>:
 800755c:	4801      	ldr	r0, [pc, #4]	@ (8007564 <__sfp_lock_release+0x8>)
 800755e:	f000 ba1d 	b.w	800799c <__retarget_lock_release_recursive>
 8007562:	bf00      	nop
 8007564:	200004c1 	.word	0x200004c1

08007568 <__sinit>:
 8007568:	b510      	push	{r4, lr}
 800756a:	4604      	mov	r4, r0
 800756c:	f7ff fff0 	bl	8007550 <__sfp_lock_acquire>
 8007570:	6a23      	ldr	r3, [r4, #32]
 8007572:	b11b      	cbz	r3, 800757c <__sinit+0x14>
 8007574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007578:	f7ff bff0 	b.w	800755c <__sfp_lock_release>
 800757c:	4b04      	ldr	r3, [pc, #16]	@ (8007590 <__sinit+0x28>)
 800757e:	6223      	str	r3, [r4, #32]
 8007580:	4b04      	ldr	r3, [pc, #16]	@ (8007594 <__sinit+0x2c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1f5      	bne.n	8007574 <__sinit+0xc>
 8007588:	f7ff ffc4 	bl	8007514 <global_stdio_init.part.0>
 800758c:	e7f2      	b.n	8007574 <__sinit+0xc>
 800758e:	bf00      	nop
 8007590:	080074d5 	.word	0x080074d5
 8007594:	200004b8 	.word	0x200004b8

08007598 <_fwalk_sglue>:
 8007598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800759c:	4607      	mov	r7, r0
 800759e:	4688      	mov	r8, r1
 80075a0:	4614      	mov	r4, r2
 80075a2:	2600      	movs	r6, #0
 80075a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075a8:	f1b9 0901 	subs.w	r9, r9, #1
 80075ac:	d505      	bpl.n	80075ba <_fwalk_sglue+0x22>
 80075ae:	6824      	ldr	r4, [r4, #0]
 80075b0:	2c00      	cmp	r4, #0
 80075b2:	d1f7      	bne.n	80075a4 <_fwalk_sglue+0xc>
 80075b4:	4630      	mov	r0, r6
 80075b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ba:	89ab      	ldrh	r3, [r5, #12]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d907      	bls.n	80075d0 <_fwalk_sglue+0x38>
 80075c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075c4:	3301      	adds	r3, #1
 80075c6:	d003      	beq.n	80075d0 <_fwalk_sglue+0x38>
 80075c8:	4629      	mov	r1, r5
 80075ca:	4638      	mov	r0, r7
 80075cc:	47c0      	blx	r8
 80075ce:	4306      	orrs	r6, r0
 80075d0:	3568      	adds	r5, #104	@ 0x68
 80075d2:	e7e9      	b.n	80075a8 <_fwalk_sglue+0x10>

080075d4 <iprintf>:
 80075d4:	b40f      	push	{r0, r1, r2, r3}
 80075d6:	b507      	push	{r0, r1, r2, lr}
 80075d8:	4906      	ldr	r1, [pc, #24]	@ (80075f4 <iprintf+0x20>)
 80075da:	ab04      	add	r3, sp, #16
 80075dc:	6808      	ldr	r0, [r1, #0]
 80075de:	f853 2b04 	ldr.w	r2, [r3], #4
 80075e2:	6881      	ldr	r1, [r0, #8]
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	f000 fc51 	bl	8007e8c <_vfiprintf_r>
 80075ea:	b003      	add	sp, #12
 80075ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80075f0:	b004      	add	sp, #16
 80075f2:	4770      	bx	lr
 80075f4:	20000030 	.word	0x20000030

080075f8 <_puts_r>:
 80075f8:	6a03      	ldr	r3, [r0, #32]
 80075fa:	b570      	push	{r4, r5, r6, lr}
 80075fc:	4605      	mov	r5, r0
 80075fe:	460e      	mov	r6, r1
 8007600:	6884      	ldr	r4, [r0, #8]
 8007602:	b90b      	cbnz	r3, 8007608 <_puts_r+0x10>
 8007604:	f7ff ffb0 	bl	8007568 <__sinit>
 8007608:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800760a:	07db      	lsls	r3, r3, #31
 800760c:	d405      	bmi.n	800761a <_puts_r+0x22>
 800760e:	89a3      	ldrh	r3, [r4, #12]
 8007610:	0598      	lsls	r0, r3, #22
 8007612:	d402      	bmi.n	800761a <_puts_r+0x22>
 8007614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007616:	f000 f9c0 	bl	800799a <__retarget_lock_acquire_recursive>
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	0719      	lsls	r1, r3, #28
 800761e:	d502      	bpl.n	8007626 <_puts_r+0x2e>
 8007620:	6923      	ldr	r3, [r4, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d135      	bne.n	8007692 <_puts_r+0x9a>
 8007626:	4621      	mov	r1, r4
 8007628:	4628      	mov	r0, r5
 800762a:	f000 f8e7 	bl	80077fc <__swsetup_r>
 800762e:	b380      	cbz	r0, 8007692 <_puts_r+0x9a>
 8007630:	f04f 35ff 	mov.w	r5, #4294967295
 8007634:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007636:	07da      	lsls	r2, r3, #31
 8007638:	d405      	bmi.n	8007646 <_puts_r+0x4e>
 800763a:	89a3      	ldrh	r3, [r4, #12]
 800763c:	059b      	lsls	r3, r3, #22
 800763e:	d402      	bmi.n	8007646 <_puts_r+0x4e>
 8007640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007642:	f000 f9ab 	bl	800799c <__retarget_lock_release_recursive>
 8007646:	4628      	mov	r0, r5
 8007648:	bd70      	pop	{r4, r5, r6, pc}
 800764a:	2b00      	cmp	r3, #0
 800764c:	da04      	bge.n	8007658 <_puts_r+0x60>
 800764e:	69a2      	ldr	r2, [r4, #24]
 8007650:	429a      	cmp	r2, r3
 8007652:	dc17      	bgt.n	8007684 <_puts_r+0x8c>
 8007654:	290a      	cmp	r1, #10
 8007656:	d015      	beq.n	8007684 <_puts_r+0x8c>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	6022      	str	r2, [r4, #0]
 800765e:	7019      	strb	r1, [r3, #0]
 8007660:	68a3      	ldr	r3, [r4, #8]
 8007662:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007666:	3b01      	subs	r3, #1
 8007668:	60a3      	str	r3, [r4, #8]
 800766a:	2900      	cmp	r1, #0
 800766c:	d1ed      	bne.n	800764a <_puts_r+0x52>
 800766e:	2b00      	cmp	r3, #0
 8007670:	da11      	bge.n	8007696 <_puts_r+0x9e>
 8007672:	4622      	mov	r2, r4
 8007674:	210a      	movs	r1, #10
 8007676:	4628      	mov	r0, r5
 8007678:	f000 f881 	bl	800777e <__swbuf_r>
 800767c:	3001      	adds	r0, #1
 800767e:	d0d7      	beq.n	8007630 <_puts_r+0x38>
 8007680:	250a      	movs	r5, #10
 8007682:	e7d7      	b.n	8007634 <_puts_r+0x3c>
 8007684:	4622      	mov	r2, r4
 8007686:	4628      	mov	r0, r5
 8007688:	f000 f879 	bl	800777e <__swbuf_r>
 800768c:	3001      	adds	r0, #1
 800768e:	d1e7      	bne.n	8007660 <_puts_r+0x68>
 8007690:	e7ce      	b.n	8007630 <_puts_r+0x38>
 8007692:	3e01      	subs	r6, #1
 8007694:	e7e4      	b.n	8007660 <_puts_r+0x68>
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	6022      	str	r2, [r4, #0]
 800769c:	220a      	movs	r2, #10
 800769e:	701a      	strb	r2, [r3, #0]
 80076a0:	e7ee      	b.n	8007680 <_puts_r+0x88>
	...

080076a4 <puts>:
 80076a4:	4b02      	ldr	r3, [pc, #8]	@ (80076b0 <puts+0xc>)
 80076a6:	4601      	mov	r1, r0
 80076a8:	6818      	ldr	r0, [r3, #0]
 80076aa:	f7ff bfa5 	b.w	80075f8 <_puts_r>
 80076ae:	bf00      	nop
 80076b0:	20000030 	.word	0x20000030

080076b4 <siprintf>:
 80076b4:	b40e      	push	{r1, r2, r3}
 80076b6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80076ba:	b510      	push	{r4, lr}
 80076bc:	2400      	movs	r4, #0
 80076be:	b09d      	sub	sp, #116	@ 0x74
 80076c0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80076c2:	9002      	str	r0, [sp, #8]
 80076c4:	9006      	str	r0, [sp, #24]
 80076c6:	9107      	str	r1, [sp, #28]
 80076c8:	9104      	str	r1, [sp, #16]
 80076ca:	4809      	ldr	r0, [pc, #36]	@ (80076f0 <siprintf+0x3c>)
 80076cc:	4909      	ldr	r1, [pc, #36]	@ (80076f4 <siprintf+0x40>)
 80076ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80076d2:	9105      	str	r1, [sp, #20]
 80076d4:	6800      	ldr	r0, [r0, #0]
 80076d6:	a902      	add	r1, sp, #8
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	941b      	str	r4, [sp, #108]	@ 0x6c
 80076dc:	f000 fab2 	bl	8007c44 <_svfiprintf_r>
 80076e0:	9b02      	ldr	r3, [sp, #8]
 80076e2:	701c      	strb	r4, [r3, #0]
 80076e4:	b01d      	add	sp, #116	@ 0x74
 80076e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ea:	b003      	add	sp, #12
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	20000030 	.word	0x20000030
 80076f4:	ffff0208 	.word	0xffff0208

080076f8 <__sread>:
 80076f8:	b510      	push	{r4, lr}
 80076fa:	460c      	mov	r4, r1
 80076fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007700:	f000 f8fc 	bl	80078fc <_read_r>
 8007704:	2800      	cmp	r0, #0
 8007706:	bfab      	itete	ge
 8007708:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800770a:	89a3      	ldrhlt	r3, [r4, #12]
 800770c:	181b      	addge	r3, r3, r0
 800770e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007712:	bfac      	ite	ge
 8007714:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007716:	81a3      	strhlt	r3, [r4, #12]
 8007718:	bd10      	pop	{r4, pc}

0800771a <__swrite>:
 800771a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771e:	461f      	mov	r7, r3
 8007720:	898b      	ldrh	r3, [r1, #12]
 8007722:	4605      	mov	r5, r0
 8007724:	05db      	lsls	r3, r3, #23
 8007726:	460c      	mov	r4, r1
 8007728:	4616      	mov	r6, r2
 800772a:	d505      	bpl.n	8007738 <__swrite+0x1e>
 800772c:	2302      	movs	r3, #2
 800772e:	2200      	movs	r2, #0
 8007730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007734:	f000 f8d0 	bl	80078d8 <_lseek_r>
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	4632      	mov	r2, r6
 800773c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007740:	81a3      	strh	r3, [r4, #12]
 8007742:	4628      	mov	r0, r5
 8007744:	463b      	mov	r3, r7
 8007746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800774a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800774e:	f000 b8e7 	b.w	8007920 <_write_r>

08007752 <__sseek>:
 8007752:	b510      	push	{r4, lr}
 8007754:	460c      	mov	r4, r1
 8007756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775a:	f000 f8bd 	bl	80078d8 <_lseek_r>
 800775e:	1c43      	adds	r3, r0, #1
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	bf15      	itete	ne
 8007764:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007766:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800776a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800776e:	81a3      	strheq	r3, [r4, #12]
 8007770:	bf18      	it	ne
 8007772:	81a3      	strhne	r3, [r4, #12]
 8007774:	bd10      	pop	{r4, pc}

08007776 <__sclose>:
 8007776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800777a:	f000 b89d 	b.w	80078b8 <_close_r>

0800777e <__swbuf_r>:
 800777e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007780:	460e      	mov	r6, r1
 8007782:	4614      	mov	r4, r2
 8007784:	4605      	mov	r5, r0
 8007786:	b118      	cbz	r0, 8007790 <__swbuf_r+0x12>
 8007788:	6a03      	ldr	r3, [r0, #32]
 800778a:	b90b      	cbnz	r3, 8007790 <__swbuf_r+0x12>
 800778c:	f7ff feec 	bl	8007568 <__sinit>
 8007790:	69a3      	ldr	r3, [r4, #24]
 8007792:	60a3      	str	r3, [r4, #8]
 8007794:	89a3      	ldrh	r3, [r4, #12]
 8007796:	071a      	lsls	r2, r3, #28
 8007798:	d501      	bpl.n	800779e <__swbuf_r+0x20>
 800779a:	6923      	ldr	r3, [r4, #16]
 800779c:	b943      	cbnz	r3, 80077b0 <__swbuf_r+0x32>
 800779e:	4621      	mov	r1, r4
 80077a0:	4628      	mov	r0, r5
 80077a2:	f000 f82b 	bl	80077fc <__swsetup_r>
 80077a6:	b118      	cbz	r0, 80077b0 <__swbuf_r+0x32>
 80077a8:	f04f 37ff 	mov.w	r7, #4294967295
 80077ac:	4638      	mov	r0, r7
 80077ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	6922      	ldr	r2, [r4, #16]
 80077b4:	b2f6      	uxtb	r6, r6
 80077b6:	1a98      	subs	r0, r3, r2
 80077b8:	6963      	ldr	r3, [r4, #20]
 80077ba:	4637      	mov	r7, r6
 80077bc:	4283      	cmp	r3, r0
 80077be:	dc05      	bgt.n	80077cc <__swbuf_r+0x4e>
 80077c0:	4621      	mov	r1, r4
 80077c2:	4628      	mov	r0, r5
 80077c4:	f000 fe8a 	bl	80084dc <_fflush_r>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d1ed      	bne.n	80077a8 <__swbuf_r+0x2a>
 80077cc:	68a3      	ldr	r3, [r4, #8]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	60a3      	str	r3, [r4, #8]
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	6022      	str	r2, [r4, #0]
 80077d8:	701e      	strb	r6, [r3, #0]
 80077da:	6962      	ldr	r2, [r4, #20]
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	429a      	cmp	r2, r3
 80077e0:	d004      	beq.n	80077ec <__swbuf_r+0x6e>
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	07db      	lsls	r3, r3, #31
 80077e6:	d5e1      	bpl.n	80077ac <__swbuf_r+0x2e>
 80077e8:	2e0a      	cmp	r6, #10
 80077ea:	d1df      	bne.n	80077ac <__swbuf_r+0x2e>
 80077ec:	4621      	mov	r1, r4
 80077ee:	4628      	mov	r0, r5
 80077f0:	f000 fe74 	bl	80084dc <_fflush_r>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d0d9      	beq.n	80077ac <__swbuf_r+0x2e>
 80077f8:	e7d6      	b.n	80077a8 <__swbuf_r+0x2a>
	...

080077fc <__swsetup_r>:
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	4b29      	ldr	r3, [pc, #164]	@ (80078a4 <__swsetup_r+0xa8>)
 8007800:	4605      	mov	r5, r0
 8007802:	6818      	ldr	r0, [r3, #0]
 8007804:	460c      	mov	r4, r1
 8007806:	b118      	cbz	r0, 8007810 <__swsetup_r+0x14>
 8007808:	6a03      	ldr	r3, [r0, #32]
 800780a:	b90b      	cbnz	r3, 8007810 <__swsetup_r+0x14>
 800780c:	f7ff feac 	bl	8007568 <__sinit>
 8007810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007814:	0719      	lsls	r1, r3, #28
 8007816:	d422      	bmi.n	800785e <__swsetup_r+0x62>
 8007818:	06da      	lsls	r2, r3, #27
 800781a:	d407      	bmi.n	800782c <__swsetup_r+0x30>
 800781c:	2209      	movs	r2, #9
 800781e:	602a      	str	r2, [r5, #0]
 8007820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007824:	f04f 30ff 	mov.w	r0, #4294967295
 8007828:	81a3      	strh	r3, [r4, #12]
 800782a:	e033      	b.n	8007894 <__swsetup_r+0x98>
 800782c:	0758      	lsls	r0, r3, #29
 800782e:	d512      	bpl.n	8007856 <__swsetup_r+0x5a>
 8007830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007832:	b141      	cbz	r1, 8007846 <__swsetup_r+0x4a>
 8007834:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007838:	4299      	cmp	r1, r3
 800783a:	d002      	beq.n	8007842 <__swsetup_r+0x46>
 800783c:	4628      	mov	r0, r5
 800783e:	f000 f8af 	bl	80079a0 <_free_r>
 8007842:	2300      	movs	r3, #0
 8007844:	6363      	str	r3, [r4, #52]	@ 0x34
 8007846:	89a3      	ldrh	r3, [r4, #12]
 8007848:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800784c:	81a3      	strh	r3, [r4, #12]
 800784e:	2300      	movs	r3, #0
 8007850:	6063      	str	r3, [r4, #4]
 8007852:	6923      	ldr	r3, [r4, #16]
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	89a3      	ldrh	r3, [r4, #12]
 8007858:	f043 0308 	orr.w	r3, r3, #8
 800785c:	81a3      	strh	r3, [r4, #12]
 800785e:	6923      	ldr	r3, [r4, #16]
 8007860:	b94b      	cbnz	r3, 8007876 <__swsetup_r+0x7a>
 8007862:	89a3      	ldrh	r3, [r4, #12]
 8007864:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800786c:	d003      	beq.n	8007876 <__swsetup_r+0x7a>
 800786e:	4621      	mov	r1, r4
 8007870:	4628      	mov	r0, r5
 8007872:	f000 fe80 	bl	8008576 <__smakebuf_r>
 8007876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800787a:	f013 0201 	ands.w	r2, r3, #1
 800787e:	d00a      	beq.n	8007896 <__swsetup_r+0x9a>
 8007880:	2200      	movs	r2, #0
 8007882:	60a2      	str	r2, [r4, #8]
 8007884:	6962      	ldr	r2, [r4, #20]
 8007886:	4252      	negs	r2, r2
 8007888:	61a2      	str	r2, [r4, #24]
 800788a:	6922      	ldr	r2, [r4, #16]
 800788c:	b942      	cbnz	r2, 80078a0 <__swsetup_r+0xa4>
 800788e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007892:	d1c5      	bne.n	8007820 <__swsetup_r+0x24>
 8007894:	bd38      	pop	{r3, r4, r5, pc}
 8007896:	0799      	lsls	r1, r3, #30
 8007898:	bf58      	it	pl
 800789a:	6962      	ldrpl	r2, [r4, #20]
 800789c:	60a2      	str	r2, [r4, #8]
 800789e:	e7f4      	b.n	800788a <__swsetup_r+0x8e>
 80078a0:	2000      	movs	r0, #0
 80078a2:	e7f7      	b.n	8007894 <__swsetup_r+0x98>
 80078a4:	20000030 	.word	0x20000030

080078a8 <memset>:
 80078a8:	4603      	mov	r3, r0
 80078aa:	4402      	add	r2, r0
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d100      	bne.n	80078b2 <memset+0xa>
 80078b0:	4770      	bx	lr
 80078b2:	f803 1b01 	strb.w	r1, [r3], #1
 80078b6:	e7f9      	b.n	80078ac <memset+0x4>

080078b8 <_close_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	2300      	movs	r3, #0
 80078bc:	4d05      	ldr	r5, [pc, #20]	@ (80078d4 <_close_r+0x1c>)
 80078be:	4604      	mov	r4, r0
 80078c0:	4608      	mov	r0, r1
 80078c2:	602b      	str	r3, [r5, #0]
 80078c4:	f7fa f89f 	bl	8001a06 <_close>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d102      	bne.n	80078d2 <_close_r+0x1a>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	b103      	cbz	r3, 80078d2 <_close_r+0x1a>
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	bd38      	pop	{r3, r4, r5, pc}
 80078d4:	200004bc 	.word	0x200004bc

080078d8 <_lseek_r>:
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	4604      	mov	r4, r0
 80078dc:	4608      	mov	r0, r1
 80078de:	4611      	mov	r1, r2
 80078e0:	2200      	movs	r2, #0
 80078e2:	4d05      	ldr	r5, [pc, #20]	@ (80078f8 <_lseek_r+0x20>)
 80078e4:	602a      	str	r2, [r5, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	f7fa f8b1 	bl	8001a4e <_lseek>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	d102      	bne.n	80078f6 <_lseek_r+0x1e>
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	b103      	cbz	r3, 80078f6 <_lseek_r+0x1e>
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	200004bc 	.word	0x200004bc

080078fc <_read_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	4604      	mov	r4, r0
 8007900:	4608      	mov	r0, r1
 8007902:	4611      	mov	r1, r2
 8007904:	2200      	movs	r2, #0
 8007906:	4d05      	ldr	r5, [pc, #20]	@ (800791c <_read_r+0x20>)
 8007908:	602a      	str	r2, [r5, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	f7fa f842 	bl	8001994 <_read>
 8007910:	1c43      	adds	r3, r0, #1
 8007912:	d102      	bne.n	800791a <_read_r+0x1e>
 8007914:	682b      	ldr	r3, [r5, #0]
 8007916:	b103      	cbz	r3, 800791a <_read_r+0x1e>
 8007918:	6023      	str	r3, [r4, #0]
 800791a:	bd38      	pop	{r3, r4, r5, pc}
 800791c:	200004bc 	.word	0x200004bc

08007920 <_write_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4604      	mov	r4, r0
 8007924:	4608      	mov	r0, r1
 8007926:	4611      	mov	r1, r2
 8007928:	2200      	movs	r2, #0
 800792a:	4d05      	ldr	r5, [pc, #20]	@ (8007940 <_write_r+0x20>)
 800792c:	602a      	str	r2, [r5, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	f7fa f84d 	bl	80019ce <_write>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d102      	bne.n	800793e <_write_r+0x1e>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	b103      	cbz	r3, 800793e <_write_r+0x1e>
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	200004bc 	.word	0x200004bc

08007944 <__errno>:
 8007944:	4b01      	ldr	r3, [pc, #4]	@ (800794c <__errno+0x8>)
 8007946:	6818      	ldr	r0, [r3, #0]
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	20000030 	.word	0x20000030

08007950 <__libc_init_array>:
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	2600      	movs	r6, #0
 8007954:	4d0c      	ldr	r5, [pc, #48]	@ (8007988 <__libc_init_array+0x38>)
 8007956:	4c0d      	ldr	r4, [pc, #52]	@ (800798c <__libc_init_array+0x3c>)
 8007958:	1b64      	subs	r4, r4, r5
 800795a:	10a4      	asrs	r4, r4, #2
 800795c:	42a6      	cmp	r6, r4
 800795e:	d109      	bne.n	8007974 <__libc_init_array+0x24>
 8007960:	f000 fee4 	bl	800872c <_init>
 8007964:	2600      	movs	r6, #0
 8007966:	4d0a      	ldr	r5, [pc, #40]	@ (8007990 <__libc_init_array+0x40>)
 8007968:	4c0a      	ldr	r4, [pc, #40]	@ (8007994 <__libc_init_array+0x44>)
 800796a:	1b64      	subs	r4, r4, r5
 800796c:	10a4      	asrs	r4, r4, #2
 800796e:	42a6      	cmp	r6, r4
 8007970:	d105      	bne.n	800797e <__libc_init_array+0x2e>
 8007972:	bd70      	pop	{r4, r5, r6, pc}
 8007974:	f855 3b04 	ldr.w	r3, [r5], #4
 8007978:	4798      	blx	r3
 800797a:	3601      	adds	r6, #1
 800797c:	e7ee      	b.n	800795c <__libc_init_array+0xc>
 800797e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007982:	4798      	blx	r3
 8007984:	3601      	adds	r6, #1
 8007986:	e7f2      	b.n	800796e <__libc_init_array+0x1e>
 8007988:	0800980c 	.word	0x0800980c
 800798c:	0800980c 	.word	0x0800980c
 8007990:	0800980c 	.word	0x0800980c
 8007994:	08009810 	.word	0x08009810

08007998 <__retarget_lock_init_recursive>:
 8007998:	4770      	bx	lr

0800799a <__retarget_lock_acquire_recursive>:
 800799a:	4770      	bx	lr

0800799c <__retarget_lock_release_recursive>:
 800799c:	4770      	bx	lr
	...

080079a0 <_free_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	4605      	mov	r5, r0
 80079a4:	2900      	cmp	r1, #0
 80079a6:	d040      	beq.n	8007a2a <_free_r+0x8a>
 80079a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ac:	1f0c      	subs	r4, r1, #4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	bfb8      	it	lt
 80079b2:	18e4      	addlt	r4, r4, r3
 80079b4:	f000 f8de 	bl	8007b74 <__malloc_lock>
 80079b8:	4a1c      	ldr	r2, [pc, #112]	@ (8007a2c <_free_r+0x8c>)
 80079ba:	6813      	ldr	r3, [r2, #0]
 80079bc:	b933      	cbnz	r3, 80079cc <_free_r+0x2c>
 80079be:	6063      	str	r3, [r4, #4]
 80079c0:	6014      	str	r4, [r2, #0]
 80079c2:	4628      	mov	r0, r5
 80079c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079c8:	f000 b8da 	b.w	8007b80 <__malloc_unlock>
 80079cc:	42a3      	cmp	r3, r4
 80079ce:	d908      	bls.n	80079e2 <_free_r+0x42>
 80079d0:	6820      	ldr	r0, [r4, #0]
 80079d2:	1821      	adds	r1, r4, r0
 80079d4:	428b      	cmp	r3, r1
 80079d6:	bf01      	itttt	eq
 80079d8:	6819      	ldreq	r1, [r3, #0]
 80079da:	685b      	ldreq	r3, [r3, #4]
 80079dc:	1809      	addeq	r1, r1, r0
 80079de:	6021      	streq	r1, [r4, #0]
 80079e0:	e7ed      	b.n	80079be <_free_r+0x1e>
 80079e2:	461a      	mov	r2, r3
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	b10b      	cbz	r3, 80079ec <_free_r+0x4c>
 80079e8:	42a3      	cmp	r3, r4
 80079ea:	d9fa      	bls.n	80079e2 <_free_r+0x42>
 80079ec:	6811      	ldr	r1, [r2, #0]
 80079ee:	1850      	adds	r0, r2, r1
 80079f0:	42a0      	cmp	r0, r4
 80079f2:	d10b      	bne.n	8007a0c <_free_r+0x6c>
 80079f4:	6820      	ldr	r0, [r4, #0]
 80079f6:	4401      	add	r1, r0
 80079f8:	1850      	adds	r0, r2, r1
 80079fa:	4283      	cmp	r3, r0
 80079fc:	6011      	str	r1, [r2, #0]
 80079fe:	d1e0      	bne.n	80079c2 <_free_r+0x22>
 8007a00:	6818      	ldr	r0, [r3, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	4408      	add	r0, r1
 8007a06:	6010      	str	r0, [r2, #0]
 8007a08:	6053      	str	r3, [r2, #4]
 8007a0a:	e7da      	b.n	80079c2 <_free_r+0x22>
 8007a0c:	d902      	bls.n	8007a14 <_free_r+0x74>
 8007a0e:	230c      	movs	r3, #12
 8007a10:	602b      	str	r3, [r5, #0]
 8007a12:	e7d6      	b.n	80079c2 <_free_r+0x22>
 8007a14:	6820      	ldr	r0, [r4, #0]
 8007a16:	1821      	adds	r1, r4, r0
 8007a18:	428b      	cmp	r3, r1
 8007a1a:	bf01      	itttt	eq
 8007a1c:	6819      	ldreq	r1, [r3, #0]
 8007a1e:	685b      	ldreq	r3, [r3, #4]
 8007a20:	1809      	addeq	r1, r1, r0
 8007a22:	6021      	streq	r1, [r4, #0]
 8007a24:	6063      	str	r3, [r4, #4]
 8007a26:	6054      	str	r4, [r2, #4]
 8007a28:	e7cb      	b.n	80079c2 <_free_r+0x22>
 8007a2a:	bd38      	pop	{r3, r4, r5, pc}
 8007a2c:	200004c8 	.word	0x200004c8

08007a30 <sbrk_aligned>:
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	4e0f      	ldr	r6, [pc, #60]	@ (8007a70 <sbrk_aligned+0x40>)
 8007a34:	460c      	mov	r4, r1
 8007a36:	6831      	ldr	r1, [r6, #0]
 8007a38:	4605      	mov	r5, r0
 8007a3a:	b911      	cbnz	r1, 8007a42 <sbrk_aligned+0x12>
 8007a3c:	f000 fe14 	bl	8008668 <_sbrk_r>
 8007a40:	6030      	str	r0, [r6, #0]
 8007a42:	4621      	mov	r1, r4
 8007a44:	4628      	mov	r0, r5
 8007a46:	f000 fe0f 	bl	8008668 <_sbrk_r>
 8007a4a:	1c43      	adds	r3, r0, #1
 8007a4c:	d103      	bne.n	8007a56 <sbrk_aligned+0x26>
 8007a4e:	f04f 34ff 	mov.w	r4, #4294967295
 8007a52:	4620      	mov	r0, r4
 8007a54:	bd70      	pop	{r4, r5, r6, pc}
 8007a56:	1cc4      	adds	r4, r0, #3
 8007a58:	f024 0403 	bic.w	r4, r4, #3
 8007a5c:	42a0      	cmp	r0, r4
 8007a5e:	d0f8      	beq.n	8007a52 <sbrk_aligned+0x22>
 8007a60:	1a21      	subs	r1, r4, r0
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 fe00 	bl	8008668 <_sbrk_r>
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d1f2      	bne.n	8007a52 <sbrk_aligned+0x22>
 8007a6c:	e7ef      	b.n	8007a4e <sbrk_aligned+0x1e>
 8007a6e:	bf00      	nop
 8007a70:	200004c4 	.word	0x200004c4

08007a74 <_malloc_r>:
 8007a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a78:	1ccd      	adds	r5, r1, #3
 8007a7a:	f025 0503 	bic.w	r5, r5, #3
 8007a7e:	3508      	adds	r5, #8
 8007a80:	2d0c      	cmp	r5, #12
 8007a82:	bf38      	it	cc
 8007a84:	250c      	movcc	r5, #12
 8007a86:	2d00      	cmp	r5, #0
 8007a88:	4606      	mov	r6, r0
 8007a8a:	db01      	blt.n	8007a90 <_malloc_r+0x1c>
 8007a8c:	42a9      	cmp	r1, r5
 8007a8e:	d904      	bls.n	8007a9a <_malloc_r+0x26>
 8007a90:	230c      	movs	r3, #12
 8007a92:	6033      	str	r3, [r6, #0]
 8007a94:	2000      	movs	r0, #0
 8007a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b70 <_malloc_r+0xfc>
 8007a9e:	f000 f869 	bl	8007b74 <__malloc_lock>
 8007aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8007aa6:	461c      	mov	r4, r3
 8007aa8:	bb44      	cbnz	r4, 8007afc <_malloc_r+0x88>
 8007aaa:	4629      	mov	r1, r5
 8007aac:	4630      	mov	r0, r6
 8007aae:	f7ff ffbf 	bl	8007a30 <sbrk_aligned>
 8007ab2:	1c43      	adds	r3, r0, #1
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	d158      	bne.n	8007b6a <_malloc_r+0xf6>
 8007ab8:	f8d8 4000 	ldr.w	r4, [r8]
 8007abc:	4627      	mov	r7, r4
 8007abe:	2f00      	cmp	r7, #0
 8007ac0:	d143      	bne.n	8007b4a <_malloc_r+0xd6>
 8007ac2:	2c00      	cmp	r4, #0
 8007ac4:	d04b      	beq.n	8007b5e <_malloc_r+0xea>
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	4639      	mov	r1, r7
 8007aca:	4630      	mov	r0, r6
 8007acc:	eb04 0903 	add.w	r9, r4, r3
 8007ad0:	f000 fdca 	bl	8008668 <_sbrk_r>
 8007ad4:	4581      	cmp	r9, r0
 8007ad6:	d142      	bne.n	8007b5e <_malloc_r+0xea>
 8007ad8:	6821      	ldr	r1, [r4, #0]
 8007ada:	4630      	mov	r0, r6
 8007adc:	1a6d      	subs	r5, r5, r1
 8007ade:	4629      	mov	r1, r5
 8007ae0:	f7ff ffa6 	bl	8007a30 <sbrk_aligned>
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d03a      	beq.n	8007b5e <_malloc_r+0xea>
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	442b      	add	r3, r5
 8007aec:	6023      	str	r3, [r4, #0]
 8007aee:	f8d8 3000 	ldr.w	r3, [r8]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	bb62      	cbnz	r2, 8007b50 <_malloc_r+0xdc>
 8007af6:	f8c8 7000 	str.w	r7, [r8]
 8007afa:	e00f      	b.n	8007b1c <_malloc_r+0xa8>
 8007afc:	6822      	ldr	r2, [r4, #0]
 8007afe:	1b52      	subs	r2, r2, r5
 8007b00:	d420      	bmi.n	8007b44 <_malloc_r+0xd0>
 8007b02:	2a0b      	cmp	r2, #11
 8007b04:	d917      	bls.n	8007b36 <_malloc_r+0xc2>
 8007b06:	1961      	adds	r1, r4, r5
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	6025      	str	r5, [r4, #0]
 8007b0c:	bf18      	it	ne
 8007b0e:	6059      	strne	r1, [r3, #4]
 8007b10:	6863      	ldr	r3, [r4, #4]
 8007b12:	bf08      	it	eq
 8007b14:	f8c8 1000 	streq.w	r1, [r8]
 8007b18:	5162      	str	r2, [r4, r5]
 8007b1a:	604b      	str	r3, [r1, #4]
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	f000 f82f 	bl	8007b80 <__malloc_unlock>
 8007b22:	f104 000b 	add.w	r0, r4, #11
 8007b26:	1d23      	adds	r3, r4, #4
 8007b28:	f020 0007 	bic.w	r0, r0, #7
 8007b2c:	1ac2      	subs	r2, r0, r3
 8007b2e:	bf1c      	itt	ne
 8007b30:	1a1b      	subne	r3, r3, r0
 8007b32:	50a3      	strne	r3, [r4, r2]
 8007b34:	e7af      	b.n	8007a96 <_malloc_r+0x22>
 8007b36:	6862      	ldr	r2, [r4, #4]
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	bf0c      	ite	eq
 8007b3c:	f8c8 2000 	streq.w	r2, [r8]
 8007b40:	605a      	strne	r2, [r3, #4]
 8007b42:	e7eb      	b.n	8007b1c <_malloc_r+0xa8>
 8007b44:	4623      	mov	r3, r4
 8007b46:	6864      	ldr	r4, [r4, #4]
 8007b48:	e7ae      	b.n	8007aa8 <_malloc_r+0x34>
 8007b4a:	463c      	mov	r4, r7
 8007b4c:	687f      	ldr	r7, [r7, #4]
 8007b4e:	e7b6      	b.n	8007abe <_malloc_r+0x4a>
 8007b50:	461a      	mov	r2, r3
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	42a3      	cmp	r3, r4
 8007b56:	d1fb      	bne.n	8007b50 <_malloc_r+0xdc>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	6053      	str	r3, [r2, #4]
 8007b5c:	e7de      	b.n	8007b1c <_malloc_r+0xa8>
 8007b5e:	230c      	movs	r3, #12
 8007b60:	4630      	mov	r0, r6
 8007b62:	6033      	str	r3, [r6, #0]
 8007b64:	f000 f80c 	bl	8007b80 <__malloc_unlock>
 8007b68:	e794      	b.n	8007a94 <_malloc_r+0x20>
 8007b6a:	6005      	str	r5, [r0, #0]
 8007b6c:	e7d6      	b.n	8007b1c <_malloc_r+0xa8>
 8007b6e:	bf00      	nop
 8007b70:	200004c8 	.word	0x200004c8

08007b74 <__malloc_lock>:
 8007b74:	4801      	ldr	r0, [pc, #4]	@ (8007b7c <__malloc_lock+0x8>)
 8007b76:	f7ff bf10 	b.w	800799a <__retarget_lock_acquire_recursive>
 8007b7a:	bf00      	nop
 8007b7c:	200004c0 	.word	0x200004c0

08007b80 <__malloc_unlock>:
 8007b80:	4801      	ldr	r0, [pc, #4]	@ (8007b88 <__malloc_unlock+0x8>)
 8007b82:	f7ff bf0b 	b.w	800799c <__retarget_lock_release_recursive>
 8007b86:	bf00      	nop
 8007b88:	200004c0 	.word	0x200004c0

08007b8c <__ssputs_r>:
 8007b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b90:	461f      	mov	r7, r3
 8007b92:	688e      	ldr	r6, [r1, #8]
 8007b94:	4682      	mov	sl, r0
 8007b96:	42be      	cmp	r6, r7
 8007b98:	460c      	mov	r4, r1
 8007b9a:	4690      	mov	r8, r2
 8007b9c:	680b      	ldr	r3, [r1, #0]
 8007b9e:	d82d      	bhi.n	8007bfc <__ssputs_r+0x70>
 8007ba0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ba4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ba8:	d026      	beq.n	8007bf8 <__ssputs_r+0x6c>
 8007baa:	6965      	ldr	r5, [r4, #20]
 8007bac:	6909      	ldr	r1, [r1, #16]
 8007bae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bb2:	eba3 0901 	sub.w	r9, r3, r1
 8007bb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bba:	1c7b      	adds	r3, r7, #1
 8007bbc:	444b      	add	r3, r9
 8007bbe:	106d      	asrs	r5, r5, #1
 8007bc0:	429d      	cmp	r5, r3
 8007bc2:	bf38      	it	cc
 8007bc4:	461d      	movcc	r5, r3
 8007bc6:	0553      	lsls	r3, r2, #21
 8007bc8:	d527      	bpl.n	8007c1a <__ssputs_r+0x8e>
 8007bca:	4629      	mov	r1, r5
 8007bcc:	f7ff ff52 	bl	8007a74 <_malloc_r>
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	b360      	cbz	r0, 8007c2e <__ssputs_r+0xa2>
 8007bd4:	464a      	mov	r2, r9
 8007bd6:	6921      	ldr	r1, [r4, #16]
 8007bd8:	f000 fd64 	bl	80086a4 <memcpy>
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007be6:	81a3      	strh	r3, [r4, #12]
 8007be8:	6126      	str	r6, [r4, #16]
 8007bea:	444e      	add	r6, r9
 8007bec:	6026      	str	r6, [r4, #0]
 8007bee:	463e      	mov	r6, r7
 8007bf0:	6165      	str	r5, [r4, #20]
 8007bf2:	eba5 0509 	sub.w	r5, r5, r9
 8007bf6:	60a5      	str	r5, [r4, #8]
 8007bf8:	42be      	cmp	r6, r7
 8007bfa:	d900      	bls.n	8007bfe <__ssputs_r+0x72>
 8007bfc:	463e      	mov	r6, r7
 8007bfe:	4632      	mov	r2, r6
 8007c00:	4641      	mov	r1, r8
 8007c02:	6820      	ldr	r0, [r4, #0]
 8007c04:	f000 fcf3 	bl	80085ee <memmove>
 8007c08:	2000      	movs	r0, #0
 8007c0a:	68a3      	ldr	r3, [r4, #8]
 8007c0c:	1b9b      	subs	r3, r3, r6
 8007c0e:	60a3      	str	r3, [r4, #8]
 8007c10:	6823      	ldr	r3, [r4, #0]
 8007c12:	4433      	add	r3, r6
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c1a:	462a      	mov	r2, r5
 8007c1c:	f000 fd50 	bl	80086c0 <_realloc_r>
 8007c20:	4606      	mov	r6, r0
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d1e0      	bne.n	8007be8 <__ssputs_r+0x5c>
 8007c26:	4650      	mov	r0, sl
 8007c28:	6921      	ldr	r1, [r4, #16]
 8007c2a:	f7ff feb9 	bl	80079a0 <_free_r>
 8007c2e:	230c      	movs	r3, #12
 8007c30:	f8ca 3000 	str.w	r3, [sl]
 8007c34:	89a3      	ldrh	r3, [r4, #12]
 8007c36:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c3e:	81a3      	strh	r3, [r4, #12]
 8007c40:	e7e9      	b.n	8007c16 <__ssputs_r+0x8a>
	...

08007c44 <_svfiprintf_r>:
 8007c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c48:	4698      	mov	r8, r3
 8007c4a:	898b      	ldrh	r3, [r1, #12]
 8007c4c:	4607      	mov	r7, r0
 8007c4e:	061b      	lsls	r3, r3, #24
 8007c50:	460d      	mov	r5, r1
 8007c52:	4614      	mov	r4, r2
 8007c54:	b09d      	sub	sp, #116	@ 0x74
 8007c56:	d510      	bpl.n	8007c7a <_svfiprintf_r+0x36>
 8007c58:	690b      	ldr	r3, [r1, #16]
 8007c5a:	b973      	cbnz	r3, 8007c7a <_svfiprintf_r+0x36>
 8007c5c:	2140      	movs	r1, #64	@ 0x40
 8007c5e:	f7ff ff09 	bl	8007a74 <_malloc_r>
 8007c62:	6028      	str	r0, [r5, #0]
 8007c64:	6128      	str	r0, [r5, #16]
 8007c66:	b930      	cbnz	r0, 8007c76 <_svfiprintf_r+0x32>
 8007c68:	230c      	movs	r3, #12
 8007c6a:	603b      	str	r3, [r7, #0]
 8007c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c70:	b01d      	add	sp, #116	@ 0x74
 8007c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c76:	2340      	movs	r3, #64	@ 0x40
 8007c78:	616b      	str	r3, [r5, #20]
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c7e:	2320      	movs	r3, #32
 8007c80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c84:	2330      	movs	r3, #48	@ 0x30
 8007c86:	f04f 0901 	mov.w	r9, #1
 8007c8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c8e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007e28 <_svfiprintf_r+0x1e4>
 8007c92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c96:	4623      	mov	r3, r4
 8007c98:	469a      	mov	sl, r3
 8007c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c9e:	b10a      	cbz	r2, 8007ca4 <_svfiprintf_r+0x60>
 8007ca0:	2a25      	cmp	r2, #37	@ 0x25
 8007ca2:	d1f9      	bne.n	8007c98 <_svfiprintf_r+0x54>
 8007ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8007ca8:	d00b      	beq.n	8007cc2 <_svfiprintf_r+0x7e>
 8007caa:	465b      	mov	r3, fp
 8007cac:	4622      	mov	r2, r4
 8007cae:	4629      	mov	r1, r5
 8007cb0:	4638      	mov	r0, r7
 8007cb2:	f7ff ff6b 	bl	8007b8c <__ssputs_r>
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	f000 80a7 	beq.w	8007e0a <_svfiprintf_r+0x1c6>
 8007cbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cbe:	445a      	add	r2, fp
 8007cc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 809f 	beq.w	8007e0a <_svfiprintf_r+0x1c6>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cd6:	f10a 0a01 	add.w	sl, sl, #1
 8007cda:	9304      	str	r3, [sp, #16]
 8007cdc:	9307      	str	r3, [sp, #28]
 8007cde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ce2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ce4:	4654      	mov	r4, sl
 8007ce6:	2205      	movs	r2, #5
 8007ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cec:	484e      	ldr	r0, [pc, #312]	@ (8007e28 <_svfiprintf_r+0x1e4>)
 8007cee:	f000 fccb 	bl	8008688 <memchr>
 8007cf2:	9a04      	ldr	r2, [sp, #16]
 8007cf4:	b9d8      	cbnz	r0, 8007d2e <_svfiprintf_r+0xea>
 8007cf6:	06d0      	lsls	r0, r2, #27
 8007cf8:	bf44      	itt	mi
 8007cfa:	2320      	movmi	r3, #32
 8007cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d00:	0711      	lsls	r1, r2, #28
 8007d02:	bf44      	itt	mi
 8007d04:	232b      	movmi	r3, #43	@ 0x2b
 8007d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d10:	d015      	beq.n	8007d3e <_svfiprintf_r+0xfa>
 8007d12:	4654      	mov	r4, sl
 8007d14:	2000      	movs	r0, #0
 8007d16:	f04f 0c0a 	mov.w	ip, #10
 8007d1a:	9a07      	ldr	r2, [sp, #28]
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d22:	3b30      	subs	r3, #48	@ 0x30
 8007d24:	2b09      	cmp	r3, #9
 8007d26:	d94b      	bls.n	8007dc0 <_svfiprintf_r+0x17c>
 8007d28:	b1b0      	cbz	r0, 8007d58 <_svfiprintf_r+0x114>
 8007d2a:	9207      	str	r2, [sp, #28]
 8007d2c:	e014      	b.n	8007d58 <_svfiprintf_r+0x114>
 8007d2e:	eba0 0308 	sub.w	r3, r0, r8
 8007d32:	fa09 f303 	lsl.w	r3, r9, r3
 8007d36:	4313      	orrs	r3, r2
 8007d38:	46a2      	mov	sl, r4
 8007d3a:	9304      	str	r3, [sp, #16]
 8007d3c:	e7d2      	b.n	8007ce4 <_svfiprintf_r+0xa0>
 8007d3e:	9b03      	ldr	r3, [sp, #12]
 8007d40:	1d19      	adds	r1, r3, #4
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	9103      	str	r1, [sp, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	bfbb      	ittet	lt
 8007d4a:	425b      	neglt	r3, r3
 8007d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8007d50:	9307      	strge	r3, [sp, #28]
 8007d52:	9307      	strlt	r3, [sp, #28]
 8007d54:	bfb8      	it	lt
 8007d56:	9204      	strlt	r2, [sp, #16]
 8007d58:	7823      	ldrb	r3, [r4, #0]
 8007d5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d5c:	d10a      	bne.n	8007d74 <_svfiprintf_r+0x130>
 8007d5e:	7863      	ldrb	r3, [r4, #1]
 8007d60:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d62:	d132      	bne.n	8007dca <_svfiprintf_r+0x186>
 8007d64:	9b03      	ldr	r3, [sp, #12]
 8007d66:	3402      	adds	r4, #2
 8007d68:	1d1a      	adds	r2, r3, #4
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	9203      	str	r2, [sp, #12]
 8007d6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d72:	9305      	str	r3, [sp, #20]
 8007d74:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007e2c <_svfiprintf_r+0x1e8>
 8007d78:	2203      	movs	r2, #3
 8007d7a:	4650      	mov	r0, sl
 8007d7c:	7821      	ldrb	r1, [r4, #0]
 8007d7e:	f000 fc83 	bl	8008688 <memchr>
 8007d82:	b138      	cbz	r0, 8007d94 <_svfiprintf_r+0x150>
 8007d84:	2240      	movs	r2, #64	@ 0x40
 8007d86:	9b04      	ldr	r3, [sp, #16]
 8007d88:	eba0 000a 	sub.w	r0, r0, sl
 8007d8c:	4082      	lsls	r2, r0
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	3401      	adds	r4, #1
 8007d92:	9304      	str	r3, [sp, #16]
 8007d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d98:	2206      	movs	r2, #6
 8007d9a:	4825      	ldr	r0, [pc, #148]	@ (8007e30 <_svfiprintf_r+0x1ec>)
 8007d9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007da0:	f000 fc72 	bl	8008688 <memchr>
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d036      	beq.n	8007e16 <_svfiprintf_r+0x1d2>
 8007da8:	4b22      	ldr	r3, [pc, #136]	@ (8007e34 <_svfiprintf_r+0x1f0>)
 8007daa:	bb1b      	cbnz	r3, 8007df4 <_svfiprintf_r+0x1b0>
 8007dac:	9b03      	ldr	r3, [sp, #12]
 8007dae:	3307      	adds	r3, #7
 8007db0:	f023 0307 	bic.w	r3, r3, #7
 8007db4:	3308      	adds	r3, #8
 8007db6:	9303      	str	r3, [sp, #12]
 8007db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dba:	4433      	add	r3, r6
 8007dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dbe:	e76a      	b.n	8007c96 <_svfiprintf_r+0x52>
 8007dc0:	460c      	mov	r4, r1
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dc8:	e7a8      	b.n	8007d1c <_svfiprintf_r+0xd8>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f04f 0c0a 	mov.w	ip, #10
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	3401      	adds	r4, #1
 8007dd4:	9305      	str	r3, [sp, #20]
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ddc:	3a30      	subs	r2, #48	@ 0x30
 8007dde:	2a09      	cmp	r2, #9
 8007de0:	d903      	bls.n	8007dea <_svfiprintf_r+0x1a6>
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0c6      	beq.n	8007d74 <_svfiprintf_r+0x130>
 8007de6:	9105      	str	r1, [sp, #20]
 8007de8:	e7c4      	b.n	8007d74 <_svfiprintf_r+0x130>
 8007dea:	4604      	mov	r4, r0
 8007dec:	2301      	movs	r3, #1
 8007dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8007df2:	e7f0      	b.n	8007dd6 <_svfiprintf_r+0x192>
 8007df4:	ab03      	add	r3, sp, #12
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	462a      	mov	r2, r5
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8007e38 <_svfiprintf_r+0x1f4>)
 8007dfe:	a904      	add	r1, sp, #16
 8007e00:	f3af 8000 	nop.w
 8007e04:	1c42      	adds	r2, r0, #1
 8007e06:	4606      	mov	r6, r0
 8007e08:	d1d6      	bne.n	8007db8 <_svfiprintf_r+0x174>
 8007e0a:	89ab      	ldrh	r3, [r5, #12]
 8007e0c:	065b      	lsls	r3, r3, #25
 8007e0e:	f53f af2d 	bmi.w	8007c6c <_svfiprintf_r+0x28>
 8007e12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e14:	e72c      	b.n	8007c70 <_svfiprintf_r+0x2c>
 8007e16:	ab03      	add	r3, sp, #12
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	462a      	mov	r2, r5
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	4b06      	ldr	r3, [pc, #24]	@ (8007e38 <_svfiprintf_r+0x1f4>)
 8007e20:	a904      	add	r1, sp, #16
 8007e22:	f000 f9bd 	bl	80081a0 <_printf_i>
 8007e26:	e7ed      	b.n	8007e04 <_svfiprintf_r+0x1c0>
 8007e28:	080097d0 	.word	0x080097d0
 8007e2c:	080097d6 	.word	0x080097d6
 8007e30:	080097da 	.word	0x080097da
 8007e34:	00000000 	.word	0x00000000
 8007e38:	08007b8d 	.word	0x08007b8d

08007e3c <__sfputc_r>:
 8007e3c:	6893      	ldr	r3, [r2, #8]
 8007e3e:	b410      	push	{r4}
 8007e40:	3b01      	subs	r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	6093      	str	r3, [r2, #8]
 8007e46:	da07      	bge.n	8007e58 <__sfputc_r+0x1c>
 8007e48:	6994      	ldr	r4, [r2, #24]
 8007e4a:	42a3      	cmp	r3, r4
 8007e4c:	db01      	blt.n	8007e52 <__sfputc_r+0x16>
 8007e4e:	290a      	cmp	r1, #10
 8007e50:	d102      	bne.n	8007e58 <__sfputc_r+0x1c>
 8007e52:	bc10      	pop	{r4}
 8007e54:	f7ff bc93 	b.w	800777e <__swbuf_r>
 8007e58:	6813      	ldr	r3, [r2, #0]
 8007e5a:	1c58      	adds	r0, r3, #1
 8007e5c:	6010      	str	r0, [r2, #0]
 8007e5e:	7019      	strb	r1, [r3, #0]
 8007e60:	4608      	mov	r0, r1
 8007e62:	bc10      	pop	{r4}
 8007e64:	4770      	bx	lr

08007e66 <__sfputs_r>:
 8007e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e68:	4606      	mov	r6, r0
 8007e6a:	460f      	mov	r7, r1
 8007e6c:	4614      	mov	r4, r2
 8007e6e:	18d5      	adds	r5, r2, r3
 8007e70:	42ac      	cmp	r4, r5
 8007e72:	d101      	bne.n	8007e78 <__sfputs_r+0x12>
 8007e74:	2000      	movs	r0, #0
 8007e76:	e007      	b.n	8007e88 <__sfputs_r+0x22>
 8007e78:	463a      	mov	r2, r7
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e80:	f7ff ffdc 	bl	8007e3c <__sfputc_r>
 8007e84:	1c43      	adds	r3, r0, #1
 8007e86:	d1f3      	bne.n	8007e70 <__sfputs_r+0xa>
 8007e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e8c <_vfiprintf_r>:
 8007e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e90:	460d      	mov	r5, r1
 8007e92:	4614      	mov	r4, r2
 8007e94:	4698      	mov	r8, r3
 8007e96:	4606      	mov	r6, r0
 8007e98:	b09d      	sub	sp, #116	@ 0x74
 8007e9a:	b118      	cbz	r0, 8007ea4 <_vfiprintf_r+0x18>
 8007e9c:	6a03      	ldr	r3, [r0, #32]
 8007e9e:	b90b      	cbnz	r3, 8007ea4 <_vfiprintf_r+0x18>
 8007ea0:	f7ff fb62 	bl	8007568 <__sinit>
 8007ea4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ea6:	07d9      	lsls	r1, r3, #31
 8007ea8:	d405      	bmi.n	8007eb6 <_vfiprintf_r+0x2a>
 8007eaa:	89ab      	ldrh	r3, [r5, #12]
 8007eac:	059a      	lsls	r2, r3, #22
 8007eae:	d402      	bmi.n	8007eb6 <_vfiprintf_r+0x2a>
 8007eb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007eb2:	f7ff fd72 	bl	800799a <__retarget_lock_acquire_recursive>
 8007eb6:	89ab      	ldrh	r3, [r5, #12]
 8007eb8:	071b      	lsls	r3, r3, #28
 8007eba:	d501      	bpl.n	8007ec0 <_vfiprintf_r+0x34>
 8007ebc:	692b      	ldr	r3, [r5, #16]
 8007ebe:	b99b      	cbnz	r3, 8007ee8 <_vfiprintf_r+0x5c>
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f7ff fc9a 	bl	80077fc <__swsetup_r>
 8007ec8:	b170      	cbz	r0, 8007ee8 <_vfiprintf_r+0x5c>
 8007eca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ecc:	07dc      	lsls	r4, r3, #31
 8007ece:	d504      	bpl.n	8007eda <_vfiprintf_r+0x4e>
 8007ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed4:	b01d      	add	sp, #116	@ 0x74
 8007ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eda:	89ab      	ldrh	r3, [r5, #12]
 8007edc:	0598      	lsls	r0, r3, #22
 8007ede:	d4f7      	bmi.n	8007ed0 <_vfiprintf_r+0x44>
 8007ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ee2:	f7ff fd5b 	bl	800799c <__retarget_lock_release_recursive>
 8007ee6:	e7f3      	b.n	8007ed0 <_vfiprintf_r+0x44>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eec:	2320      	movs	r3, #32
 8007eee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ef2:	2330      	movs	r3, #48	@ 0x30
 8007ef4:	f04f 0901 	mov.w	r9, #1
 8007ef8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007efc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80080a8 <_vfiprintf_r+0x21c>
 8007f00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f04:	4623      	mov	r3, r4
 8007f06:	469a      	mov	sl, r3
 8007f08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f0c:	b10a      	cbz	r2, 8007f12 <_vfiprintf_r+0x86>
 8007f0e:	2a25      	cmp	r2, #37	@ 0x25
 8007f10:	d1f9      	bne.n	8007f06 <_vfiprintf_r+0x7a>
 8007f12:	ebba 0b04 	subs.w	fp, sl, r4
 8007f16:	d00b      	beq.n	8007f30 <_vfiprintf_r+0xa4>
 8007f18:	465b      	mov	r3, fp
 8007f1a:	4622      	mov	r2, r4
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f7ff ffa1 	bl	8007e66 <__sfputs_r>
 8007f24:	3001      	adds	r0, #1
 8007f26:	f000 80a7 	beq.w	8008078 <_vfiprintf_r+0x1ec>
 8007f2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f2c:	445a      	add	r2, fp
 8007f2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f30:	f89a 3000 	ldrb.w	r3, [sl]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 809f 	beq.w	8008078 <_vfiprintf_r+0x1ec>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f44:	f10a 0a01 	add.w	sl, sl, #1
 8007f48:	9304      	str	r3, [sp, #16]
 8007f4a:	9307      	str	r3, [sp, #28]
 8007f4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f50:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f52:	4654      	mov	r4, sl
 8007f54:	2205      	movs	r2, #5
 8007f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f5a:	4853      	ldr	r0, [pc, #332]	@ (80080a8 <_vfiprintf_r+0x21c>)
 8007f5c:	f000 fb94 	bl	8008688 <memchr>
 8007f60:	9a04      	ldr	r2, [sp, #16]
 8007f62:	b9d8      	cbnz	r0, 8007f9c <_vfiprintf_r+0x110>
 8007f64:	06d1      	lsls	r1, r2, #27
 8007f66:	bf44      	itt	mi
 8007f68:	2320      	movmi	r3, #32
 8007f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f6e:	0713      	lsls	r3, r2, #28
 8007f70:	bf44      	itt	mi
 8007f72:	232b      	movmi	r3, #43	@ 0x2b
 8007f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f78:	f89a 3000 	ldrb.w	r3, [sl]
 8007f7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f7e:	d015      	beq.n	8007fac <_vfiprintf_r+0x120>
 8007f80:	4654      	mov	r4, sl
 8007f82:	2000      	movs	r0, #0
 8007f84:	f04f 0c0a 	mov.w	ip, #10
 8007f88:	9a07      	ldr	r2, [sp, #28]
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f90:	3b30      	subs	r3, #48	@ 0x30
 8007f92:	2b09      	cmp	r3, #9
 8007f94:	d94b      	bls.n	800802e <_vfiprintf_r+0x1a2>
 8007f96:	b1b0      	cbz	r0, 8007fc6 <_vfiprintf_r+0x13a>
 8007f98:	9207      	str	r2, [sp, #28]
 8007f9a:	e014      	b.n	8007fc6 <_vfiprintf_r+0x13a>
 8007f9c:	eba0 0308 	sub.w	r3, r0, r8
 8007fa0:	fa09 f303 	lsl.w	r3, r9, r3
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	46a2      	mov	sl, r4
 8007fa8:	9304      	str	r3, [sp, #16]
 8007faa:	e7d2      	b.n	8007f52 <_vfiprintf_r+0xc6>
 8007fac:	9b03      	ldr	r3, [sp, #12]
 8007fae:	1d19      	adds	r1, r3, #4
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	9103      	str	r1, [sp, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	bfbb      	ittet	lt
 8007fb8:	425b      	neglt	r3, r3
 8007fba:	f042 0202 	orrlt.w	r2, r2, #2
 8007fbe:	9307      	strge	r3, [sp, #28]
 8007fc0:	9307      	strlt	r3, [sp, #28]
 8007fc2:	bfb8      	it	lt
 8007fc4:	9204      	strlt	r2, [sp, #16]
 8007fc6:	7823      	ldrb	r3, [r4, #0]
 8007fc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fca:	d10a      	bne.n	8007fe2 <_vfiprintf_r+0x156>
 8007fcc:	7863      	ldrb	r3, [r4, #1]
 8007fce:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fd0:	d132      	bne.n	8008038 <_vfiprintf_r+0x1ac>
 8007fd2:	9b03      	ldr	r3, [sp, #12]
 8007fd4:	3402      	adds	r4, #2
 8007fd6:	1d1a      	adds	r2, r3, #4
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	9203      	str	r2, [sp, #12]
 8007fdc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fe0:	9305      	str	r3, [sp, #20]
 8007fe2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80080ac <_vfiprintf_r+0x220>
 8007fe6:	2203      	movs	r2, #3
 8007fe8:	4650      	mov	r0, sl
 8007fea:	7821      	ldrb	r1, [r4, #0]
 8007fec:	f000 fb4c 	bl	8008688 <memchr>
 8007ff0:	b138      	cbz	r0, 8008002 <_vfiprintf_r+0x176>
 8007ff2:	2240      	movs	r2, #64	@ 0x40
 8007ff4:	9b04      	ldr	r3, [sp, #16]
 8007ff6:	eba0 000a 	sub.w	r0, r0, sl
 8007ffa:	4082      	lsls	r2, r0
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	3401      	adds	r4, #1
 8008000:	9304      	str	r3, [sp, #16]
 8008002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008006:	2206      	movs	r2, #6
 8008008:	4829      	ldr	r0, [pc, #164]	@ (80080b0 <_vfiprintf_r+0x224>)
 800800a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800800e:	f000 fb3b 	bl	8008688 <memchr>
 8008012:	2800      	cmp	r0, #0
 8008014:	d03f      	beq.n	8008096 <_vfiprintf_r+0x20a>
 8008016:	4b27      	ldr	r3, [pc, #156]	@ (80080b4 <_vfiprintf_r+0x228>)
 8008018:	bb1b      	cbnz	r3, 8008062 <_vfiprintf_r+0x1d6>
 800801a:	9b03      	ldr	r3, [sp, #12]
 800801c:	3307      	adds	r3, #7
 800801e:	f023 0307 	bic.w	r3, r3, #7
 8008022:	3308      	adds	r3, #8
 8008024:	9303      	str	r3, [sp, #12]
 8008026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008028:	443b      	add	r3, r7
 800802a:	9309      	str	r3, [sp, #36]	@ 0x24
 800802c:	e76a      	b.n	8007f04 <_vfiprintf_r+0x78>
 800802e:	460c      	mov	r4, r1
 8008030:	2001      	movs	r0, #1
 8008032:	fb0c 3202 	mla	r2, ip, r2, r3
 8008036:	e7a8      	b.n	8007f8a <_vfiprintf_r+0xfe>
 8008038:	2300      	movs	r3, #0
 800803a:	f04f 0c0a 	mov.w	ip, #10
 800803e:	4619      	mov	r1, r3
 8008040:	3401      	adds	r4, #1
 8008042:	9305      	str	r3, [sp, #20]
 8008044:	4620      	mov	r0, r4
 8008046:	f810 2b01 	ldrb.w	r2, [r0], #1
 800804a:	3a30      	subs	r2, #48	@ 0x30
 800804c:	2a09      	cmp	r2, #9
 800804e:	d903      	bls.n	8008058 <_vfiprintf_r+0x1cc>
 8008050:	2b00      	cmp	r3, #0
 8008052:	d0c6      	beq.n	8007fe2 <_vfiprintf_r+0x156>
 8008054:	9105      	str	r1, [sp, #20]
 8008056:	e7c4      	b.n	8007fe2 <_vfiprintf_r+0x156>
 8008058:	4604      	mov	r4, r0
 800805a:	2301      	movs	r3, #1
 800805c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008060:	e7f0      	b.n	8008044 <_vfiprintf_r+0x1b8>
 8008062:	ab03      	add	r3, sp, #12
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	462a      	mov	r2, r5
 8008068:	4630      	mov	r0, r6
 800806a:	4b13      	ldr	r3, [pc, #76]	@ (80080b8 <_vfiprintf_r+0x22c>)
 800806c:	a904      	add	r1, sp, #16
 800806e:	f3af 8000 	nop.w
 8008072:	4607      	mov	r7, r0
 8008074:	1c78      	adds	r0, r7, #1
 8008076:	d1d6      	bne.n	8008026 <_vfiprintf_r+0x19a>
 8008078:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800807a:	07d9      	lsls	r1, r3, #31
 800807c:	d405      	bmi.n	800808a <_vfiprintf_r+0x1fe>
 800807e:	89ab      	ldrh	r3, [r5, #12]
 8008080:	059a      	lsls	r2, r3, #22
 8008082:	d402      	bmi.n	800808a <_vfiprintf_r+0x1fe>
 8008084:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008086:	f7ff fc89 	bl	800799c <__retarget_lock_release_recursive>
 800808a:	89ab      	ldrh	r3, [r5, #12]
 800808c:	065b      	lsls	r3, r3, #25
 800808e:	f53f af1f 	bmi.w	8007ed0 <_vfiprintf_r+0x44>
 8008092:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008094:	e71e      	b.n	8007ed4 <_vfiprintf_r+0x48>
 8008096:	ab03      	add	r3, sp, #12
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	462a      	mov	r2, r5
 800809c:	4630      	mov	r0, r6
 800809e:	4b06      	ldr	r3, [pc, #24]	@ (80080b8 <_vfiprintf_r+0x22c>)
 80080a0:	a904      	add	r1, sp, #16
 80080a2:	f000 f87d 	bl	80081a0 <_printf_i>
 80080a6:	e7e4      	b.n	8008072 <_vfiprintf_r+0x1e6>
 80080a8:	080097d0 	.word	0x080097d0
 80080ac:	080097d6 	.word	0x080097d6
 80080b0:	080097da 	.word	0x080097da
 80080b4:	00000000 	.word	0x00000000
 80080b8:	08007e67 	.word	0x08007e67

080080bc <_printf_common>:
 80080bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c0:	4616      	mov	r6, r2
 80080c2:	4698      	mov	r8, r3
 80080c4:	688a      	ldr	r2, [r1, #8]
 80080c6:	690b      	ldr	r3, [r1, #16]
 80080c8:	4607      	mov	r7, r0
 80080ca:	4293      	cmp	r3, r2
 80080cc:	bfb8      	it	lt
 80080ce:	4613      	movlt	r3, r2
 80080d0:	6033      	str	r3, [r6, #0]
 80080d2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80080d6:	460c      	mov	r4, r1
 80080d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80080dc:	b10a      	cbz	r2, 80080e2 <_printf_common+0x26>
 80080de:	3301      	adds	r3, #1
 80080e0:	6033      	str	r3, [r6, #0]
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	0699      	lsls	r1, r3, #26
 80080e6:	bf42      	ittt	mi
 80080e8:	6833      	ldrmi	r3, [r6, #0]
 80080ea:	3302      	addmi	r3, #2
 80080ec:	6033      	strmi	r3, [r6, #0]
 80080ee:	6825      	ldr	r5, [r4, #0]
 80080f0:	f015 0506 	ands.w	r5, r5, #6
 80080f4:	d106      	bne.n	8008104 <_printf_common+0x48>
 80080f6:	f104 0a19 	add.w	sl, r4, #25
 80080fa:	68e3      	ldr	r3, [r4, #12]
 80080fc:	6832      	ldr	r2, [r6, #0]
 80080fe:	1a9b      	subs	r3, r3, r2
 8008100:	42ab      	cmp	r3, r5
 8008102:	dc2b      	bgt.n	800815c <_printf_common+0xa0>
 8008104:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008108:	6822      	ldr	r2, [r4, #0]
 800810a:	3b00      	subs	r3, #0
 800810c:	bf18      	it	ne
 800810e:	2301      	movne	r3, #1
 8008110:	0692      	lsls	r2, r2, #26
 8008112:	d430      	bmi.n	8008176 <_printf_common+0xba>
 8008114:	4641      	mov	r1, r8
 8008116:	4638      	mov	r0, r7
 8008118:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800811c:	47c8      	blx	r9
 800811e:	3001      	adds	r0, #1
 8008120:	d023      	beq.n	800816a <_printf_common+0xae>
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	6922      	ldr	r2, [r4, #16]
 8008126:	f003 0306 	and.w	r3, r3, #6
 800812a:	2b04      	cmp	r3, #4
 800812c:	bf14      	ite	ne
 800812e:	2500      	movne	r5, #0
 8008130:	6833      	ldreq	r3, [r6, #0]
 8008132:	f04f 0600 	mov.w	r6, #0
 8008136:	bf08      	it	eq
 8008138:	68e5      	ldreq	r5, [r4, #12]
 800813a:	f104 041a 	add.w	r4, r4, #26
 800813e:	bf08      	it	eq
 8008140:	1aed      	subeq	r5, r5, r3
 8008142:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008146:	bf08      	it	eq
 8008148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800814c:	4293      	cmp	r3, r2
 800814e:	bfc4      	itt	gt
 8008150:	1a9b      	subgt	r3, r3, r2
 8008152:	18ed      	addgt	r5, r5, r3
 8008154:	42b5      	cmp	r5, r6
 8008156:	d11a      	bne.n	800818e <_printf_common+0xd2>
 8008158:	2000      	movs	r0, #0
 800815a:	e008      	b.n	800816e <_printf_common+0xb2>
 800815c:	2301      	movs	r3, #1
 800815e:	4652      	mov	r2, sl
 8008160:	4641      	mov	r1, r8
 8008162:	4638      	mov	r0, r7
 8008164:	47c8      	blx	r9
 8008166:	3001      	adds	r0, #1
 8008168:	d103      	bne.n	8008172 <_printf_common+0xb6>
 800816a:	f04f 30ff 	mov.w	r0, #4294967295
 800816e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008172:	3501      	adds	r5, #1
 8008174:	e7c1      	b.n	80080fa <_printf_common+0x3e>
 8008176:	2030      	movs	r0, #48	@ 0x30
 8008178:	18e1      	adds	r1, r4, r3
 800817a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008184:	4422      	add	r2, r4
 8008186:	3302      	adds	r3, #2
 8008188:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800818c:	e7c2      	b.n	8008114 <_printf_common+0x58>
 800818e:	2301      	movs	r3, #1
 8008190:	4622      	mov	r2, r4
 8008192:	4641      	mov	r1, r8
 8008194:	4638      	mov	r0, r7
 8008196:	47c8      	blx	r9
 8008198:	3001      	adds	r0, #1
 800819a:	d0e6      	beq.n	800816a <_printf_common+0xae>
 800819c:	3601      	adds	r6, #1
 800819e:	e7d9      	b.n	8008154 <_printf_common+0x98>

080081a0 <_printf_i>:
 80081a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081a4:	7e0f      	ldrb	r7, [r1, #24]
 80081a6:	4691      	mov	r9, r2
 80081a8:	2f78      	cmp	r7, #120	@ 0x78
 80081aa:	4680      	mov	r8, r0
 80081ac:	460c      	mov	r4, r1
 80081ae:	469a      	mov	sl, r3
 80081b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80081b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80081b6:	d807      	bhi.n	80081c8 <_printf_i+0x28>
 80081b8:	2f62      	cmp	r7, #98	@ 0x62
 80081ba:	d80a      	bhi.n	80081d2 <_printf_i+0x32>
 80081bc:	2f00      	cmp	r7, #0
 80081be:	f000 80d1 	beq.w	8008364 <_printf_i+0x1c4>
 80081c2:	2f58      	cmp	r7, #88	@ 0x58
 80081c4:	f000 80b8 	beq.w	8008338 <_printf_i+0x198>
 80081c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80081d0:	e03a      	b.n	8008248 <_printf_i+0xa8>
 80081d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80081d6:	2b15      	cmp	r3, #21
 80081d8:	d8f6      	bhi.n	80081c8 <_printf_i+0x28>
 80081da:	a101      	add	r1, pc, #4	@ (adr r1, 80081e0 <_printf_i+0x40>)
 80081dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081e0:	08008239 	.word	0x08008239
 80081e4:	0800824d 	.word	0x0800824d
 80081e8:	080081c9 	.word	0x080081c9
 80081ec:	080081c9 	.word	0x080081c9
 80081f0:	080081c9 	.word	0x080081c9
 80081f4:	080081c9 	.word	0x080081c9
 80081f8:	0800824d 	.word	0x0800824d
 80081fc:	080081c9 	.word	0x080081c9
 8008200:	080081c9 	.word	0x080081c9
 8008204:	080081c9 	.word	0x080081c9
 8008208:	080081c9 	.word	0x080081c9
 800820c:	0800834b 	.word	0x0800834b
 8008210:	08008277 	.word	0x08008277
 8008214:	08008305 	.word	0x08008305
 8008218:	080081c9 	.word	0x080081c9
 800821c:	080081c9 	.word	0x080081c9
 8008220:	0800836d 	.word	0x0800836d
 8008224:	080081c9 	.word	0x080081c9
 8008228:	08008277 	.word	0x08008277
 800822c:	080081c9 	.word	0x080081c9
 8008230:	080081c9 	.word	0x080081c9
 8008234:	0800830d 	.word	0x0800830d
 8008238:	6833      	ldr	r3, [r6, #0]
 800823a:	1d1a      	adds	r2, r3, #4
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6032      	str	r2, [r6, #0]
 8008240:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008244:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008248:	2301      	movs	r3, #1
 800824a:	e09c      	b.n	8008386 <_printf_i+0x1e6>
 800824c:	6833      	ldr	r3, [r6, #0]
 800824e:	6820      	ldr	r0, [r4, #0]
 8008250:	1d19      	adds	r1, r3, #4
 8008252:	6031      	str	r1, [r6, #0]
 8008254:	0606      	lsls	r6, r0, #24
 8008256:	d501      	bpl.n	800825c <_printf_i+0xbc>
 8008258:	681d      	ldr	r5, [r3, #0]
 800825a:	e003      	b.n	8008264 <_printf_i+0xc4>
 800825c:	0645      	lsls	r5, r0, #25
 800825e:	d5fb      	bpl.n	8008258 <_printf_i+0xb8>
 8008260:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008264:	2d00      	cmp	r5, #0
 8008266:	da03      	bge.n	8008270 <_printf_i+0xd0>
 8008268:	232d      	movs	r3, #45	@ 0x2d
 800826a:	426d      	negs	r5, r5
 800826c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008270:	230a      	movs	r3, #10
 8008272:	4858      	ldr	r0, [pc, #352]	@ (80083d4 <_printf_i+0x234>)
 8008274:	e011      	b.n	800829a <_printf_i+0xfa>
 8008276:	6821      	ldr	r1, [r4, #0]
 8008278:	6833      	ldr	r3, [r6, #0]
 800827a:	0608      	lsls	r0, r1, #24
 800827c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008280:	d402      	bmi.n	8008288 <_printf_i+0xe8>
 8008282:	0649      	lsls	r1, r1, #25
 8008284:	bf48      	it	mi
 8008286:	b2ad      	uxthmi	r5, r5
 8008288:	2f6f      	cmp	r7, #111	@ 0x6f
 800828a:	6033      	str	r3, [r6, #0]
 800828c:	bf14      	ite	ne
 800828e:	230a      	movne	r3, #10
 8008290:	2308      	moveq	r3, #8
 8008292:	4850      	ldr	r0, [pc, #320]	@ (80083d4 <_printf_i+0x234>)
 8008294:	2100      	movs	r1, #0
 8008296:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800829a:	6866      	ldr	r6, [r4, #4]
 800829c:	2e00      	cmp	r6, #0
 800829e:	60a6      	str	r6, [r4, #8]
 80082a0:	db05      	blt.n	80082ae <_printf_i+0x10e>
 80082a2:	6821      	ldr	r1, [r4, #0]
 80082a4:	432e      	orrs	r6, r5
 80082a6:	f021 0104 	bic.w	r1, r1, #4
 80082aa:	6021      	str	r1, [r4, #0]
 80082ac:	d04b      	beq.n	8008346 <_printf_i+0x1a6>
 80082ae:	4616      	mov	r6, r2
 80082b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80082b4:	fb03 5711 	mls	r7, r3, r1, r5
 80082b8:	5dc7      	ldrb	r7, [r0, r7]
 80082ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082be:	462f      	mov	r7, r5
 80082c0:	42bb      	cmp	r3, r7
 80082c2:	460d      	mov	r5, r1
 80082c4:	d9f4      	bls.n	80082b0 <_printf_i+0x110>
 80082c6:	2b08      	cmp	r3, #8
 80082c8:	d10b      	bne.n	80082e2 <_printf_i+0x142>
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	07df      	lsls	r7, r3, #31
 80082ce:	d508      	bpl.n	80082e2 <_printf_i+0x142>
 80082d0:	6923      	ldr	r3, [r4, #16]
 80082d2:	6861      	ldr	r1, [r4, #4]
 80082d4:	4299      	cmp	r1, r3
 80082d6:	bfde      	ittt	le
 80082d8:	2330      	movle	r3, #48	@ 0x30
 80082da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80082e2:	1b92      	subs	r2, r2, r6
 80082e4:	6122      	str	r2, [r4, #16]
 80082e6:	464b      	mov	r3, r9
 80082e8:	4621      	mov	r1, r4
 80082ea:	4640      	mov	r0, r8
 80082ec:	f8cd a000 	str.w	sl, [sp]
 80082f0:	aa03      	add	r2, sp, #12
 80082f2:	f7ff fee3 	bl	80080bc <_printf_common>
 80082f6:	3001      	adds	r0, #1
 80082f8:	d14a      	bne.n	8008390 <_printf_i+0x1f0>
 80082fa:	f04f 30ff 	mov.w	r0, #4294967295
 80082fe:	b004      	add	sp, #16
 8008300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	f043 0320 	orr.w	r3, r3, #32
 800830a:	6023      	str	r3, [r4, #0]
 800830c:	2778      	movs	r7, #120	@ 0x78
 800830e:	4832      	ldr	r0, [pc, #200]	@ (80083d8 <_printf_i+0x238>)
 8008310:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	6831      	ldr	r1, [r6, #0]
 8008318:	061f      	lsls	r7, r3, #24
 800831a:	f851 5b04 	ldr.w	r5, [r1], #4
 800831e:	d402      	bmi.n	8008326 <_printf_i+0x186>
 8008320:	065f      	lsls	r7, r3, #25
 8008322:	bf48      	it	mi
 8008324:	b2ad      	uxthmi	r5, r5
 8008326:	6031      	str	r1, [r6, #0]
 8008328:	07d9      	lsls	r1, r3, #31
 800832a:	bf44      	itt	mi
 800832c:	f043 0320 	orrmi.w	r3, r3, #32
 8008330:	6023      	strmi	r3, [r4, #0]
 8008332:	b11d      	cbz	r5, 800833c <_printf_i+0x19c>
 8008334:	2310      	movs	r3, #16
 8008336:	e7ad      	b.n	8008294 <_printf_i+0xf4>
 8008338:	4826      	ldr	r0, [pc, #152]	@ (80083d4 <_printf_i+0x234>)
 800833a:	e7e9      	b.n	8008310 <_printf_i+0x170>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	f023 0320 	bic.w	r3, r3, #32
 8008342:	6023      	str	r3, [r4, #0]
 8008344:	e7f6      	b.n	8008334 <_printf_i+0x194>
 8008346:	4616      	mov	r6, r2
 8008348:	e7bd      	b.n	80082c6 <_printf_i+0x126>
 800834a:	6833      	ldr	r3, [r6, #0]
 800834c:	6825      	ldr	r5, [r4, #0]
 800834e:	1d18      	adds	r0, r3, #4
 8008350:	6961      	ldr	r1, [r4, #20]
 8008352:	6030      	str	r0, [r6, #0]
 8008354:	062e      	lsls	r6, r5, #24
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	d501      	bpl.n	800835e <_printf_i+0x1be>
 800835a:	6019      	str	r1, [r3, #0]
 800835c:	e002      	b.n	8008364 <_printf_i+0x1c4>
 800835e:	0668      	lsls	r0, r5, #25
 8008360:	d5fb      	bpl.n	800835a <_printf_i+0x1ba>
 8008362:	8019      	strh	r1, [r3, #0]
 8008364:	2300      	movs	r3, #0
 8008366:	4616      	mov	r6, r2
 8008368:	6123      	str	r3, [r4, #16]
 800836a:	e7bc      	b.n	80082e6 <_printf_i+0x146>
 800836c:	6833      	ldr	r3, [r6, #0]
 800836e:	2100      	movs	r1, #0
 8008370:	1d1a      	adds	r2, r3, #4
 8008372:	6032      	str	r2, [r6, #0]
 8008374:	681e      	ldr	r6, [r3, #0]
 8008376:	6862      	ldr	r2, [r4, #4]
 8008378:	4630      	mov	r0, r6
 800837a:	f000 f985 	bl	8008688 <memchr>
 800837e:	b108      	cbz	r0, 8008384 <_printf_i+0x1e4>
 8008380:	1b80      	subs	r0, r0, r6
 8008382:	6060      	str	r0, [r4, #4]
 8008384:	6863      	ldr	r3, [r4, #4]
 8008386:	6123      	str	r3, [r4, #16]
 8008388:	2300      	movs	r3, #0
 800838a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800838e:	e7aa      	b.n	80082e6 <_printf_i+0x146>
 8008390:	4632      	mov	r2, r6
 8008392:	4649      	mov	r1, r9
 8008394:	4640      	mov	r0, r8
 8008396:	6923      	ldr	r3, [r4, #16]
 8008398:	47d0      	blx	sl
 800839a:	3001      	adds	r0, #1
 800839c:	d0ad      	beq.n	80082fa <_printf_i+0x15a>
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	079b      	lsls	r3, r3, #30
 80083a2:	d413      	bmi.n	80083cc <_printf_i+0x22c>
 80083a4:	68e0      	ldr	r0, [r4, #12]
 80083a6:	9b03      	ldr	r3, [sp, #12]
 80083a8:	4298      	cmp	r0, r3
 80083aa:	bfb8      	it	lt
 80083ac:	4618      	movlt	r0, r3
 80083ae:	e7a6      	b.n	80082fe <_printf_i+0x15e>
 80083b0:	2301      	movs	r3, #1
 80083b2:	4632      	mov	r2, r6
 80083b4:	4649      	mov	r1, r9
 80083b6:	4640      	mov	r0, r8
 80083b8:	47d0      	blx	sl
 80083ba:	3001      	adds	r0, #1
 80083bc:	d09d      	beq.n	80082fa <_printf_i+0x15a>
 80083be:	3501      	adds	r5, #1
 80083c0:	68e3      	ldr	r3, [r4, #12]
 80083c2:	9903      	ldr	r1, [sp, #12]
 80083c4:	1a5b      	subs	r3, r3, r1
 80083c6:	42ab      	cmp	r3, r5
 80083c8:	dcf2      	bgt.n	80083b0 <_printf_i+0x210>
 80083ca:	e7eb      	b.n	80083a4 <_printf_i+0x204>
 80083cc:	2500      	movs	r5, #0
 80083ce:	f104 0619 	add.w	r6, r4, #25
 80083d2:	e7f5      	b.n	80083c0 <_printf_i+0x220>
 80083d4:	080097e1 	.word	0x080097e1
 80083d8:	080097f2 	.word	0x080097f2

080083dc <__sflush_r>:
 80083dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e2:	0716      	lsls	r6, r2, #28
 80083e4:	4605      	mov	r5, r0
 80083e6:	460c      	mov	r4, r1
 80083e8:	d454      	bmi.n	8008494 <__sflush_r+0xb8>
 80083ea:	684b      	ldr	r3, [r1, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	dc02      	bgt.n	80083f6 <__sflush_r+0x1a>
 80083f0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	dd48      	ble.n	8008488 <__sflush_r+0xac>
 80083f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083f8:	2e00      	cmp	r6, #0
 80083fa:	d045      	beq.n	8008488 <__sflush_r+0xac>
 80083fc:	2300      	movs	r3, #0
 80083fe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008402:	682f      	ldr	r7, [r5, #0]
 8008404:	6a21      	ldr	r1, [r4, #32]
 8008406:	602b      	str	r3, [r5, #0]
 8008408:	d030      	beq.n	800846c <__sflush_r+0x90>
 800840a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800840c:	89a3      	ldrh	r3, [r4, #12]
 800840e:	0759      	lsls	r1, r3, #29
 8008410:	d505      	bpl.n	800841e <__sflush_r+0x42>
 8008412:	6863      	ldr	r3, [r4, #4]
 8008414:	1ad2      	subs	r2, r2, r3
 8008416:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008418:	b10b      	cbz	r3, 800841e <__sflush_r+0x42>
 800841a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800841c:	1ad2      	subs	r2, r2, r3
 800841e:	2300      	movs	r3, #0
 8008420:	4628      	mov	r0, r5
 8008422:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008424:	6a21      	ldr	r1, [r4, #32]
 8008426:	47b0      	blx	r6
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	d106      	bne.n	800843c <__sflush_r+0x60>
 800842e:	6829      	ldr	r1, [r5, #0]
 8008430:	291d      	cmp	r1, #29
 8008432:	d82b      	bhi.n	800848c <__sflush_r+0xb0>
 8008434:	4a28      	ldr	r2, [pc, #160]	@ (80084d8 <__sflush_r+0xfc>)
 8008436:	40ca      	lsrs	r2, r1
 8008438:	07d6      	lsls	r6, r2, #31
 800843a:	d527      	bpl.n	800848c <__sflush_r+0xb0>
 800843c:	2200      	movs	r2, #0
 800843e:	6062      	str	r2, [r4, #4]
 8008440:	6922      	ldr	r2, [r4, #16]
 8008442:	04d9      	lsls	r1, r3, #19
 8008444:	6022      	str	r2, [r4, #0]
 8008446:	d504      	bpl.n	8008452 <__sflush_r+0x76>
 8008448:	1c42      	adds	r2, r0, #1
 800844a:	d101      	bne.n	8008450 <__sflush_r+0x74>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	b903      	cbnz	r3, 8008452 <__sflush_r+0x76>
 8008450:	6560      	str	r0, [r4, #84]	@ 0x54
 8008452:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008454:	602f      	str	r7, [r5, #0]
 8008456:	b1b9      	cbz	r1, 8008488 <__sflush_r+0xac>
 8008458:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800845c:	4299      	cmp	r1, r3
 800845e:	d002      	beq.n	8008466 <__sflush_r+0x8a>
 8008460:	4628      	mov	r0, r5
 8008462:	f7ff fa9d 	bl	80079a0 <_free_r>
 8008466:	2300      	movs	r3, #0
 8008468:	6363      	str	r3, [r4, #52]	@ 0x34
 800846a:	e00d      	b.n	8008488 <__sflush_r+0xac>
 800846c:	2301      	movs	r3, #1
 800846e:	4628      	mov	r0, r5
 8008470:	47b0      	blx	r6
 8008472:	4602      	mov	r2, r0
 8008474:	1c50      	adds	r0, r2, #1
 8008476:	d1c9      	bne.n	800840c <__sflush_r+0x30>
 8008478:	682b      	ldr	r3, [r5, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d0c6      	beq.n	800840c <__sflush_r+0x30>
 800847e:	2b1d      	cmp	r3, #29
 8008480:	d001      	beq.n	8008486 <__sflush_r+0xaa>
 8008482:	2b16      	cmp	r3, #22
 8008484:	d11d      	bne.n	80084c2 <__sflush_r+0xe6>
 8008486:	602f      	str	r7, [r5, #0]
 8008488:	2000      	movs	r0, #0
 800848a:	e021      	b.n	80084d0 <__sflush_r+0xf4>
 800848c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008490:	b21b      	sxth	r3, r3
 8008492:	e01a      	b.n	80084ca <__sflush_r+0xee>
 8008494:	690f      	ldr	r7, [r1, #16]
 8008496:	2f00      	cmp	r7, #0
 8008498:	d0f6      	beq.n	8008488 <__sflush_r+0xac>
 800849a:	0793      	lsls	r3, r2, #30
 800849c:	bf18      	it	ne
 800849e:	2300      	movne	r3, #0
 80084a0:	680e      	ldr	r6, [r1, #0]
 80084a2:	bf08      	it	eq
 80084a4:	694b      	ldreq	r3, [r1, #20]
 80084a6:	1bf6      	subs	r6, r6, r7
 80084a8:	600f      	str	r7, [r1, #0]
 80084aa:	608b      	str	r3, [r1, #8]
 80084ac:	2e00      	cmp	r6, #0
 80084ae:	ddeb      	ble.n	8008488 <__sflush_r+0xac>
 80084b0:	4633      	mov	r3, r6
 80084b2:	463a      	mov	r2, r7
 80084b4:	4628      	mov	r0, r5
 80084b6:	6a21      	ldr	r1, [r4, #32]
 80084b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80084bc:	47e0      	blx	ip
 80084be:	2800      	cmp	r0, #0
 80084c0:	dc07      	bgt.n	80084d2 <__sflush_r+0xf6>
 80084c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084ca:	f04f 30ff 	mov.w	r0, #4294967295
 80084ce:	81a3      	strh	r3, [r4, #12]
 80084d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084d2:	4407      	add	r7, r0
 80084d4:	1a36      	subs	r6, r6, r0
 80084d6:	e7e9      	b.n	80084ac <__sflush_r+0xd0>
 80084d8:	20400001 	.word	0x20400001

080084dc <_fflush_r>:
 80084dc:	b538      	push	{r3, r4, r5, lr}
 80084de:	690b      	ldr	r3, [r1, #16]
 80084e0:	4605      	mov	r5, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	b913      	cbnz	r3, 80084ec <_fflush_r+0x10>
 80084e6:	2500      	movs	r5, #0
 80084e8:	4628      	mov	r0, r5
 80084ea:	bd38      	pop	{r3, r4, r5, pc}
 80084ec:	b118      	cbz	r0, 80084f6 <_fflush_r+0x1a>
 80084ee:	6a03      	ldr	r3, [r0, #32]
 80084f0:	b90b      	cbnz	r3, 80084f6 <_fflush_r+0x1a>
 80084f2:	f7ff f839 	bl	8007568 <__sinit>
 80084f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0f3      	beq.n	80084e6 <_fflush_r+0xa>
 80084fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008500:	07d0      	lsls	r0, r2, #31
 8008502:	d404      	bmi.n	800850e <_fflush_r+0x32>
 8008504:	0599      	lsls	r1, r3, #22
 8008506:	d402      	bmi.n	800850e <_fflush_r+0x32>
 8008508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800850a:	f7ff fa46 	bl	800799a <__retarget_lock_acquire_recursive>
 800850e:	4628      	mov	r0, r5
 8008510:	4621      	mov	r1, r4
 8008512:	f7ff ff63 	bl	80083dc <__sflush_r>
 8008516:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008518:	4605      	mov	r5, r0
 800851a:	07da      	lsls	r2, r3, #31
 800851c:	d4e4      	bmi.n	80084e8 <_fflush_r+0xc>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	059b      	lsls	r3, r3, #22
 8008522:	d4e1      	bmi.n	80084e8 <_fflush_r+0xc>
 8008524:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008526:	f7ff fa39 	bl	800799c <__retarget_lock_release_recursive>
 800852a:	e7dd      	b.n	80084e8 <_fflush_r+0xc>

0800852c <__swhatbuf_r>:
 800852c:	b570      	push	{r4, r5, r6, lr}
 800852e:	460c      	mov	r4, r1
 8008530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008534:	4615      	mov	r5, r2
 8008536:	2900      	cmp	r1, #0
 8008538:	461e      	mov	r6, r3
 800853a:	b096      	sub	sp, #88	@ 0x58
 800853c:	da0c      	bge.n	8008558 <__swhatbuf_r+0x2c>
 800853e:	89a3      	ldrh	r3, [r4, #12]
 8008540:	2100      	movs	r1, #0
 8008542:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008546:	bf14      	ite	ne
 8008548:	2340      	movne	r3, #64	@ 0x40
 800854a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800854e:	2000      	movs	r0, #0
 8008550:	6031      	str	r1, [r6, #0]
 8008552:	602b      	str	r3, [r5, #0]
 8008554:	b016      	add	sp, #88	@ 0x58
 8008556:	bd70      	pop	{r4, r5, r6, pc}
 8008558:	466a      	mov	r2, sp
 800855a:	f000 f863 	bl	8008624 <_fstat_r>
 800855e:	2800      	cmp	r0, #0
 8008560:	dbed      	blt.n	800853e <__swhatbuf_r+0x12>
 8008562:	9901      	ldr	r1, [sp, #4]
 8008564:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008568:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800856c:	4259      	negs	r1, r3
 800856e:	4159      	adcs	r1, r3
 8008570:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008574:	e7eb      	b.n	800854e <__swhatbuf_r+0x22>

08008576 <__smakebuf_r>:
 8008576:	898b      	ldrh	r3, [r1, #12]
 8008578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800857a:	079d      	lsls	r5, r3, #30
 800857c:	4606      	mov	r6, r0
 800857e:	460c      	mov	r4, r1
 8008580:	d507      	bpl.n	8008592 <__smakebuf_r+0x1c>
 8008582:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008586:	6023      	str	r3, [r4, #0]
 8008588:	6123      	str	r3, [r4, #16]
 800858a:	2301      	movs	r3, #1
 800858c:	6163      	str	r3, [r4, #20]
 800858e:	b003      	add	sp, #12
 8008590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008592:	466a      	mov	r2, sp
 8008594:	ab01      	add	r3, sp, #4
 8008596:	f7ff ffc9 	bl	800852c <__swhatbuf_r>
 800859a:	9f00      	ldr	r7, [sp, #0]
 800859c:	4605      	mov	r5, r0
 800859e:	4639      	mov	r1, r7
 80085a0:	4630      	mov	r0, r6
 80085a2:	f7ff fa67 	bl	8007a74 <_malloc_r>
 80085a6:	b948      	cbnz	r0, 80085bc <__smakebuf_r+0x46>
 80085a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ac:	059a      	lsls	r2, r3, #22
 80085ae:	d4ee      	bmi.n	800858e <__smakebuf_r+0x18>
 80085b0:	f023 0303 	bic.w	r3, r3, #3
 80085b4:	f043 0302 	orr.w	r3, r3, #2
 80085b8:	81a3      	strh	r3, [r4, #12]
 80085ba:	e7e2      	b.n	8008582 <__smakebuf_r+0xc>
 80085bc:	89a3      	ldrh	r3, [r4, #12]
 80085be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80085c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085c6:	81a3      	strh	r3, [r4, #12]
 80085c8:	9b01      	ldr	r3, [sp, #4]
 80085ca:	6020      	str	r0, [r4, #0]
 80085cc:	b15b      	cbz	r3, 80085e6 <__smakebuf_r+0x70>
 80085ce:	4630      	mov	r0, r6
 80085d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085d4:	f000 f838 	bl	8008648 <_isatty_r>
 80085d8:	b128      	cbz	r0, 80085e6 <__smakebuf_r+0x70>
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	f023 0303 	bic.w	r3, r3, #3
 80085e0:	f043 0301 	orr.w	r3, r3, #1
 80085e4:	81a3      	strh	r3, [r4, #12]
 80085e6:	89a3      	ldrh	r3, [r4, #12]
 80085e8:	431d      	orrs	r5, r3
 80085ea:	81a5      	strh	r5, [r4, #12]
 80085ec:	e7cf      	b.n	800858e <__smakebuf_r+0x18>

080085ee <memmove>:
 80085ee:	4288      	cmp	r0, r1
 80085f0:	b510      	push	{r4, lr}
 80085f2:	eb01 0402 	add.w	r4, r1, r2
 80085f6:	d902      	bls.n	80085fe <memmove+0x10>
 80085f8:	4284      	cmp	r4, r0
 80085fa:	4623      	mov	r3, r4
 80085fc:	d807      	bhi.n	800860e <memmove+0x20>
 80085fe:	1e43      	subs	r3, r0, #1
 8008600:	42a1      	cmp	r1, r4
 8008602:	d008      	beq.n	8008616 <memmove+0x28>
 8008604:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008608:	f803 2f01 	strb.w	r2, [r3, #1]!
 800860c:	e7f8      	b.n	8008600 <memmove+0x12>
 800860e:	4601      	mov	r1, r0
 8008610:	4402      	add	r2, r0
 8008612:	428a      	cmp	r2, r1
 8008614:	d100      	bne.n	8008618 <memmove+0x2a>
 8008616:	bd10      	pop	{r4, pc}
 8008618:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800861c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008620:	e7f7      	b.n	8008612 <memmove+0x24>
	...

08008624 <_fstat_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	2300      	movs	r3, #0
 8008628:	4d06      	ldr	r5, [pc, #24]	@ (8008644 <_fstat_r+0x20>)
 800862a:	4604      	mov	r4, r0
 800862c:	4608      	mov	r0, r1
 800862e:	4611      	mov	r1, r2
 8008630:	602b      	str	r3, [r5, #0]
 8008632:	f7f9 f9f3 	bl	8001a1c <_fstat>
 8008636:	1c43      	adds	r3, r0, #1
 8008638:	d102      	bne.n	8008640 <_fstat_r+0x1c>
 800863a:	682b      	ldr	r3, [r5, #0]
 800863c:	b103      	cbz	r3, 8008640 <_fstat_r+0x1c>
 800863e:	6023      	str	r3, [r4, #0]
 8008640:	bd38      	pop	{r3, r4, r5, pc}
 8008642:	bf00      	nop
 8008644:	200004bc 	.word	0x200004bc

08008648 <_isatty_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	2300      	movs	r3, #0
 800864c:	4d05      	ldr	r5, [pc, #20]	@ (8008664 <_isatty_r+0x1c>)
 800864e:	4604      	mov	r4, r0
 8008650:	4608      	mov	r0, r1
 8008652:	602b      	str	r3, [r5, #0]
 8008654:	f7f9 f9f1 	bl	8001a3a <_isatty>
 8008658:	1c43      	adds	r3, r0, #1
 800865a:	d102      	bne.n	8008662 <_isatty_r+0x1a>
 800865c:	682b      	ldr	r3, [r5, #0]
 800865e:	b103      	cbz	r3, 8008662 <_isatty_r+0x1a>
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	bd38      	pop	{r3, r4, r5, pc}
 8008664:	200004bc 	.word	0x200004bc

08008668 <_sbrk_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	2300      	movs	r3, #0
 800866c:	4d05      	ldr	r5, [pc, #20]	@ (8008684 <_sbrk_r+0x1c>)
 800866e:	4604      	mov	r4, r0
 8008670:	4608      	mov	r0, r1
 8008672:	602b      	str	r3, [r5, #0]
 8008674:	f7f9 f9f8 	bl	8001a68 <_sbrk>
 8008678:	1c43      	adds	r3, r0, #1
 800867a:	d102      	bne.n	8008682 <_sbrk_r+0x1a>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	b103      	cbz	r3, 8008682 <_sbrk_r+0x1a>
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	bd38      	pop	{r3, r4, r5, pc}
 8008684:	200004bc 	.word	0x200004bc

08008688 <memchr>:
 8008688:	4603      	mov	r3, r0
 800868a:	b510      	push	{r4, lr}
 800868c:	b2c9      	uxtb	r1, r1
 800868e:	4402      	add	r2, r0
 8008690:	4293      	cmp	r3, r2
 8008692:	4618      	mov	r0, r3
 8008694:	d101      	bne.n	800869a <memchr+0x12>
 8008696:	2000      	movs	r0, #0
 8008698:	e003      	b.n	80086a2 <memchr+0x1a>
 800869a:	7804      	ldrb	r4, [r0, #0]
 800869c:	3301      	adds	r3, #1
 800869e:	428c      	cmp	r4, r1
 80086a0:	d1f6      	bne.n	8008690 <memchr+0x8>
 80086a2:	bd10      	pop	{r4, pc}

080086a4 <memcpy>:
 80086a4:	440a      	add	r2, r1
 80086a6:	4291      	cmp	r1, r2
 80086a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80086ac:	d100      	bne.n	80086b0 <memcpy+0xc>
 80086ae:	4770      	bx	lr
 80086b0:	b510      	push	{r4, lr}
 80086b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086b6:	4291      	cmp	r1, r2
 80086b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086bc:	d1f9      	bne.n	80086b2 <memcpy+0xe>
 80086be:	bd10      	pop	{r4, pc}

080086c0 <_realloc_r>:
 80086c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c4:	4607      	mov	r7, r0
 80086c6:	4614      	mov	r4, r2
 80086c8:	460d      	mov	r5, r1
 80086ca:	b921      	cbnz	r1, 80086d6 <_realloc_r+0x16>
 80086cc:	4611      	mov	r1, r2
 80086ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086d2:	f7ff b9cf 	b.w	8007a74 <_malloc_r>
 80086d6:	b92a      	cbnz	r2, 80086e4 <_realloc_r+0x24>
 80086d8:	f7ff f962 	bl	80079a0 <_free_r>
 80086dc:	4625      	mov	r5, r4
 80086de:	4628      	mov	r0, r5
 80086e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086e4:	f000 f81a 	bl	800871c <_malloc_usable_size_r>
 80086e8:	4284      	cmp	r4, r0
 80086ea:	4606      	mov	r6, r0
 80086ec:	d802      	bhi.n	80086f4 <_realloc_r+0x34>
 80086ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80086f2:	d8f4      	bhi.n	80086de <_realloc_r+0x1e>
 80086f4:	4621      	mov	r1, r4
 80086f6:	4638      	mov	r0, r7
 80086f8:	f7ff f9bc 	bl	8007a74 <_malloc_r>
 80086fc:	4680      	mov	r8, r0
 80086fe:	b908      	cbnz	r0, 8008704 <_realloc_r+0x44>
 8008700:	4645      	mov	r5, r8
 8008702:	e7ec      	b.n	80086de <_realloc_r+0x1e>
 8008704:	42b4      	cmp	r4, r6
 8008706:	4622      	mov	r2, r4
 8008708:	4629      	mov	r1, r5
 800870a:	bf28      	it	cs
 800870c:	4632      	movcs	r2, r6
 800870e:	f7ff ffc9 	bl	80086a4 <memcpy>
 8008712:	4629      	mov	r1, r5
 8008714:	4638      	mov	r0, r7
 8008716:	f7ff f943 	bl	80079a0 <_free_r>
 800871a:	e7f1      	b.n	8008700 <_realloc_r+0x40>

0800871c <_malloc_usable_size_r>:
 800871c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008720:	1f18      	subs	r0, r3, #4
 8008722:	2b00      	cmp	r3, #0
 8008724:	bfbc      	itt	lt
 8008726:	580b      	ldrlt	r3, [r1, r0]
 8008728:	18c0      	addlt	r0, r0, r3
 800872a:	4770      	bx	lr

0800872c <_init>:
 800872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872e:	bf00      	nop
 8008730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008732:	bc08      	pop	{r3}
 8008734:	469e      	mov	lr, r3
 8008736:	4770      	bx	lr

08008738 <_fini>:
 8008738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873a:	bf00      	nop
 800873c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800873e:	bc08      	pop	{r3}
 8008740:	469e      	mov	lr, r3
 8008742:	4770      	bx	lr
